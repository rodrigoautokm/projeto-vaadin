{
  "version": 3,
  "sources": ["../../@vaadin/field-base/src/pattern-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { InputConstraintsMixin } from './input-constraints-mixin.js';\n\n/**\n * A mixin to provide `pattern` and `preventInvalidInput` properties.\n *\n * @polymerMixin\n * @mixes InputConstraintsMixin\n */\nexport const PatternMixin = (superclass) =>\n  class PatternMixinClass extends InputConstraintsMixin(superclass) {\n    static get properties() {\n      return {\n        /**\n         * A regular expression that the value is checked against.\n         * The pattern must match the entire value, not just some subset.\n         */\n        pattern: {\n          type: String,\n        },\n\n        /**\n         * When set to true, user is prevented from typing a value that\n         * conflicts with the given `pattern`.\n         * @attr {boolean} prevent-invalid-input\n         * @deprecated Please use `allowedCharPattern` instead.\n         */\n        preventInvalidInput: {\n          type: Boolean,\n          observer: '_preventInvalidInputChanged',\n        },\n      };\n    }\n\n    static get delegateAttrs() {\n      return [...super.delegateAttrs, 'pattern'];\n    }\n\n    static get constraints() {\n      return [...super.constraints, 'pattern'];\n    }\n\n    /** @private */\n    _checkInputValue() {\n      if (this.preventInvalidInput) {\n        const input = this.inputElement;\n        if (input && input.value.length > 0 && !this.checkValidity()) {\n          input.value = this.value || '';\n          // Add input-prevented attribute for 200ms\n          this.setAttribute('input-prevented', '');\n          this._inputDebouncer = Debouncer.debounce(this._inputDebouncer, timeOut.after(200), () => {\n            this.removeAttribute('input-prevented');\n          });\n        }\n      }\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     * @override\n     */\n    _onInput(event) {\n      this._checkInputValue();\n\n      super._onInput(event);\n    }\n\n    /** @private */\n    _preventInvalidInputChanged(preventInvalidInput) {\n      if (preventInvalidInput) {\n        console.warn(\n          `WARNING: Since Vaadin 23.2, \"preventInvalidInput\" is deprecated. Please use \"allowedCharPattern\" instead.`,\n        );\n      }\n    }\n  };\n"],
  "mappings": ";;;;;;;;;;;AAeO,IAAM,eAAe,CAAC,eAC3B,MAAM,0BAA0B,sBAAsB,UAAU,EAAE;AAAA,EAChE,WAAW,aAAa;AACtB,WAAO;AAAA,MAKL,SAAS;AAAA,QACP,MAAM;AAAA,MACR;AAAA,MAQA,qBAAqB;AAAA,QACnB,MAAM;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,gBAAgB;AACzB,WAAO,CAAC,GAAG,MAAM,eAAe,SAAS;AAAA,EAC3C;AAAA,EAEA,WAAW,cAAc;AACvB,WAAO,CAAC,GAAG,MAAM,aAAa,SAAS;AAAA,EACzC;AAAA,EAGA,mBAAmB;AACjB,QAAI,KAAK,qBAAqB;AAC5B,YAAM,QAAQ,KAAK;AACnB,UAAI,SAAS,MAAM,MAAM,SAAS,KAAK,CAAC,KAAK,cAAc,GAAG;AAC5D,cAAM,QAAQ,KAAK,SAAS;AAE5B,aAAK,aAAa,mBAAmB,EAAE;AACvC,aAAK,kBAAkB,UAAU,SAAS,KAAK,iBAAiB,QAAQ,MAAM,GAAG,GAAG,MAAM;AACxF,eAAK,gBAAgB,iBAAiB;AAAA,QACxC,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EAOA,SAAS,OAAO;AACd,SAAK,iBAAiB;AAEtB,UAAM,SAAS,KAAK;AAAA,EACtB;AAAA,EAGA,4BAA4B,qBAAqB;AAC/C,QAAI,qBAAqB;AACvB,cAAQ;AAAA,QACN;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
