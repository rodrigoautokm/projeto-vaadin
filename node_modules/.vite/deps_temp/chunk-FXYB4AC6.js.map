{
  "version": 3,
  "sources": ["../../@vaadin/vaadin-lumo-styles/mixins/helper.js", "../../@vaadin/vaadin-lumo-styles/mixins/required-field.js", "../../@vaadin/field-base/src/error-controller.js", "../../@vaadin/field-base/src/field-aria-controller.js", "../../@vaadin/field-base/src/helper-controller.js", "../../@vaadin/field-base/src/validate-mixin.js", "../../@vaadin/field-base/src/field-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '../color.js';\nimport '../sizing.js';\nimport '../style.js';\nimport '../typography.js';\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nexport const helper = css`\n  :host([has-helper]) [part='helper-text']::before {\n    content: '';\n    display: block;\n    height: 0.4em;\n  }\n\n  [part='helper-text'] {\n    display: block;\n    color: var(--lumo-secondary-text-color);\n    font-size: var(--lumo-font-size-xs);\n    line-height: var(--lumo-line-height-xs);\n    margin-left: calc(var(--lumo-border-radius-m) / 4);\n    transition: color 0.2s;\n  }\n\n  :host(:hover:not([readonly])) [part='helper-text'] {\n    color: var(--lumo-body-text-color);\n  }\n\n  :host([disabled]) [part='helper-text'] {\n    color: var(--lumo-disabled-text-color);\n    -webkit-text-fill-color: var(--lumo-disabled-text-color);\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='helper-text']::before {\n    display: none;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='helper-text']::after {\n    content: '';\n    display: block;\n    height: 0.4em;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='label'] {\n    order: 0;\n    padding-bottom: 0.4em;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='helper-text'] {\n    order: 1;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='label'] + * {\n    order: 2;\n  }\n\n  :host([has-helper][theme~='helper-above-field']) [part='error-message'] {\n    order: 3;\n  }\n`;\n", "/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '../color.js';\nimport '../spacing.js';\nimport '../style.js';\nimport '../typography.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst requiredField = css`\n  [part='label'] {\n    align-self: flex-start;\n    color: var(--lumo-secondary-text-color);\n    font-weight: 500;\n    font-size: var(--lumo-font-size-s);\n    margin-left: calc(var(--lumo-border-radius-m) / 4);\n    transition: color 0.2s;\n    line-height: 1;\n    padding-right: 1em;\n    padding-bottom: 0.5em;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    position: relative;\n    max-width: 100%;\n    box-sizing: border-box;\n  }\n\n  :host([has-label])::before {\n    margin-top: calc(var(--lumo-font-size-s) * 1.5);\n  }\n\n  :host([has-label][theme~='small'])::before {\n    margin-top: calc(var(--lumo-font-size-xs) * 1.5);\n  }\n\n  :host([has-label]) {\n    padding-top: var(--lumo-space-m);\n  }\n\n  :host([required]) [part='required-indicator']::after {\n    content: var(--lumo-required-field-indicator, '\u2022');\n    transition: opacity 0.2s;\n    color: var(--lumo-required-field-indicator-color, var(--lumo-primary-text-color));\n    position: absolute;\n    right: 0;\n    width: 1em;\n    text-align: center;\n  }\n\n  :host([invalid]) [part='required-indicator']::after {\n    color: var(--lumo-required-field-indicator-color, var(--lumo-error-text-color));\n  }\n\n  [part='error-message'] {\n    margin-left: calc(var(--lumo-border-radius-m) / 4);\n    font-size: var(--lumo-font-size-xs);\n    line-height: var(--lumo-line-height-xs);\n    color: var(--lumo-error-text-color);\n    will-change: max-height;\n    transition: 0.4s max-height;\n    max-height: 5em;\n  }\n\n  :host([has-error-message]) [part='error-message']::before,\n  :host([has-error-message]) [part='error-message']::after {\n    content: '';\n    display: block;\n    height: 0.4em;\n  }\n\n  :host(:not([invalid])) [part='error-message'] {\n    max-height: 0;\n    overflow: hidden;\n  }\n\n  /* RTL specific styles */\n\n  :host([dir='rtl']) [part='label'] {\n    margin-left: 0;\n    margin-right: calc(var(--lumo-border-radius-m) / 4);\n  }\n\n  :host([dir='rtl']) [part='label'] {\n    padding-left: 1em;\n    padding-right: 0;\n  }\n\n  :host([dir='rtl']) [part='required-indicator']::after {\n    right: auto;\n    left: 0;\n  }\n\n  :host([dir='rtl']) [part='error-message'] {\n    margin-left: 0;\n    margin-right: calc(var(--lumo-border-radius-m) / 4);\n  }\n`;\n\nregisterStyles('', requiredField, { moduleId: 'lumo-required-field' });\n\nexport { requiredField };\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\n\n/**\n * A controller that manages the error message node content.\n */\nexport class ErrorController extends SlotController {\n  constructor(host) {\n    super(\n      host,\n      'error-message',\n      () => document.createElement('div'),\n      (_host, node) => {\n        this.__updateErrorId(node);\n\n        this.__updateHasError();\n      },\n      true,\n    );\n  }\n\n  /**\n   * ID attribute value set on the error message element.\n   *\n   * @return {string}\n   */\n  get errorId() {\n    return this.node && this.node.id;\n  }\n\n  /**\n   * Set the error message element text content.\n   *\n   * @param {string} errorMessage\n   */\n  setErrorMessage(errorMessage) {\n    this.errorMessage = errorMessage;\n\n    this.__updateHasError();\n  }\n\n  /**\n   * Set invalid state for detecting whether to show error message.\n   *\n   * @param {boolean} invalid\n   */\n  setInvalid(invalid) {\n    this.invalid = invalid;\n\n    this.__updateHasError();\n  }\n\n  /**\n   * Override to initialize the newly added custom error message.\n   *\n   * @param {Node} errorNode\n   * @protected\n   * @override\n   */\n  initCustomNode(errorNode) {\n    this.__updateErrorId(errorNode);\n\n    // Save the custom error message content on the host.\n    if (errorNode.textContent && !this.errorMessage) {\n      this.errorMessage = errorNode.textContent.trim();\n    }\n\n    this.__updateHasError();\n  }\n\n  /**\n   * Override to cleanup error message node when it's removed.\n   *\n   * @param {Node} node\n   * @protected\n   * @override\n   */\n  teardownNode(node) {\n    let errorNode = this.getSlotChild();\n\n    // If custom error was removed, restore the default one.\n    if (!errorNode && node !== this.defaultNode) {\n      errorNode = this.attachDefaultNode();\n\n      // Run initializer to update default error message ID.\n      this.initNode(errorNode);\n    }\n\n    this.__updateHasError();\n  }\n\n  /**\n   * @param {string} error\n   * @private\n   */\n  __isNotEmpty(error) {\n    return Boolean(error && error.trim() !== '');\n  }\n\n  /** @private */\n  __updateHasError() {\n    const errorNode = this.node;\n    const hasError = Boolean(this.invalid && this.__isNotEmpty(this.errorMessage));\n\n    // Update both default and custom error message node.\n    if (errorNode) {\n      errorNode.textContent = hasError ? this.errorMessage : '';\n      errorNode.hidden = !hasError;\n\n      // Role alert will make the error message announce immediately\n      // as the field becomes invalid\n      if (hasError) {\n        errorNode.setAttribute('role', 'alert');\n      } else {\n        errorNode.removeAttribute('role');\n      }\n    }\n\n    this.host.toggleAttribute('has-error-message', hasError);\n  }\n\n  /**\n   * @param {HTMLElement} errorNode\n   * @private\n   */\n  __updateErrorId(errorNode) {\n    if (!errorNode.id) {\n      errorNode.id = this.defaultId;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { addValueToAttribute, removeValueFromAttribute } from '@vaadin/component-base/src/dom-utils.js';\n\n/**\n * A controller for managing ARIA attributes for a field element:\n * either the component itself or slotted `<input>` element.\n */\nexport class FieldAriaController {\n  constructor(host) {\n    this.host = host;\n    this.__required = false;\n  }\n\n  /**\n   * Sets a target element to which ARIA attributes are added.\n   *\n   * @param {HTMLElement} target\n   */\n  setTarget(target) {\n    this.__target = target;\n    this.__setAriaRequiredAttribute(this.__required);\n    this.__setLabelIdToAriaAttribute(this.__labelId);\n    this.__setErrorIdToAriaAttribute(this.__errorId);\n    this.__setHelperIdToAriaAttribute(this.__helperId);\n  }\n\n  /**\n   * Toggles the `aria-required` attribute on the target element\n   * if the target is the host component (e.g. a field group).\n   * Otherwise, it does nothing.\n   *\n   * @param {boolean} required\n   */\n  setRequired(required) {\n    this.__setAriaRequiredAttribute(required);\n    this.__required = required;\n  }\n\n  /**\n   * Links the target element with a slotted label element\n   * via the target's attribute `aria-labelledby`.\n   *\n   * To unlink the previous slotted label element, pass `null` as `labelId`.\n   *\n   * @param {string | null} labelId\n   */\n  setLabelId(labelId) {\n    this.__setLabelIdToAriaAttribute(labelId, this.__labelId);\n    this.__labelId = labelId;\n  }\n\n  /**\n   * Links the target element with a slotted error element via the target's attribute:\n   * - `aria-labelledby` if the target is the host component (e.g a field group).\n   * - `aria-describedby` otherwise.\n   *\n   * To unlink the previous slotted error element, pass `null` as `errorId`.\n   *\n   * @param {string | null} errorId\n   */\n  setErrorId(errorId) {\n    this.__setErrorIdToAriaAttribute(errorId, this.__errorId);\n    this.__errorId = errorId;\n  }\n\n  /**\n   * Links the target element with a slotted helper element via the target's attribute:\n   * - `aria-labelledby` if the target is the host component (e.g a field group).\n   * - `aria-describedby` otherwise.\n   *\n   * To unlink the previous slotted helper element, pass `null` as `helperId`.\n   *\n   * @param {string | null} helperId\n   */\n  setHelperId(helperId) {\n    this.__setHelperIdToAriaAttribute(helperId, this.__helperId);\n    this.__helperId = helperId;\n  }\n\n  /**\n   * `true` if the target element is the host component itself, `false` otherwise.\n   *\n   * @return {boolean}\n   * @private\n   */\n  get __isGroupField() {\n    return this.__target === this.host;\n  }\n\n  /**\n   * @param {string | null | undefined} labelId\n   * @param {string | null | undefined} oldLabelId\n   * @private\n   */\n  __setLabelIdToAriaAttribute(labelId, oldLabelId) {\n    this.__setAriaAttributeId('aria-labelledby', labelId, oldLabelId);\n  }\n\n  /**\n   * @param {string | null | undefined} errorId\n   * @param {string | null | undefined} oldErrorId\n   * @private\n   */\n  __setErrorIdToAriaAttribute(errorId, oldErrorId) {\n    // For groups, add all IDs to aria-labelledby rather than aria-describedby -\n    // that should guarantee that it's announced when the group is entered.\n    if (this.__isGroupField) {\n      this.__setAriaAttributeId('aria-labelledby', errorId, oldErrorId);\n    } else {\n      this.__setAriaAttributeId('aria-describedby', errorId, oldErrorId);\n    }\n  }\n\n  /**\n   * @param {string | null | undefined} helperId\n   * @param {string | null | undefined} oldHelperId\n   * @private\n   */\n  __setHelperIdToAriaAttribute(helperId, oldHelperId) {\n    // For groups, add all IDs to aria-labelledby rather than aria-describedby -\n    // that should guarantee that it's announced when the group is entered.\n    if (this.__isGroupField) {\n      this.__setAriaAttributeId('aria-labelledby', helperId, oldHelperId);\n    } else {\n      this.__setAriaAttributeId('aria-describedby', helperId, oldHelperId);\n    }\n  }\n\n  /**\n   * @param {boolean} required\n   * @private\n   */\n  __setAriaRequiredAttribute(required) {\n    if (!this.__target) {\n      return;\n    }\n\n    if (['input', 'textarea'].includes(this.__target.localName)) {\n      // Native <input> or <textarea>, required is enough\n      return;\n    }\n\n    if (required) {\n      this.__target.setAttribute('aria-required', 'true');\n    } else {\n      this.__target.removeAttribute('aria-required');\n    }\n  }\n\n  /**\n   * @param {string | null | undefined} newId\n   * @param {string | null | undefined} oldId\n   * @private\n   */\n  __setAriaAttributeId(attr, newId, oldId) {\n    if (!this.__target) {\n      return;\n    }\n\n    if (oldId) {\n      removeValueFromAttribute(this.__target, attr, oldId);\n    }\n\n    if (newId) {\n      addValueToAttribute(this.__target, attr, newId);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\n\n/**\n * A controller that manages the helper node content.\n */\nexport class HelperController extends SlotController {\n  constructor(host) {\n    // Do not provide slot factory, as only create helper lazily.\n    super(host, 'helper', null, null, true);\n  }\n\n  get helperId() {\n    return this.node && this.node.id;\n  }\n\n  /**\n   * Override to initialize the newly added custom helper.\n   *\n   * @param {Node} helperNode\n   * @protected\n   * @override\n   */\n  initCustomNode(helperNode) {\n    this.__updateHelperId(helperNode);\n\n    this.__observeHelper(helperNode);\n\n    const hasHelper = this.__hasHelper(helperNode);\n    this.__toggleHasHelper(hasHelper);\n  }\n\n  /**\n   * Override to cleanup helper node when it's removed.\n   *\n   * @param {Node} _node\n   * @protected\n   * @override\n   */\n  teardownNode(_node) {\n    // The observer does not exist when the default helper is removed.\n    if (this.__helperIdObserver) {\n      this.__helperIdObserver.disconnect();\n    }\n\n    const helperNode = this.getSlotChild();\n\n    // Custom node is added to helper slot\n    if (helperNode && helperNode !== this.defaultNode) {\n      const hasHelper = this.__hasHelper(helperNode);\n      this.__toggleHasHelper(hasHelper);\n    } else {\n      // Restore default helper if needed\n      this.__applyDefaultHelper(this.helperText, helperNode);\n    }\n  }\n\n  /**\n   * Set helper text based on corresponding host property.\n   * @param {string} helperText\n   */\n  setHelperText(helperText) {\n    this.helperText = helperText;\n\n    const helperNode = this.getSlotChild();\n    if (!helperNode || helperNode === this.defaultNode) {\n      this.__applyDefaultHelper(helperText, helperNode);\n    }\n  }\n\n  /**\n   * @param {HTMLElement} helperNode\n   * @return {boolean}\n   * @private\n   */\n  __hasHelper(helperNode) {\n    if (!helperNode) {\n      return false;\n    }\n\n    return (\n      helperNode.children.length > 0 ||\n      (helperNode.nodeType === Node.ELEMENT_NODE && customElements.get(helperNode.localName)) ||\n      this.__isNotEmpty(helperNode.textContent)\n    );\n  }\n\n  /**\n   * @param {string} helperText\n   * @private\n   */\n  __isNotEmpty(helperText) {\n    return helperText && helperText.trim() !== '';\n  }\n\n  /**\n   * @param {string} helperText\n   * @param {Node} helperNode\n   * @private\n   */\n  __applyDefaultHelper(helperText, helperNode) {\n    const hasHelperText = this.__isNotEmpty(helperText);\n\n    if (hasHelperText && !helperNode) {\n      // Set slot factory lazily to only create helper node when needed.\n      this.slotFactory = () => document.createElement('div');\n\n      helperNode = this.attachDefaultNode();\n\n      this.__updateHelperId(helperNode);\n      this.__observeHelper(helperNode);\n    }\n\n    if (helperNode) {\n      helperNode.textContent = helperText;\n    }\n\n    this.__toggleHasHelper(hasHelperText);\n  }\n\n  /**\n   * @param {HTMLElement} helperNode\n   * @private\n   */\n  __observeHelper(helperNode) {\n    this.__helperObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const target = mutation.target;\n\n        // Ensure the mutation target is the currently connected helper\n        // to ignore async mutations dispatched for removed element.\n        const isHelperMutation = target === this.node;\n\n        if (mutation.type === 'attributes') {\n          // We use attributeFilter to only observe ID mutation,\n          // no need to check for attribute name separately.\n          if (isHelperMutation && target.id !== this.defaultId) {\n            this.__updateHelperId(target);\n          }\n        } else if (isHelperMutation || target.parentElement === this.node) {\n          // Update has-helper when textContent changes\n          const hasHelper = this.__hasHelper(this.node);\n          this.__toggleHasHelper(hasHelper);\n        }\n      });\n    });\n\n    // Observe changes to helper ID attribute, text content and children.\n    this.__helperObserver.observe(helperNode, {\n      attributes: true,\n      attributeFilter: ['id'],\n      childList: true,\n      subtree: true,\n      characterData: true,\n    });\n  }\n\n  /**\n   * @param {boolean} hasHelper\n   * @private\n   */\n  __toggleHasHelper(hasHelper) {\n    this.host.toggleAttribute('has-helper', hasHelper);\n\n    // Make it possible for other mixins to observe change\n    this.dispatchEvent(\n      new CustomEvent('helper-changed', {\n        detail: {\n          hasHelper,\n          node: this.node,\n        },\n      }),\n    );\n  }\n\n  /**\n   * @param {HTMLElement} helperNode\n   * @private\n   */\n  __updateHelperId(helperNode) {\n    if (!helperNode.id) {\n      helperNode.id = this.defaultId;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to provide required state and validation logic.\n *\n * @polymerMixin\n */\nexport const ValidateMixin = dedupingMixin(\n  (superclass) =>\n    class ValidateMixinClass extends superclass {\n      static get properties() {\n        return {\n          /**\n           * Set to true when the field is invalid.\n           */\n          invalid: {\n            type: Boolean,\n            reflectToAttribute: true,\n            notify: true,\n            value: false,\n          },\n\n          /**\n           * Specifies that the user must fill in a value.\n           */\n          required: {\n            type: Boolean,\n            reflectToAttribute: true,\n          },\n        };\n      }\n\n      /**\n       * Validates the field and sets the `invalid` property based on the result.\n       *\n       * The method fires a `validated` event with the result of the validation.\n       *\n       * @return {boolean} True if the value is valid.\n       */\n      validate() {\n        const isValid = this.checkValidity();\n        this._setInvalid(!isValid);\n        this.dispatchEvent(new CustomEvent('validated', { detail: { valid: isValid } }));\n        return isValid;\n      }\n\n      /**\n       * Returns true if the field value satisfies all constraints (if any).\n       *\n       * @return {boolean}\n       */\n      checkValidity() {\n        return !this.required || !!this.value;\n      }\n\n      /**\n       * @param {boolean} invalid\n       * @protected\n       */\n      _setInvalid(invalid) {\n        if (this._shouldSetInvalid(invalid)) {\n          this.invalid = invalid;\n        }\n      }\n\n      /**\n       * Override this method to define whether the given `invalid` state should be set.\n       *\n       * @param {boolean} _invalid\n       * @return {boolean}\n       * @protected\n       */\n      _shouldSetInvalid(_invalid) {\n        return true;\n      }\n\n      /**\n       * Fired whenever the field is validated.\n       *\n       * @event validated\n       * @param {Object} detail\n       * @param {boolean} detail.valid the result of the validation.\n       */\n    },\n);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { ErrorController } from './error-controller.js';\nimport { FieldAriaController } from './field-aria-controller.js';\nimport { HelperController } from './helper-controller.js';\nimport { LabelMixin } from './label-mixin.js';\nimport { ValidateMixin } from './validate-mixin.js';\n\n/**\n * A mixin to provide common field logic: label, error message and helper text.\n *\n * @polymerMixin\n * @mixes ControllerMixin\n * @mixes LabelMixin\n * @mixes ValidateMixin\n */\nexport const FieldMixin = (superclass) =>\n  class FieldMixinClass extends ValidateMixin(LabelMixin(ControllerMixin(superclass))) {\n    static get properties() {\n      return {\n        /**\n         * A target element to which ARIA attributes are set.\n         * @protected\n         */\n        ariaTarget: {\n          type: Object,\n          observer: '_ariaTargetChanged',\n        },\n\n        /**\n         * Error to show when the field is invalid.\n         *\n         * @attr {string} error-message\n         */\n        errorMessage: {\n          type: String,\n          observer: '_errorMessageChanged',\n        },\n\n        /**\n         * String used for the helper text.\n         * @attr {string} helper-text\n         */\n        helperText: {\n          type: String,\n          observer: '_helperTextChanged',\n        },\n      };\n    }\n\n    static get observers() {\n      return ['_invalidChanged(invalid)', '_requiredChanged(required)'];\n    }\n\n    /** @protected */\n    get _errorId() {\n      return this._errorController.errorId;\n    }\n\n    /**\n     * @protected\n     * @return {HTMLElement}\n     */\n    get _errorNode() {\n      return this._errorController.node;\n    }\n\n    /** @protected */\n    get _helperId() {\n      return this._helperController.helperId;\n    }\n\n    /**\n     * @protected\n     * @return {HTMLElement}\n     */\n    get _helperNode() {\n      return this._helperController.node;\n    }\n\n    constructor() {\n      super();\n\n      this._fieldAriaController = new FieldAriaController(this);\n      this._helperController = new HelperController(this);\n      this._errorController = new ErrorController(this);\n\n      this._labelController.addEventListener('label-changed', (event) => {\n        const { hasLabel, node } = event.detail;\n        this.__labelChanged(hasLabel, node);\n      });\n\n      this._helperController.addEventListener('helper-changed', (event) => {\n        const { hasHelper, node } = event.detail;\n        this.__helperChanged(hasHelper, node);\n      });\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.addController(this._fieldAriaController);\n      this.addController(this._helperController);\n      this.addController(this._errorController);\n    }\n\n    /** @private */\n    __helperChanged(hasHelper, helperNode) {\n      if (hasHelper) {\n        this._fieldAriaController.setHelperId(helperNode.id);\n      } else {\n        this._fieldAriaController.setHelperId(null);\n      }\n    }\n\n    /** @private */\n    __labelChanged(hasLabel, labelNode) {\n      // Label ID should be only added when the label content is present.\n      // Otherwise, it may conflict with an `aria-label` attribute possibly added by the user.\n      if (hasLabel) {\n        this._fieldAriaController.setLabelId(labelNode.id);\n      } else {\n        this._fieldAriaController.setLabelId(null);\n      }\n    }\n\n    /**\n     * @param {string | null | undefined} errorMessage\n     * @protected\n     */\n    _errorMessageChanged(errorMessage) {\n      this._errorController.setErrorMessage(errorMessage);\n    }\n\n    /**\n     * @param {string} helperText\n     * @protected\n     */\n    _helperTextChanged(helperText) {\n      this._helperController.setHelperText(helperText);\n    }\n\n    /**\n     * @param {HTMLElement | null | undefined} target\n     * @protected\n     */\n    _ariaTargetChanged(target) {\n      if (target) {\n        this._fieldAriaController.setTarget(target);\n      }\n    }\n\n    /**\n     * @param {boolean} required\n     * @protected\n     */\n    _requiredChanged(required) {\n      this._fieldAriaController.setRequired(required);\n    }\n\n    /**\n     * @param {boolean} invalid\n     * @protected\n     */\n    _invalidChanged(invalid) {\n      this._errorController.setInvalid(invalid);\n\n      // This timeout is needed to prevent NVDA from announcing the error message twice:\n      // 1. Once adding the `[role=alert]` attribute when updating `has-error-message` (OK).\n      // 2. Once linking the error ID with the ARIA target here (unwanted).\n      // Related issue: https://github.com/vaadin/web-components/issues/3061.\n      setTimeout(() => {\n        // Error message ID needs to be dynamically added / removed based on the validity\n        // Otherwise assistive technologies would announce the error, even if we hide it.\n        if (invalid) {\n          this._fieldAriaController.setErrorId(this._errorController.errorId);\n        } else {\n          this._fieldAriaController.setErrorId(null);\n        }\n      });\n    }\n  };\n"],
  "mappings": "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",
  "names": []
}
