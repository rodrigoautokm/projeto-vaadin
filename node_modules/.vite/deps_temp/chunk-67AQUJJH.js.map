{
  "version": 3,
  "sources": ["../../@vaadin/field-base/src/labelled-input-controller.js", "../../@vaadin/field-base/src/input-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A controller for linking a `<label>` element with an `<input>` element.\n */\nexport class LabelledInputController {\n  constructor(input, labelController) {\n    this.input = input;\n    this.__preventDuplicateLabelClick = this.__preventDuplicateLabelClick.bind(this);\n\n    labelController.addEventListener('label-changed', (event) => {\n      this.__initLabel(event.detail.node);\n    });\n\n    // Initialize the default label element\n    this.__initLabel(labelController.node);\n  }\n\n  /**\n   * @param {HTMLElement} label\n   * @private\n   */\n  __initLabel(label) {\n    if (label) {\n      label.addEventListener('click', this.__preventDuplicateLabelClick);\n\n      if (this.input) {\n        label.setAttribute('for', this.input.id);\n      }\n    }\n  }\n\n  /**\n   * The native platform fires an event for both the click on the label, and also\n   * the subsequent click on the native input element caused by label click.\n   * This results in two click events arriving at the host, but we only want one.\n   * This method prevents the duplicate click and ensures the correct isTrusted event\n   * with the correct event.target arrives at the host.\n   * @private\n   */\n  __preventDuplicateLabelClick() {\n    const inputClickHandler = (e) => {\n      e.stopImmediatePropagation();\n      this.input.removeEventListener('click', inputClickHandler);\n    };\n    this.input.addEventListener('click', inputClickHandler);\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin to store the reference to an input element\n * and add input and change event listeners to it.\n *\n * @polymerMixin\n */\nexport const InputMixin = dedupingMixin(\n  (superclass) =>\n    class InputMixinClass extends superclass {\n      static get properties() {\n        return {\n          /**\n           * A reference to the input element controlled by the mixin.\n           * Any component implementing this mixin is expected to provide it\n           * by using `this._setInputElement(input)` Polymer API.\n           *\n           * A typical case is using `InputController` that does this automatically.\n           * However, the input element does not have to always be native <input>:\n           * as an example, <vaadin-combo-box-light> accepts other components.\n           *\n           * @protected\n           * @type {!HTMLElement}\n           */\n          inputElement: {\n            type: Object,\n            readOnly: true,\n            observer: '_inputElementChanged',\n          },\n\n          /**\n           * String used to define input type.\n           * @protected\n           */\n          type: {\n            type: String,\n            readOnly: true,\n          },\n\n          /**\n           * The value of the field.\n           */\n          value: {\n            type: String,\n            value: '',\n            observer: '_valueChanged',\n            notify: true,\n          },\n\n          /**\n           * When true, the input element has a non-empty value entered by the user.\n           * @protected\n           */\n          _hasInputValue: {\n            type: Boolean,\n            value: false,\n            observer: '_hasInputValueChanged',\n          },\n        };\n      }\n\n      constructor() {\n        super();\n\n        this._boundOnInput = this.__onInput.bind(this);\n        this._boundOnChange = this._onChange.bind(this);\n      }\n\n      /**\n       * Clear the value of the field.\n       */\n      clear() {\n        this.value = '';\n      }\n\n      /**\n       * Add event listeners to the input element instance.\n       * Override this method to add custom listeners.\n       * @param {!HTMLElement} input\n       * @protected\n       */\n      _addInputListeners(input) {\n        input.addEventListener('input', this._boundOnInput);\n        input.addEventListener('change', this._boundOnChange);\n      }\n\n      /**\n       * Remove event listeners from the input element instance.\n       * @param {!HTMLElement} input\n       * @protected\n       */\n      _removeInputListeners(input) {\n        input.removeEventListener('input', this._boundOnInput);\n        input.removeEventListener('change', this._boundOnChange);\n      }\n\n      /**\n       * A method to forward the value property set on the field\n       * programmatically back to the input element value.\n       * Override this method to perform additional checks,\n       * for example to skip this in certain conditions.\n       * @param {string} value\n       * @protected\n       */\n      _forwardInputValue(value) {\n        // Value might be set before an input element is initialized.\n        // This case should be handled separately by a component that\n        // implements this mixin, for example in `connectedCallback`.\n        if (!this.inputElement) {\n          return;\n        }\n\n        if (value != null) {\n          this.inputElement.value = value;\n        } else {\n          this.inputElement.value = '';\n        }\n      }\n\n      /**\n       * @param {HTMLElement | undefined} input\n       * @param {HTMLElement | undefined} oldInput\n       * @protected\n       */\n      _inputElementChanged(input, oldInput) {\n        if (input) {\n          this._addInputListeners(input);\n        } else if (oldInput) {\n          this._removeInputListeners(oldInput);\n        }\n      }\n\n      /**\n       * Observer to notify about the change of private property.\n       *\n       * @private\n       */\n      _hasInputValueChanged(hasValue, oldHasValue) {\n        if (hasValue || oldHasValue) {\n          this.dispatchEvent(new CustomEvent('has-input-value-changed'));\n        }\n      }\n\n      /**\n       * An input event listener used to update `_hasInputValue` property.\n       * Do not override this method.\n       *\n       * @param {Event} event\n       * @private\n       */\n      __onInput(event) {\n        // In the case a custom web component is passed as `inputElement`,\n        // the actual native input element, on which the event occurred,\n        // can be inside shadow trees.\n        const target = event.composedPath()[0];\n        this._hasInputValue = target.value.length > 0;\n        this._onInput(event);\n      }\n\n      /**\n       * An input event listener used to update the field value.\n       *\n       * @param {Event} event\n       * @protected\n       */\n      _onInput(event) {\n        // In the case a custom web component is passed as `inputElement`,\n        // the actual native input element, on which the event occurred,\n        // can be inside shadow trees.\n        const target = event.composedPath()[0];\n        // Ignore fake input events e.g. used by clear button.\n        this.__userInput = event.isTrusted;\n        this.value = target.value;\n        this.__userInput = false;\n      }\n\n      /**\n       * A change event listener.\n       * Override this method with an actual implementation.\n       * @param {Event} _event\n       * @protected\n       */\n      _onChange(_event) {}\n\n      /**\n       * Toggle the has-value attribute based on the value property.\n       *\n       * @param {boolean} hasValue\n       * @protected\n       */\n      _toggleHasValue(hasValue) {\n        this.toggleAttribute('has-value', hasValue);\n      }\n\n      /**\n       * Observer called when a value property changes.\n       * @param {string | undefined} newVal\n       * @param {string | undefined} oldVal\n       * @protected\n       */\n      _valueChanged(newVal, oldVal) {\n        this._toggleHasValue(this._hasValue);\n\n        // Setting initial value to empty string, do nothing.\n        if (newVal === '' && oldVal === undefined) {\n          return;\n        }\n\n        // Value is set by the user, no need to sync it back to input.\n        if (this.__userInput) {\n          return;\n        }\n\n        // Setting a value programmatically, sync it to input element.\n        this._forwardInputValue(newVal);\n      }\n\n      /**\n       * Indicates whether the value is different from the default one.\n       * Override if the `value` property has a type other than `string`.\n       *\n       * @protected\n       */\n      get _hasValue() {\n        return this.value != null && this.value !== '';\n      }\n    },\n);\n"],
  "mappings": "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",
  "names": []
}
