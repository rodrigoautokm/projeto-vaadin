{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/path.js", "../../@polymer/polymer/lib/utils/html-tag.js", "../../@polymer/polymer/lib/utils/wrap.js", "../../@polymer/polymer/lib/utils/case-map.js", "../../@polymer/polymer/lib/mixins/properties-changed.js", "../../@polymer/polymer/lib/mixins/property-accessors.js", "../../@polymer/polymer/lib/mixins/template-stamp.js", "../../@polymer/polymer/lib/mixins/property-effects.js", "../../@polymer/polymer/lib/utils/telemetry.js", "../../@polymer/polymer/lib/mixins/properties-mixin.js", "../../@polymer/polymer/lib/mixins/element-mixin.js", "../../@polymer/polymer/polymer-element.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the Polymer html\n * template tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n *\n * @type {!TrustedTypePolicy|undefined}\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('polymer-html-literal', {createHTML: (s) => s});\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  /**\n   * @param {!ITemplateArray} strings Constant parts of tagged template literal\n   * @param {!Array<*>} values Variable parts of tagged template literal\n   */\n  constructor(strings, values) {\n    assertValidTemplateStringParameters(strings, values);\n    const string = values.reduce(\n        (acc, v, idx) => acc + literalValue(v) + strings[idx + 1], strings[0]);\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    // This might be an mXSS risk \u2013 mainly in the case where this template\n    // contains untrusted content that was believed to be sanitized.\n    // However we can't just use the XMLSerializer here because it misencodes\n    // `>` characters inside style tags.\n    // For an example of an actual case that hit this encoding issue,\n    // see b/198592167\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  assertValidTemplateStringParameters(strings, values);\n  const template =\n      /** @type {!HTMLTemplateElement} */ (document.createElement('template'));\n  let value = values.reduce(\n      (acc, v, idx) => acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  if (policy) {\n    value = policy.createHTML(value);\n  }\n  template.innerHTML = value;\n  return template;\n};\n\n/**\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {!Array<*>} values Array of values from quasis\n */\nconst assertValidTemplateStringParameters = (strings, values) => {\n  // Note: if/when https://github.com/tc39/proposal-array-is-template-object\n  // is standardized, use that instead when available, as it can perform an\n  // unforgable check (though of course, the function itself can be forged).\n  if (!Array.isArray(strings) || !Array.isArray(strings.raw) ||\n      (values.length !== strings.length - 1)) {\n    // This is either caused by a browser bug, a compiler bug, or someone\n    // calling the html template tag function as a regular function.\n    //\n    throw new TypeError('Invalid call to the html template tag');\n  }\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(strings, values);\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable valid-jsdoc */\n/**\n * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill\n * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,\n * a node wrapper must be used to access ShadowDOM API.\n * This is similar to using `Polymer.dom` but relies exclusively\n * on the presence of the ShadyDOM polyfill rather than requiring the loading\n * of legacy (Polymer.dom) API.\n * @type {function(Node):Node}\n */\nexport const wrap = (window['ShadyDOM'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['wrap']) ?\n  window['ShadyDOM']['wrap'] :\n  (window['ShadyDOM'] ? (n) => ShadyDOM['patch'](n) : (n) => n);\n\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * @fileoverview Module with utilities for converting between \"dash-case\" and\n * \"camelCase\" identifiers.\n */\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertiesChanged = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     * @nocollapse\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     * @nocollapse\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataHasAccessor', this))) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     * @override\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataAttributes', this))) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      // This check is technically not correct; it's an optimization that\n      // assumes that if a _property_ name is already in the map (note this is\n      // an attr->property map), the property mapped directly to the attribute\n      // and it has already been mapped.  This would fail if\n      // `attributeNameForProperty` were overridden such that this was not the\n      // case.\n      let attr = this.__dataAttributes[property];\n      if (!attr) {\n        attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n      return attr;\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     * @override\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          // Inline for perf instead of using `_getProperty`\n          return this.__data[property];\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          // Inline for perf instead of using `_setProperty`\n          if (this._setPendingProperty(property, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      this.__dataCounter = 0;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     * @override\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     * @override\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     * @override\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * @param {string} property Name of the property\n     * @return {boolean} Returns true if the property is pending.\n     */\n    _isPropertyPending(property) {\n      return !!(this.__dataPending && this.__dataPending.hasOwnProperty(property));\n    }\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n      this.__dataCounter--;\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     * @override\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     * @override\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     * @override\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     * @override\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     * @override\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     * @override\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (attribute === 'class' || attribute === 'name' || attribute === 'slot') {\n        node = /** @type {?Element} */(wrap(node));\n      }\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(\n            attribute,\n            // Closure's type for `setAttribute`'s second parameter incorrectly\n            // excludes `TrustedScript`.\n            (str === '' && window.trustedTypes) ?\n                /** @type {?} */ (window.trustedTypes.emptyScript) :\n                str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     * @override\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\nconst isTrustedType = (() => {\n  if (!window.trustedTypes) {\n    return () => false;\n  }\n  return (val) => trustedTypes.isHTML(val) ||\n        trustedTypes.isScript(val) || trustedTypes.isScriptURL(val);\n})();\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get\n *     observedAttributes()`. Use `dash-case` attribute names to represent\n *     `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to\n *     generate property accessors for each observed attribute. This must be\n *     called before the first instance is created, for example, by calling it\n *     before calling `customElements.define`. It can also be called lazily from\n *     the element's `constructor`, as long as it's guarded so that the call is\n *     only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to\n *     enable the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   * @private\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     * @nocollapse\n     */\n    static createPropertiesForAttributes() {\n      let a$ =  /** @type {?} */ (this).observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     * @nocollapse\n     */\n    static attributeNameForProperty(property) {\n      return camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an\n     *     element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     * @override\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property\n     *     value.\n     * @override\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            if (isTrustedType(value)) {\n              /**\n               * Here `value` isn't actually a string, but it should be\n               * passed into APIs that normally expect a string, like\n               * elem.setAttribute.\n               */\n              return /** @type {?} */ (value);\n            }\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     * @override\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     * @override\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\n\nlet placeholderBugDetect = false;\nlet placeholderBug = false;\n\nfunction hasPlaceholderBug() {\n  if (!placeholderBugDetect) {\n    placeholderBugDetect = true;\n    const t = document.createElement('textarea');\n    t.placeholder = 'a';\n    placeholderBug = t.placeholder === t.textContent;\n  }\n  return placeholderBug;\n}\n\n/**\n * Some browsers have a bug with textarea, where placeholder text is copied as\n * a textnode child of the textarea.\n *\n * If the placeholder is a binding, this can break template stamping in two\n * ways.\n *\n * One issue is that when the `placeholder` attribute is removed when the\n * binding is processed, the textnode child of the textarea is deleted, and the\n * template info tries to bind into that node.\n *\n * With `legacyOptimizations` in use, when the template is stamped and the\n * `textarea.textContent` binding is processed, no corresponding node is found\n * because it was removed during parsing. An exception is generated when this\n * binding is updated.\n *\n * With `legacyOptimizations` not in use, the template is cloned before\n * processing and this changes the above behavior. The cloned template also has\n * a value property set to the placeholder and textContent. This prevents the\n * removal of the textContent when the placeholder attribute is removed.\n * Therefore the exception does not occur. However, there is an extra\n * unnecessary binding.\n *\n * @param {!Node} node Check node for placeholder bug\n * @return {void}\n */\nfunction fixPlaceholder(node) {\n  if (hasPlaceholderBug() && node.localName === 'textarea' && node.placeholder\n        && node.placeholder === node.textContent) {\n    node.textContent = null;\n  }\n}\n\n/**\n * Copies an attribute from one element to another, converting the value to a\n * `TrustedScript` if it is named like a Polymer template event listener.\n *\n * @param {!Element} dest The element to set the attribute on\n * @param {!Element} src The element to read the attribute from\n * @param {string} name The name of the attribute\n */\nconst copyAttributeWithTemplateEventPolicy = (() => {\n  /**\n   * This `TrustedTypePolicy` is used to work around a Chrome bug in the Trusted\n   * Types API where any attribute that starts with `on` may only be set to a\n   * `TrustedScript` value, even if that attribute would not cause an event\n   * listener to be created. (See https://crbug.com/993268 for details.)\n   *\n   * Polymer's template system allows `<dom-if>` and `<dom-repeat>` to be\n   * written using the `<template is=\"...\">` syntax, even if there is no UA\n   * support for custom element extensions of built-in elements. In doing so, it\n   * copies attributes from the original `<template>` to a newly created\n   * `<dom-if>` or `<dom-repeat>`, which can trigger the bug mentioned above if\n   * any of those attributes uses Polymer's `on-` syntax for event listeners.\n   * (Note, the value of these `on-` listeners is not evaluated as script: it is\n   * the name of a member function of a component that will be used as the event\n   * listener.)\n   *\n   * @type {!TrustedTypePolicy|undefined}\n   */\n  const polymerTemplateEventAttributePolicy = window.trustedTypes &&\n      window.trustedTypes.createPolicy(\n          'polymer-template-event-attribute-policy', {\n            createScript: x => x,\n          });\n\n  return (dest, src, name) => {\n    const value = src.getAttribute(name);\n\n    if (polymerTemplateEventAttributePolicy && name.startsWith('on-')) {\n      dest.setAttribute(\n          name, polymerTemplateEventAttributePolicy.createScript(value, name));\n      return;\n    }\n\n    dest.setAttribute(name, value);\n  };\n})();\n\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      const {name} = t.attributes[0];\n      copyAttributeWithTemplateEventPolicy(node, t, name);\n      t.removeAttribute(name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateInfo(inst, node, nodeInfo, parentTemplateInfo) {\n  if (nodeInfo.templateInfo) {\n    // Give the node an instance of this templateInfo and set its parent\n    node._templateInfo = nodeInfo.templateInfo;\n    node._parentTemplateInfo = parentTemplateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n */\nexport const TemplateStamp = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     * @nocollapse\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        // TODO(rictic): fix typing\n        let /** ? */ templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.nestedTemplate = Boolean(outerTemplateInfo);\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          (template.hasAttribute && template.hasAttribute('strip-whitespace'));\n         // TODO(rictic): fix typing\n         this._parseTemplateContent(\n             template, templateInfo, /** @type {?} */ ({parent: null}));\n      }\n      return template._templateInfo;\n    }\n\n    /**\n     * See docs for _parseTemplateNode.\n     *\n     * @param {!HTMLTemplateElement} template .\n     * @param {!TemplateInfo} templateInfo .\n     * @param {!NodeInfo} nodeInfo .\n     * @return {boolean} .\n     * @nocollapse\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = false;\n      let element = /** @type {!HTMLTemplateElement} */ (node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      fixPlaceholder(element);\n      if (element.firstChild) {\n        this._parseTemplateChildNodes(element, templateInfo, nodeInfo);\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      // Checking `nodeInfo.noted` allows a child node of this node (who gets\n      // access to `parentInfo`) to cause the parent to be noted, which\n      // otherwise has no return path via `_parseTemplateChildNodes` (used by\n      // some optimizations)\n      return noted || nodeInfo.noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo =\n            /** @type {!NodeInfo} */ ({parentIndex, parentInfo: nodeInfo});\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(childInfo) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      // TODO(rictic): the type of node should be non-null\n      let element = /** @type {!HTMLTemplateElement} */ (node);\n      let templateInfo = this._parseTemplate(element, outerTemplateInfo);\n      let content = templateInfo.content =\n          element.content.ownerDocument.createDocumentFragment();\n      content.appendChild(element.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current\n     *     template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     * @nocollapse\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @param {TemplateInfo=} templateInfo Optional template info associated\n     *   with the template to be stamped; if omitted the template will be\n     *   automatically parsed.\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     */\n    _stampTemplate(template, templateInfo) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      // Accepting the `templateInfo` via an argument allows for creating\n      // instances of the `templateInfo` by the caller, useful for adding\n      // instance-time information to the prototypical data\n      templateInfo = templateInfo || this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateInfo(this, node, info, templateInfo);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!EventTarget} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     * @override\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     * @override\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n", "/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root, isAncestor, isDescendant, get, translate, isPath, set, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue, legacyUndefined, orderedComputed, removeNestedTemplates, fastDomIf } from '../utils/settings.js';\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\nconst NOOP = [];\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\nconst COMPUTE_INFO = '__computeInfo';\n\n/** @const {!RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @param {boolean=} cloneArrays Clone any arrays assigned to the map when\n *   extending a superclass map onto this subclass\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type, cloneArrays) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    if (cloneArrays) {\n      for (let p in effects) {\n        let protoFx = effects[p];\n        // Perf optimization over Array.slice\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i=0; i<protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {?Object} effects Object map of property-to-Array of effects\n * @param {?Object} props Bag of current property changes\n * @param {?Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    const id = dedupeId++;\n    for (let prop in props) {\n      // Inline `runEffectsForProperty` for perf.\n      let rootProperty = hasPaths ? root(prop) : prop;\n      let fxs = effects[rootProperty];\n      if (fxs) {\n        for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n          if ((!fx.info || fx.info.lastRun !== id) &&\n              (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n            if (fx.info) {\n              fx.info.lastRun = id;\n            }\n            fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n            ran = true;\n          }\n        }\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {!Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {?DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = /** @type {string} */ (trigger.name);\n    return (triggerPath == path) ||\n        !!(trigger.structured && isAncestor(triggerPath, path)) ||\n        !!(trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} eventName The name of the event to send\n *     ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property\n *     changed, the path that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  // As a performance optimization, we could elide the wrap here since notifying\n  // events are non-bubbling and shouldn't need retargeting. However, a very\n  // small number of internal tests failed in obscure ways, which may indicate\n  // user code relied on timing differences resulting from ShadyDOM flushing\n  // as a result of the wrapped `dispatchEvent`.\n  wrap(/** @type {!HTMLElement} */(inst)).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!Polymer_PropertyEffects} inst Host element instance handling the\n *     notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.currentTarget[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {?Object} changedProps Bag of changed properties\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    if (orderedComputed) {\n      // Runs computed effects in efficient order by keeping a topologically-\n      // sorted queue of compute effects to run, and inserting subsequently\n      // invalidated effects as they are run\n      dedupeId++;\n      const order = getComputedOrder(inst);\n      const queue = [];\n      for (let p in changedProps) {\n        enqueueEffectsFor(p, computeEffects, queue, order, hasPaths);\n      }\n      let info;\n      while ((info = queue.shift())) {\n        if (runComputedEffect(inst, '', changedProps, oldProps, info)) {\n          enqueueEffectsFor(info.methodInfo, computeEffects, queue, order, hasPaths);\n        }\n      }\n      Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n      Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n      inst.__dataPending = null;\n    } else {\n      // Original Polymer 2.x computed effects order, which continues running\n      // effects until no further computed properties have been invalidated\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n        Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n}\n\n/**\n * Inserts a computed effect into a queue, given the specified order. Performs\n * the insert using a binary search.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {Object} info Property effects metadata\n * @param {Array<Object>} queue Ordered queue of effects\n * @param {Map<string,number>} order Map of computed property name->topological\n *   sort order\n */\nconst insertEffect = (info, queue, order) => {\n  let start = 0;\n  let end = queue.length - 1;\n  let idx = -1;\n  while (start <= end) {\n    const mid = (start + end) >> 1;\n    // Note `methodInfo` is where the computed property name is stored in\n    // the effect metadata\n    const cmp = order.get(queue[mid].methodInfo) - order.get(info.methodInfo);\n    if (cmp < 0) {\n      start = mid + 1;\n    } else if (cmp > 0) {\n      end = mid - 1;\n    } else {\n      idx = mid;\n      break;\n    }\n  }\n  if (idx < 0) {\n    idx = end + 1;\n  }\n  queue.splice(idx, 0, info);\n};\n\n/**\n * Inserts all downstream computed effects invalidated by the specified property\n * into the topologically-sorted queue of effects to be run.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {string} prop Property name\n * @param {Object} computeEffects Computed effects for this element\n * @param {Array<Object>} queue Topologically-sorted queue of computed effects\n *   to be run\n * @param {Map<string,number>} order Map of computed property name->topological\n *   sort order\n * @param {boolean} hasPaths True with `changedProps` contains one or more paths\n */\nconst enqueueEffectsFor = (prop, computeEffects, queue, order, hasPaths) => {\n  const rootProperty = hasPaths ? root(prop) : prop;\n  const fxs = computeEffects[rootProperty];\n  if (fxs) {\n    for (let i=0; i<fxs.length; i++) {\n      const fx = fxs[i];\n      if ((fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        fx.info.lastRun = dedupeId;\n        insertEffect(fx.info, queue, order);\n      }\n    }\n  }\n};\n\n/**\n * Generates and retrieves a memoized map of computed property name to its\n * topologically-sorted order.\n *\n * The map is generated by first assigning a \"dependency count\" to each property\n * (defined as number properties it depends on, including its method for\n * \"dynamic functions\"). Any properties that have no dependencies are added to\n * the `ready` queue, which are properties whose order can be added to the final\n * order map. Properties are popped off the `ready` queue one by one and a.) added as\n * the next property in the order map, and b.) each property that it is a\n * dependency for has its dep count decremented (and if that property's dep\n * count goes to zero, it is added to the `ready` queue), until all properties\n * have been visited and ordered.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {!Polymer_PropertyEffects} inst The instance to retrieve the computed\n *   effect order for.\n * @return {Map<string,number>} Map of computed property name->topological sort\n *   order\n */\nfunction getComputedOrder(inst) {\n  let ordered = inst.constructor.__orderedComputedDeps;\n  if (!ordered) {\n    ordered = new Map();\n    const effects = inst[TYPES.COMPUTE];\n    let {counts, ready, total} = dependencyCounts(inst);\n    let curr;\n    while ((curr = ready.shift())) {\n      ordered.set(curr, ordered.size);\n      const computedByCurr = effects[curr];\n      if (computedByCurr) {\n        computedByCurr.forEach(fx => {\n          // Note `methodInfo` is where the computed property name is stored\n          const computedProp = fx.info.methodInfo;\n          --total;\n          if (--counts[computedProp] === 0) {\n            ready.push(computedProp);\n          }\n        });\n      }\n    }\n    if (total !== 0) {\n      const el = /** @type {HTMLElement} */ (inst);\n      console.warn(`Computed graph for ${el.localName} incomplete; circular?`);\n    }\n    inst.constructor.__orderedComputedDeps = ordered;\n  }\n  return ordered;\n}\n\n/**\n * Generates a map of property-to-dependency count (`counts`, where \"dependency\n * count\" is the number of dependencies a given property has assuming it is a\n * computed property, otherwise 0).  It also returns a pre-populated list of\n * `ready` properties that have no dependencies and a `total` count, which is\n * used for error-checking the graph.\n *\n * Used by `orderedComputed: true` computed property algorithm.\n *\n * @param {!Polymer_PropertyEffects} inst The instance to generate dependency\n *   counts for.\n * @return {!Object} Object containing `counts` map (property-to-dependency\n *   count) and pre-populated `ready` array of properties that had zero\n *   dependencies.\n */\nfunction dependencyCounts(inst) {\n  const infoForComputed = inst[COMPUTE_INFO];\n  const counts = {};\n  const computedDeps = inst[TYPES.COMPUTE];\n  const ready = [];\n  let total = 0;\n  // Count dependencies for each computed property\n  for (let p in infoForComputed) {\n    const info = infoForComputed[p];\n    // Be sure to add the method name itself in case of \"dynamic functions\"\n    total += counts[p] =\n      info.args.filter(a => !a.literal).length + (info.dynamicFn ? 1 : 0);\n  }\n  // Build list of ready properties (that aren't themselves computed)\n  for (let p in computedDeps) {\n    if (!infoForComputed[p]) {\n      ready.push(p);\n    }\n  }\n  return {counts, ready, total};\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {?Object} changedProps Bag of current property changes\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {boolean} True when the property being computed changed\n * @private\n */\nfunction runComputedEffect(inst, property, changedProps, oldProps, info) {\n  // Dirty check dependencies and run if any invalid\n  let result = runMethodEffect(inst, property, changedProps, oldProps, info);\n  // Abort if method returns a no-op result\n  if (result === NOOP) {\n    return false;\n  }\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    return inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n    return false;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!Polymer_PropertyEffects} inst The instance whose props are changing\n * @param {string} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    // Abort if value is a no-op result\n    if (value !== NOOP) {\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else {\n      // In legacy no-batching mode, bindings applied before dataReady are\n      // equivalent to the \"apply config\" phase, which only set managed props\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!Polymer_PropertyEffects} inst Instance that bas been previously\n *     bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      // This ensures all bound elements have a host set, regardless\n      // of whether they upgrade synchronous to creation\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      // Note, className needs style scoping so this needs wrapping.\n      // We may also want to consider doing this for `textContent` and\n      // `innerHTML`.\n      if (target === 'className') {\n        node = wrap(node);\n      }\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!Polymer_PropertyEffects} inst Host element instance to handle\n *     notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {!Object} Effect metadata for this method effect\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n  return info;\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = inst._marshalArgs(info.args, property, props);\n    return args === NOOP ? NOOP : fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root(arg);\n    // detect structured path (has dots)\n    a.structured = isPath(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\nfunction getArgValue(data, props, path) {\n  let value = get(data, path);\n  // when data is not stored e.g. `splices`, get the value from changedProps\n  // TODO(kschaaf): Note, this can cause a rare issue where the wildcard\n  // info.value could pull a stale value out of changedProps during a reentrant\n  // change that sets the value back to undefined.\n  // https://github.com/Polymer/polymer/issues/5479\n  if (value === undefined) {\n    value = props[path];\n  }\n  return value;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  const splicesData = { indexSplices: splices };\n  // Legacy behavior stored splices in `__data__` so it was *not* ephemeral.\n  // To match this behavior, we store splices directly on the array.\n  if (legacyUndefined && !inst._overrideLegacyUndefined) {\n    array.splices = splicesData;\n  }\n  inst.notifyPath(path + '.splices', splicesData);\n  inst.notifyPath(path + '.length', array.length);\n  // Clear splice data only when it's stored on the array.\n  if (legacyUndefined && !inst._overrideLegacyUndefined) {\n    splicesData.indexSplices = [];\n  }\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   * @private\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object|null} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__computeInfo;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n      /** @type {boolean} */\n      this._overrideLegacyUndefined;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @override\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      this._registerHost();\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    _registerHost() {\n      if (hostStack.length) {\n        let host = hostStack[hostStack.length-1];\n        host._enqueueClient(this);\n        // This ensures even non-bound elements have a host set, as\n        // long as they upgrade synchronously\n        this.__dataHost = host;\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type, true)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @override\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type, true)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to\n     * attribute\" property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @override\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get(this, path);\n          path = /** @type {string} */ (set(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, /**@type{string}*/ (path), value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @override\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        // Note, className needs style scoping so this needs wrapping.\n        if (prop === 'className') {\n          node = /** @type {!Node} */(wrap(node));\n        }\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let propIsPath = this.__dataHasPaths && isPath(property);\n      let prevProps = propIsPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (propIsPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (propIsPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @override\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @override\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      let notifyProps;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @override\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      if (this.__templateInfo) {\n        this._runEffectsForTemplate(this.__templateInfo, changedProps, oldProps, hasPaths);\n      }\n    }\n\n    _runEffectsForTemplate(templateInfo, changedProps, oldProps, hasPaths) {\n      const baseRunEffects = (changedProps, hasPaths) => {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        for (let info=templateInfo.firstChild; info; info=info.nextSibling) {\n          this._runEffectsForTemplate(info, changedProps, oldProps, hasPaths);\n        }\n      };\n      if (templateInfo.runEffects) {\n        templateInfo.runEffects(baseRunEffects, changedProps, hasPaths);\n      } else {\n        baseRunEffects(changedProps, hasPaths);\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @override\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n     *         object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1,\n     *         object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     *\n     * @override\n     * @return {void}\n     * @public\n     */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n     */\n    set(path, value, root) {\n      if (root) {\n        set(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number=} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {!Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @override\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n     */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method\n     *     to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      const info = createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      // Effects are normally stored as map of dependency->effect, but for\n      // ordered computation, we also need tree of computedProp->dependencies\n      ensureOwnEffectMap(this, COMPUTE_INFO)[property] = info;\n    }\n\n    /**\n     * Gather the argument values for a method specified in the provided array\n     * of argument metadata.\n     *\n     * The `path` and `value` arguments are used to fill in wildcard descriptor\n     * when the method is being called as a result of a path notification.\n     *\n     * @param {!Array<!MethodArg>} args Array of argument metadata\n     * @param {string} path Property/path name that triggered the method effect\n     * @param {Object} props Bag of current property changes\n     * @return {!Array<*>} Array of argument values\n     * @private\n     */\n    _marshalArgs(args, path, props) {\n      const data = this.__data;\n      const values = [];\n      for (let i=0, l=args.length; i<l; i++) {\n        let {name, structured, wildcard, value, literal} = args[i];\n        if (!literal) {\n          if (wildcard) {\n            const matches = isDescendant(name, path);\n            const pathValue = getArgValue(data, props, matches ? path : name);\n            value = {\n              path: matches ? path : name,\n              value: pathValue,\n              base: matches ? get(data, name) : pathValue\n            };\n          } else {\n            value = structured ? getArgValue(data, props, name) : data[name];\n          }\n        }\n        // When the `legacyUndefined` flag is enabled, pass a no-op value\n        // so that the observer, computed property, or compound binding is aborted.\n        if (legacyUndefined && !this._overrideLegacyUndefined && value === undefined && args.length > 1) {\n          return NOOP;\n        }\n        values[i] = value;\n      }\n      return values;\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     * @nocollapse\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     * @nocollapse\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /*\n     * Overview of binding flow:\n     *\n     * During finalization (`instanceBinding==false`, `wasPreBound==false`):\n     *  `_bindTemplate(t, false)` called directly during finalization - parses\n     *  the template (for the first time), and then assigns that _prototypical_\n     *  template info to `__preboundTemplateInfo` _on the prototype_; note in\n     *  this case `wasPreBound` is false; this is the first time we're binding\n     *  it, thus we create accessors.\n     *\n     * During first stamping (`instanceBinding==true`, `wasPreBound==true`):\n     *   `_stampTemplate` calls `_bindTemplate(t, true)`: the `templateInfo`\n     *   returned matches the prebound one, and so this is `wasPreBound == true`\n     *   state; thus we _skip_ creating accessors, but _do_ create an instance\n     *   of the template info to serve as the start of our linked list (needs to\n     *   be an instance, not the prototypical one, so that we can add `nodeList`\n     *   to it to contain the `nodeInfo`-ordered list of instance nodes for\n     *   bindings, and so we can chain runtime-stamped template infos off of\n     *   it). At this point, the call to `_stampTemplate` calls\n     *   `applyTemplateInfo` for each nested `<template>` found during parsing\n     *   to hand prototypical `_templateInfo` to them; we also pass the _parent_\n     *   `templateInfo` to the `<template>` so that we have the instance-time\n     *   parent to link the `templateInfo` under in the case it was\n     *   runtime-stamped.\n     *\n     * During subsequent runtime stamping (`instanceBinding==true`,\n     *   `wasPreBound==false`): `_stampTemplate` calls `_bindTemplate(t, true)`\n     *   - here `templateInfo` is guaranteed to _not_ match the prebound one,\n     *   because it was either a different template altogether, or even if it\n     *   was the same template, the step above created a instance of the info;\n     *   in this case `wasPreBound == false`, so we _do_ create accessors, _and_\n     *   link a instance into the linked list.\n     */\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on an instance\n     * to add effects at runtime.  See that method for full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @override\n     * @param {!HTMLTemplateElement} template Template containing binding\n     * bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     * \"prototypical\" binding of the template and overwrites any previously\n     * bound template for the class. When true (as passed from\n     * `_stampTemplate`), the template info is instanced and linked into the\n     * list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     * this is an instance of the prototypical template info\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__preBoundTemplateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into tree of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!this.__templateInfo) {\n          // Set the info to the root of the tree\n          this.__templateInfo = templateInfo;\n        } else {\n          // Append this template info onto the end of its parent template's\n          // list, which will determine the tree structure via which property\n          // effects are run; if this template was not nested in another\n          // template, use the root template (the first stamped one) as the\n          // parent. Note, `parent` is the `templateInfo` instance for this\n          // template's parent (containing) template, which was set up in\n          // `applyTemplateInfo`.  While a given template's `parent` is set\n          // apriori, it is only added to the parent's child list at the point\n          // that it is being bound, since a template may or may not ever be\n          // stamped, and may be stamped more than once (in which case instances\n          // of the template info will be in the tree under its parent more than\n          // once).\n          const parent = template._parentTemplateInfo || this.__templateInfo;\n          const previous = parent.lastChild;\n          templateInfo.parent = parent;\n          parent.lastChild = templateInfo;\n          templateInfo.previousSibling = previous;\n          if (previous) {\n            previous.nextSibling = templateInfo;\n          } else {\n            parent.firstChild = templateInfo;\n          }\n        }\n      } else {\n        this.__preBoundTemplateInfo = templateInfo;\n      }\n      return templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @param {TemplateInfo=} templateInfo Optional bound template info associated\n     *   with the template to be stamped; if omitted the template will be\n     *   automatically bound.\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template, templateInfo) {\n      templateInfo =  templateInfo || /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.push(this);\n      let dom = super._stampTemplate(template, templateInfo);\n      hostStack.pop();\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes; the check on `__dataClientsReady`\n      // ensures we don't needlessly run effects for an element's initial\n      // prototypical template stamping since they will happen as a part of the\n      // first call to `_propertiesChanged`. This flag is set to true\n      // after running the initial propagate effects, and immediately before\n      // flushing clients. Since downstream clients could cause stamping on\n      // this host (e.g. a fastDomIf `dom-if` being forced to render\n      // synchronously), this flag ensures effects for runtime-stamped templates\n      // are run at this point during the initial element boot-up.\n      if (this.__dataClientsReady) {\n        this._runEffectsForTemplate(templateInfo, this.__data, null, false);\n        this._flushClients();\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @override\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info; Note that while the child is unlinked from its\n      // parent list, a template's `parent` reference is never removed, since\n      // this is is determined by the tree structure and applied at\n      // `applyTemplateInfo` time.\n      const templateInfo = dom.templateInfo;\n      const {previousSibling, nextSibling, parent} = templateInfo;\n      if (previousSibling) {\n        previousSibling.nextSibling = nextSibling;\n      } else if (parent) {\n        parent.firstChild = nextSibling;\n      }\n      if (nextSibling) {\n        nextSibling.previousSibling = previousSibling;\n      } else if (parent) {\n        parent.lastChild = previousSibling;\n      }\n      templateInfo.nextSibling = templateInfo.previousSibling = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        wrap(wrap(node).parentNode).removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNode.call(\n        this, node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          // Ensure a ShadyCSS template scoped style is not removed\n          // when a class$ binding's initial literal value is set.\n          if (name == 'class' && node.hasAttribute('class')) {\n            literal += ' ' + node.getAttribute(name);\n          }\n          node.setAttribute(name, literal);\n        }\n        // support disable-upgrade\n        if (kind == 'attribute' && origName == 'disable-upgrade$') {\n          node.setAttribute(name, '');\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        // TODO(https://github.com/google/closure-compiler/issues/3240):\n        //     Change back to just super.methodCall()\n        return propertyEffectsBase._parseTemplateNodeAttribute.call(\n          this, node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNestedTemplate.call(\n        this, node, templateInfo, nodeInfo);\n      const parent = node.parentNode;\n      const nestedTemplateInfo = nodeInfo.templateInfo;\n      const isDomIf = parent.localName === 'dom-if';\n      const isDomRepeat = parent.localName === 'dom-repeat';\n      // Remove nested template and redirect its host bindings & templateInfo\n      // onto the parent (dom-if/repeat element)'s nodeInfo\n      if (removeNestedTemplates && (isDomIf || isDomRepeat)) {\n        parent.removeChild(node);\n        // Use the parent's nodeInfo (for the dom-if/repeat) to record the\n        // templateInfo, and use that for any host property bindings below\n        nodeInfo = nodeInfo.parentInfo;\n        nodeInfo.templateInfo = nestedTemplateInfo;\n        // Ensure the parent dom-if/repeat is noted since it now may have host\n        // bindings; it may not have been if it did not have its own bindings\n        nodeInfo.noted = true;\n        noted = false;\n      }\n      // Merge host props into outer template and add bindings\n      let hostProps = nestedTemplateInfo.hostProps;\n      if (fastDomIf && isDomIf) {\n        // `fastDomIf` mode uses runtime-template stamping to add accessors/\n        // effects to properties used in its template; as such we don't need to\n        // tax the host element with `_host_` bindings for the `dom-if`.\n        // However, in the event it is nested in a `dom-repeat`, it is still\n        // important that its host properties are added to the\n        // TemplateInstance's `hostProps` so that they are forwarded to the\n        // TemplateInstance.\n        if (hostProps) {\n          templateInfo.hostProps =\n            Object.assign(templateInfo.hostProps || {}, hostProps);\n          // Ensure the dom-if is noted so that it has a __dataHost, since\n          // `fastDomIf` uses the host for runtime template stamping; note this\n          // was already ensured above in the `removeNestedTemplates` case\n          if (!removeNestedTemplates) {\n            nodeInfo.parentInfo.noted = true;\n          }\n        }\n      } else {\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{ mode, source, dependencies: [source], hostProp: true }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     * @nocollapse\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {!Polymer_PropertyEffects} inst Element that should be used as\n     *     scope for binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     * @nocollapse\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get(inst, part.source);\n      } else {\n        if (hasPaths && isPath(path)) {\n          value = get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  return PropertyEffects;\n});\n\n/**\n * Stack for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nconst hostStack = [];\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\nexport function incrementInstanceCount() {\n  instanceCount++;\n}\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {!Array<!PolymerElementConstructor>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + /** @type {?} */(prototype).is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {!PolymerElementConstructor} prototype Element prototype to register\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { register, incrementInstanceCount } from '../utils/telemetry.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {!Object} props Properties to normalize\n * @return {!Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @implements {Polymer_PropertiesChanged}\n  * @private\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {?PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {\n       const properties = constructor.properties;\n\n       if (properties) {\n        props = normalizeProperties(properties);\n       }\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    * @nocollapse\n    */\n   static get observedAttributes() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n       register(this.prototype);\n       const props = this._properties;\n       this.__observedAttributes = props ? Object.keys(props).map(p => this.prototype._addPropertyToAttributeMap(p)) : [];\n     }\n     return this.__observedAttributes;\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    * @nocollapse\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    * @nocollapse\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));\n     if (props) {\n       /** @type {?} */ (this).createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    * @nocollapse\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    * @nocollapse\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     incrementInstanceCount();\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n", "/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport '../utils/boot.js';\n\nimport { rootPath, strictTemplatePolicy, allowTemplateFromDomModule, legacyOptimizations, legacyWarnings, syncInitialRender, supportsAdoptingStyleSheets, useAdoptedStyleSheetsWithBuiltCSS } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\nimport { wrap } from '../utils/wrap.js';\n\n/**\n * Current Polymer version in Semver notation.\n * @type {string} Semver notation of the current version of Polymer.\n */\nexport const version = '3.5.1';\n\nexport const builtCSS = window.ShadyCSS && window.ShadyCSS['cssBuild'];\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter must return an `HTMLTemplateElement`.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const ElementMixin = dedupingMixin(base => {\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n      constructor.__ownObservers =\n          constructor.hasOwnProperty(\n              JSCompiler_renameProperty('observers', constructor)) ?\n          /** @type {PolymerElementConstructor} */ (constructor).observers :\n          null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * is also automatically set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed) {\n      if (proto._hasReadOnlyEffect(name)) {\n        console.warn(`Cannot redefine computed property '${name}'.`);\n      } else {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    } else if (info.readOnly === false && proto._hasReadOnlyEffect(name)) {\n      console.warn(`Cannot make readOnly property '${name}' non-readOnly.`);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    } else if (info.reflectToAttribute === false && proto._hasReflectEffect(name)) {\n      console.warn(`Cannot make reflected property '${name}' non-reflected.`);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    } else if (info.notify === false && proto._hasNotifyEffect(name)) {\n      console.warn(`Cannot make notify property '${name}' non-notify.`);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    if (!builtCSS) {\n      const templateStyles = template.content.querySelectorAll('style');\n      const stylesWithImports = stylesFromTemplate(template);\n      // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n      const linkedStyles = stylesFromModuleImports(is);\n      const firstTemplateChild = template.content.firstElementChild;\n      for (let idx = 0; idx < linkedStyles.length; idx++) {\n        let s = linkedStyles[idx];\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n        template.content.insertBefore(s, firstTemplateChild);\n      }\n      // keep track of the last \"concrete\" style in the template we have encountered\n      let templateStyleIndex = 0;\n      // ensure all gathered styles are actually in this template.\n      for (let i = 0; i < stylesWithImports.length; i++) {\n        let s = stylesWithImports[i];\n        let templateStyle = templateStyles[templateStyleIndex];\n        // if the style is not in this template, it's been \"included\" and\n        // we put a clone of it in the template before the style that included it\n        if (templateStyle !== s) {\n          s = s.cloneNode(true);\n          templateStyle.parentNode.insertBefore(s, templateStyle);\n        } else {\n          templateStyleIndex++;\n        }\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n      }\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n    // Support for `adoptedStylesheets` relies on using native Shadow DOM\n    // and built CSS. Built CSS is required because runtime transformation of\n    // `@apply` is not supported. This is because ShadyCSS relies on being able\n    // to update a `style` element in the element template and this is\n    // removed when using `adoptedStyleSheets`.\n    // Note, it would be more efficient to allow style includes to become\n    // separate stylesheets; however, because of `@apply` these are\n    // potentially not shareable and sharing the ones that could be shared\n    // would require some coordination. To keep it simple, all the includes\n    // and styles are collapsed into a single shareable stylesheet.\n    if (useAdoptedStyleSheetsWithBuiltCSS && builtCSS &&\n        supportsAdoptingStyleSheets) {\n      // Remove styles in template and make a shareable stylesheet\n      const styles = template.content.querySelectorAll('style');\n      if (styles) {\n        let css = '';\n        Array.from(styles).forEach(s => {\n          css += s.textContent;\n          s.parentNode.removeChild(s);\n        });\n        klass._styleSheet = new CSSStyleSheet();\n        klass._styleSheet.replaceSync(css);\n      }\n    }\n  }\n\n  /**\n   * Look up template from dom-module for element\n   *\n   * @param {string} is Element name to look up\n   * @return {?HTMLTemplateElement|undefined} Template found in dom module, or\n   *   undefined if not found\n   * @protected\n   */\n  function getTemplateFromDomModule(is) {\n    let template = null;\n    // Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed\n    // when opted-in via allowTemplateFromDomModule\n    if (is && (!strictTemplatePolicy || allowTemplateFromDomModule)) {\n      template = /** @type {?HTMLTemplateElement} */ (\n          DomModule.import(is, 'template'));\n      // Under strictTemplatePolicy, require any element with an `is`\n      // specified to have a dom-module\n      if (strictTemplatePolicy && !template) {\n        throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${is}`);\n      }\n    }\n    return template;\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   * @extends {polymerElementBase}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Current Polymer version in Semver notation.\n     * @type {string} Semver notation of the current version of Polymer.\n     * @nocollapse\n     */\n    static get polymerElementVersion() {\n      return version;\n    }\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _finalizeClass() {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      polymerElementBase._finalizeClass.call(this);\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      this._prepareTemplate();\n    }\n\n    /** @nocollapse */\n    static _prepareTemplate() {\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else if (!legacyOptimizations) {\n          template = template.cloneNode(true);\n        }\n      }\n\n      /** @override */\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @param {!Object} props .\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(\n            /** @type {?} */ (this.prototype), p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation will\n     * return the first `<template>` in a `dom-module` whose `id` matches this\n     * element's `is` (note that a `_template` property on the class prototype\n     * takes precedence over the `dom-module` template, to maintain legacy\n     * element semantics; a subclass will subsequently fall back to its super\n     * class template if neither a `prototype._template` or a `dom-module` for\n     * the class's `is` was found).\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * must be an `HTMLTemplateElement`.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {!HTMLTemplateElement|string} Template to be stamped\n     * @nocollapse\n     */\n    static get template() {\n      // Explanation of template-related properties:\n      // - constructor.template (this getter): the template for the class.\n      //     This can come from the prototype (for legacy elements), from a\n      //     dom-module, or from the super class's template (or can be overridden\n      //     altogether by the user)\n      // - constructor._template: memoized version of constructor.template\n      // - prototype._template: working template for the element, which will be\n      //     parsed and modified in place. It is a cloned version of\n      //     constructor.template, saved in _finalizeClass(). Note that before\n      //     this getter is called, for legacy elements this could be from a\n      //     _template field on the info object passed to Polymer(), a behavior,\n      //     or set in registered(); once the static getter runs, a clone of it\n      //     will overwrite it on the prototype as the working template.\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        let protoTemplate = this.prototype.hasOwnProperty(\n          JSCompiler_renameProperty('_template', this.prototype)) ?\n          this.prototype._template : undefined;\n        // Accept a function for the legacy Polymer({_template:...}) field for\n        // lazy parsing\n        if (typeof protoTemplate === 'function') {\n          protoTemplate = protoTemplate();\n        }\n        this._template =\n          // If user has put template on prototype (e.g. in legacy via registered\n          // callback or info object), prefer that first. Note that `null` is\n          // used as a sentinel to indicate \"no template\" and can be used to\n          // override a super template, whereas `undefined` is used as a\n          // sentinel to mean \"fall-back to default template lookup\" via\n          // dom-module and/or super.template.\n          protoTemplate !== undefined ? protoTemplate :\n          // Look in dom-module associated with this element's is\n          ((this.hasOwnProperty(JSCompiler_renameProperty('is', this)) &&\n          (getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/ (this).is))) ||\n          // Next look for superclass template (call the super impl this\n          // way so that `this` points to the superclass)\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template);\n      }\n      return this._template;\n    }\n\n    /**\n     * Set the template.\n     *\n     * @param {!HTMLTemplateElement|string} value Template to set.\n     * @nocollapse\n     */\n    static set template(value) {\n      this._template = value;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     * @nocollapse\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts,missingProperties} go/missingfnprops\n     */\n    _initializeProperties() {\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        if (this._canApplyPropertyDefault(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Determines if a property dfeault can be applied. For example, this\n     * prevents a default from being applied when a property that has no\n     * accessor is overridden by its host before upgrade (e.g. via a binding).\n     * @override\n     * @param {string} property Name of the property\n     * @return {boolean} Returns true if the property default can be applied.\n     */\n    _canApplyPropertyDefault(property) {\n      return !this.hasOwnProperty(property);\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     * @nocollapse\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    * @nocollapse\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @override\n     * @suppress {missingProperties, invalidCasts} Super may or may not\n     *     implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @override\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      const n = wrap(this);\n      if (n.attachShadow) {\n        if (dom) {\n          if (!n.shadowRoot) {\n            n.attachShadow({mode: 'open', shadyUpgradeFragment: dom});\n            n.shadowRoot.appendChild(dom);\n            // When `adoptedStyleSheets` is supported a stylesheet is made\n            // available on the element constructor.\n            if (this.constructor._styleSheet) {\n              n.shadowRoot.adoptedStyleSheets = [this.constructor._styleSheet];\n            }\n          }\n          if (syncInitialRender && window.ShadyDOM) {\n            window.ShadyDOM.flushInitial(n.shadowRoot);\n          }\n          return n.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @override\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @override\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl(this.importPath);\n      }\n      return resolveUrl(url, base);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @param {!HTMLTemplateElement} template Template\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      return polymerElementBase._parseTemplateContent.call(\n        this, template, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to warn on use of undeclared properties in\n     * template.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      // Warn if properties are used in template without being declared.\n      // Properties must be listed in `properties` to be included in\n      // `observedAttributes` since CE V1 reads that at registration time, and\n      // since we want to keep template parsing lazy, we can't automatically\n      // add undeclared properties used in templates to `observedAttributes`.\n      // The warning is only enabled in `legacyOptimizations` mode, since\n      // we don't want to spam existing users who might have adopted the\n      // shorthand when attribute deserialization is not important.\n      if (legacyWarnings && !(prop in this._properties) &&\n          // Methods used in templates with no dependencies (or only literal\n          // dependencies) become accessors with template effects; ignore these\n          !(effect.info.part.signature && effect.info.part.signature.static) &&\n          // Warnings for bindings added to nested templates are handled by\n          // templatizer so ignore both the host-to-template bindings\n          // (`hostProp`) and TemplateInstance-to-child bindings\n          // (`nestedTemplate`)\n          !effect.info.part.hostProp && !templateInfo.nestedTemplate) {\n        console.warn(`Property '${prop}' used in template but not declared in 'properties'; ` +\n          `attribute will not be observed.`);\n      }\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      return polymerElementBase._addTemplatePropertyEffect.call(\n        this, templateInfo, prop, effect);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin, version } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\nexport { version };\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n"],
  "mappings": "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",
  "names": ["root", "html", "PropertiesChanged", "proto", "PropertyAccessors", "root", "TemplateStamp", "dedupeId", "i", "PropertyEffects", "changedProps", "hasPaths", "root", "matches", "PropertiesMixin", "proto", "PolymerElement", "base"]
}
