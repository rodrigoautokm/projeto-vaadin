{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-column.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2016 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { animationFrame } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\n\n/**\n * @polymerMixin\n */\nexport const ColumnBaseMixin = (superClass) =>\n  class ColumnBaseMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * When set to true, the column is user-resizable.\n         * @default false\n         */\n        resizable: {\n          type: Boolean,\n          value() {\n            if (this.localName === 'vaadin-grid-column-group') {\n              return;\n            }\n\n            const parent = this.parentNode;\n            if (parent && parent.localName === 'vaadin-grid-column-group') {\n              return parent.resizable || false;\n            }\n            return false;\n          },\n        },\n\n        /**\n         * When true, the column is frozen. When a column inside of a column group is frozen,\n         * all of the sibling columns inside the group will get frozen also.\n         * @type {boolean}\n         */\n        frozen: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When true, the column is frozen to end of grid.\n         *\n         * When a column inside of a column group is frozen to end, all of the sibling columns\n         * inside the group will get frozen to end also.\n         *\n         * Column can not be set as `frozen` and `frozenToEnd` at the same time.\n         * @attr {boolean} frozen-to-end\n         * @type {boolean}\n         */\n        frozenToEnd: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When set to true, the cells for this column are hidden.\n         */\n        hidden: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Text content to display in the header cell of the column.\n         */\n        header: {\n          type: String,\n        },\n\n        /**\n         * Aligns the columns cell content horizontally.\n         * Supported values: \"start\", \"center\" and \"end\".\n         * @attr {start|center|end} text-align\n         * @type {GridColumnTextAlign | null | undefined}\n         */\n        textAlign: {\n          type: String,\n        },\n\n        /**\n         * @type {boolean}\n         * @protected\n         */\n        _lastFrozen: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * @type {boolean}\n         * @protected\n         */\n        _firstFrozenToEnd: {\n          type: Boolean,\n          value: false,\n        },\n\n        /** @protected */\n        _order: Number,\n\n        /** @private */\n        _reorderStatus: Boolean,\n\n        /**\n         * @type {Array<!HTMLElement>}\n         * @protected\n         */\n        _emptyCells: Array,\n\n        /** @private */\n        _headerCell: Object,\n\n        /** @private */\n        _footerCell: Object,\n\n        /** @protected */\n        _grid: Object,\n\n        /**\n         * By default, the Polymer doesn't invoke the observer\n         * during initialization if all of its dependencies are `undefined`.\n         * This internal property can be used to force initial invocation of an observer\n         * even the other dependencies of the observer are `undefined`.\n         *\n         * @private\n         */\n        __initialized: {\n          type: Boolean,\n          value: true,\n        },\n\n        /**\n         * Custom function for rendering the header content.\n         * Receives two arguments:\n         *\n         * - `root` The header cell content DOM element. Append your content to it.\n         * - `column` The `<vaadin-grid-column>` element.\n         *\n         * @type {GridHeaderFooterRenderer | null | undefined}\n         */\n        headerRenderer: Function,\n\n        /**\n         * Represents the final header renderer computed on the set of observable arguments.\n         * It is supposed to be used internally when rendering the header cell content.\n         *\n         * @protected\n         * @type {GridHeaderFooterRenderer | undefined}\n         */\n        _headerRenderer: {\n          type: Function,\n          computed: '_computeHeaderRenderer(headerRenderer, header, __initialized)',\n        },\n\n        /**\n         * Custom function for rendering the footer content.\n         * Receives two arguments:\n         *\n         * - `root` The footer cell content DOM element. Append your content to it.\n         * - `column` The `<vaadin-grid-column>` element.\n         *\n         * @type {GridHeaderFooterRenderer | null | undefined}\n         */\n        footerRenderer: Function,\n\n        /**\n         * Represents the final footer renderer computed on the set of observable arguments.\n         * It is supposed to be used internally when rendering the footer cell content.\n         *\n         * @protected\n         * @type {GridHeaderFooterRenderer | undefined}\n         */\n        _footerRenderer: {\n          type: Function,\n          computed: '_computeFooterRenderer(footerRenderer, __initialized)',\n        },\n\n        /**\n         * An internal property that is mainly used by `vaadin-template-renderer`\n         * to identify grid column elements.\n         *\n         * @private\n         */\n        __gridColumnElement: {\n          type: Boolean,\n          value: true,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '_widthChanged(width, _headerCell, _footerCell, _cells.*)',\n        '_frozenChanged(frozen, _headerCell, _footerCell, _cells.*)',\n        '_frozenToEndChanged(frozenToEnd, _headerCell, _footerCell, _cells.*)',\n        '_flexGrowChanged(flexGrow, _headerCell, _footerCell, _cells.*)',\n        '_textAlignChanged(textAlign, _cells.*, _headerCell, _footerCell)',\n        '_orderChanged(_order, _headerCell, _footerCell, _cells.*)',\n        '_lastFrozenChanged(_lastFrozen)',\n        '_firstFrozenToEndChanged(_firstFrozenToEnd)',\n        '_onRendererOrBindingChanged(_renderer, _cells, _cells.*, path)',\n        '_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header)',\n        '_onFooterRendererOrBindingChanged(_footerRenderer, _footerCell)',\n        '_resizableChanged(resizable, _headerCell)',\n        '_reorderStatusChanged(_reorderStatus, _headerCell, _footerCell, _cells.*)',\n        '_hiddenChanged(hidden, _headerCell, _footerCell, _cells.*)',\n      ];\n    }\n\n    /** @protected */\n    connectedCallback() {\n      super.connectedCallback();\n\n      // Adds the column cells to the grid after the column is attached\n      requestAnimationFrame(() => {\n        // Skip if the column has been detached\n        if (!this._grid) {\n          return;\n        }\n\n        this._allCells.forEach((cell) => {\n          if (!cell._content.parentNode) {\n            this._grid.appendChild(cell._content);\n          }\n        });\n      });\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // Removes the column cells from the grid after the column is detached\n      requestAnimationFrame(() => {\n        // Skip if the column has been attached again\n        if (this._grid) {\n          return;\n        }\n\n        this._allCells.forEach((cell) => {\n          if (cell._content.parentNode) {\n            cell._content.parentNode.removeChild(cell._content);\n          }\n        });\n      });\n\n      this._gridValue = undefined;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      processTemplates(this);\n    }\n\n    /**\n     * @return {!Grid | undefined}\n     * @protected\n     */\n    _findHostGrid() {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n      let el = this;\n      // Custom elements extending grid must have a specific localName\n      while (el && !/^vaadin.*grid(-pro)?$/.test(el.localName)) {\n        el = el.assignedSlot ? el.assignedSlot.parentNode : el.parentNode;\n      }\n      return el || undefined;\n    }\n\n    /**\n     * @return {!Grid | undefined}\n     * @protected\n     */\n    get _grid() {\n      if (!this._gridValue) {\n        this._gridValue = this._findHostGrid();\n      }\n      return this._gridValue;\n    }\n\n    /**\n     * @return {!Array<!HTMLElement>}\n     * @protected\n     */\n    get _allCells() {\n      return []\n        .concat(this._cells || [])\n        .concat(this._emptyCells || [])\n        .concat(this._headerCell)\n        .concat(this._footerCell)\n        .filter((cell) => cell);\n    }\n\n    /** @protected */\n    _renderHeaderAndFooter() {\n      this._renderHeaderCellContent(this._headerRenderer, this._headerCell);\n      this._renderFooterCellContent(this._footerRenderer, this._footerCell);\n    }\n\n    /** @private */\n    _flexGrowChanged(flexGrow) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('flexGrow');\n      }\n\n      this._allCells.forEach((cell) => {\n        cell.style.flexGrow = flexGrow;\n      });\n    }\n\n    /** @private */\n    _orderChanged(order) {\n      this._allCells.forEach((cell) => {\n        cell.style.order = order;\n      });\n    }\n\n    /** @private */\n    _widthChanged(width) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('width');\n      }\n\n      this._allCells.forEach((cell) => {\n        cell.style.width = width;\n      });\n    }\n\n    /** @private */\n    _frozenChanged(frozen) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('frozen', frozen);\n      }\n\n      this._allCells.forEach((cell) => cell.toggleAttribute('frozen', frozen));\n\n      if (this._grid && this._grid._frozenCellsChanged) {\n        this._grid._frozenCellsChanged();\n      }\n    }\n\n    /** @private */\n    _frozenToEndChanged(frozenToEnd) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('frozenToEnd', frozenToEnd);\n      }\n\n      this._allCells.forEach((cell) => {\n        // Skip sizer cells to keep correct scrollWidth.\n        if (this._grid && cell.parentElement === this._grid.$.sizer) {\n          return;\n        }\n        cell.toggleAttribute('frozen-to-end', frozenToEnd);\n      });\n\n      if (this._grid && this._grid._frozenCellsChanged) {\n        this._grid._frozenCellsChanged();\n      }\n    }\n\n    /** @private */\n    _lastFrozenChanged(lastFrozen) {\n      this._allCells.forEach((cell) => cell.toggleAttribute('last-frozen', lastFrozen));\n\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._lastFrozen = lastFrozen;\n      }\n    }\n\n    /** @private */\n    _firstFrozenToEndChanged(firstFrozenToEnd) {\n      this._allCells.forEach((cell) => {\n        // Skip sizer cells to keep correct scrollWidth.\n        if (this._grid && cell.parentElement === this._grid.$.sizer) {\n          return;\n        }\n\n        cell.toggleAttribute('first-frozen-to-end', firstFrozenToEnd);\n      });\n\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._firstFrozenToEnd = firstFrozenToEnd;\n      }\n    }\n\n    /**\n     * @param {string} path\n     * @return {string}\n     * @protected\n     */\n    _generateHeader(path) {\n      return path\n        .substr(path.lastIndexOf('.') + 1)\n        .replace(/([A-Z])/g, '-$1')\n        .toLowerCase()\n        .replace(/-/g, ' ')\n        .replace(/^./, (match) => match.toUpperCase());\n    }\n\n    /** @private */\n    _reorderStatusChanged(reorderStatus) {\n      this._allCells.forEach((cell) => cell.setAttribute('reorder-status', reorderStatus));\n    }\n\n    /** @private */\n    _resizableChanged(resizable, headerCell) {\n      if (resizable === undefined || headerCell === undefined) {\n        return;\n      }\n\n      if (headerCell) {\n        [headerCell].concat(this._emptyCells).forEach((cell) => {\n          if (cell) {\n            const existingHandle = cell.querySelector('[part~=\"resize-handle\"]');\n            if (existingHandle) {\n              cell.removeChild(existingHandle);\n            }\n\n            if (resizable) {\n              const handle = document.createElement('div');\n              handle.setAttribute('part', 'resize-handle');\n              cell.appendChild(handle);\n            }\n          }\n        });\n      }\n    }\n\n    /** @private */\n    _textAlignChanged(textAlign) {\n      if (textAlign === undefined) {\n        return;\n      }\n      if (['start', 'end', 'center'].indexOf(textAlign) === -1) {\n        console.warn('textAlign can only be set as \"start\", \"end\" or \"center\"');\n        return;\n      }\n\n      let textAlignFallback;\n      if (getComputedStyle(this._grid).direction === 'ltr') {\n        if (textAlign === 'start') {\n          textAlignFallback = 'left';\n        } else if (textAlign === 'end') {\n          textAlignFallback = 'right';\n        }\n      } else if (textAlign === 'start') {\n        textAlignFallback = 'right';\n      } else if (textAlign === 'end') {\n        textAlignFallback = 'left';\n      }\n\n      this._allCells.forEach((cell) => {\n        cell._content.style.textAlign = textAlign;\n        if (getComputedStyle(cell._content).textAlign !== textAlign) {\n          cell._content.style.textAlign = textAlignFallback;\n        }\n      });\n    }\n\n    /** @private */\n    _hiddenChanged(hidden) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('hidden', hidden);\n      }\n\n      if (!!hidden !== !!this._previousHidden && this._grid) {\n        if (hidden === true) {\n          this._allCells.forEach((cell) => {\n            if (cell._content.parentNode) {\n              cell._content.parentNode.removeChild(cell._content);\n            }\n          });\n        }\n        this._grid._debouncerHiddenChanged = Debouncer.debounce(\n          this._grid._debouncerHiddenChanged,\n          animationFrame,\n          () => {\n            if (this._grid && this._grid._renderColumnTree) {\n              this._grid._renderColumnTree(this._grid._columnTree);\n            }\n          },\n        );\n\n        if (this._grid._updateFrozenColumn) {\n          this._grid._updateFrozenColumn();\n        }\n\n        if (this._grid._resetKeyboardNavigation) {\n          this._grid._resetKeyboardNavigation();\n        }\n      }\n      this._previousHidden = hidden;\n    }\n\n    /** @protected */\n    _runRenderer(renderer, cell, model) {\n      const args = [cell._content, this];\n      if (model && model.item) {\n        args.push(model);\n      }\n\n      renderer.apply(this, args);\n    }\n\n    /**\n     * Renders the content to the given cells using a renderer.\n     *\n     * @private\n     */\n    __renderCellsContent(renderer, cells) {\n      // Skip if the column is hidden or not attached to a grid.\n      if (this.hidden || !this._grid) {\n        return;\n      }\n\n      cells.forEach((cell) => {\n        if (!cell.parentElement) {\n          return;\n        }\n\n        const model = this._grid.__getRowModel(cell.parentElement);\n\n        if (!renderer) {\n          return;\n        }\n\n        if (cell._renderer !== renderer) {\n          this._clearCellContent(cell);\n        }\n\n        cell._renderer = renderer;\n\n        if (model.item || renderer === this._headerRenderer || renderer === this._footerRenderer) {\n          this._runRenderer(renderer, cell, model);\n        }\n      });\n    }\n\n    /**\n     * Clears the content of a cell.\n     *\n     * @protected\n     */\n    _clearCellContent(cell) {\n      cell._content.innerHTML = '';\n      // Whenever a Lit-based renderer is used, it assigns a Lit part to the node it was rendered into.\n      // When clearing the rendered content, this part needs to be manually disposed of.\n      // Otherwise, using a Lit-based renderer on the same node will throw an exception or render nothing afterward.\n      delete cell._content._$litPart$;\n    }\n\n    /**\n     * Renders the header cell content using a renderer,\n     * and then updates the visibility of the parent row depending on\n     * whether all its children cells are empty or not.\n     *\n     * @protected\n     */\n    _renderHeaderCellContent(headerRenderer, headerCell) {\n      if (!headerCell || !headerRenderer) {\n        return;\n      }\n\n      this.__renderCellsContent(headerRenderer, [headerCell]);\n      if (this._grid) {\n        this._grid.__updateHeaderFooterRowVisibility(headerCell.parentElement);\n      }\n    }\n\n    /** @protected */\n    _onHeaderRendererOrBindingChanged(headerRenderer, headerCell, ..._bindings) {\n      this._renderHeaderCellContent(headerRenderer, headerCell);\n    }\n\n    /**\n     * Renders the content of body cells using a renderer.\n     *\n     * @protected\n     */\n    _renderBodyCellsContent(renderer, cells) {\n      if (!cells || !renderer) {\n        return;\n      }\n\n      this.__renderCellsContent(renderer, cells);\n    }\n\n    /** @protected */\n    _onRendererOrBindingChanged(renderer, cells, ..._bindings) {\n      this._renderBodyCellsContent(renderer, cells);\n    }\n\n    /**\n     * Renders the footer cell content using a renderer\n     * and then updates the visibility of the parent row depending on\n     * whether all its children cells are empty or not.\n     *\n     * @protected\n     */\n    _renderFooterCellContent(footerRenderer, footerCell) {\n      if (!footerCell || !footerRenderer) {\n        return;\n      }\n\n      this.__renderCellsContent(footerRenderer, [footerCell]);\n      if (this._grid) {\n        this._grid.__updateHeaderFooterRowVisibility(footerCell.parentElement);\n      }\n    }\n\n    /** @protected */\n    _onFooterRendererOrBindingChanged(footerRenderer, footerCell) {\n      this._renderFooterCellContent(footerRenderer, footerCell);\n    }\n\n    /** @private */\n    __setTextContent(node, textContent) {\n      if (node.textContent !== textContent) {\n        node.textContent = textContent;\n      }\n    }\n\n    /**\n     * Renders the text header to the header cell.\n     *\n     * @private\n     */\n    __textHeaderRenderer() {\n      this.__setTextContent(this._headerCell._content, this.header);\n    }\n\n    /**\n     * Computes the property name based on the path and renders it to the header cell.\n     * If the path is not defined, then nothing is rendered.\n     *\n     * @protected\n     */\n    _defaultHeaderRenderer() {\n      if (!this.path) {\n        return;\n      }\n\n      this.__setTextContent(this._headerCell._content, this._generateHeader(this.path));\n    }\n\n    /**\n     * Computes the item property value based on the path and renders it to the body cell.\n     * If the path is not defined, then nothing is rendered.\n     *\n     * @protected\n     */\n    _defaultRenderer(root, _owner, { item }) {\n      if (!this.path) {\n        return;\n      }\n\n      this.__setTextContent(root, this.get(this.path, item));\n    }\n\n    /**\n     * By default, nothing is rendered to the footer cell.\n     *\n     * @protected\n     */\n    _defaultFooterRenderer() {}\n\n    /**\n     * Computes the final header renderer for the `_headerRenderer` computed property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridHeaderFooterRenderer | undefined}\n     */\n    _computeHeaderRenderer(headerRenderer, header) {\n      if (headerRenderer) {\n        return headerRenderer;\n      }\n\n      if (header !== undefined && header !== null) {\n        return this.__textHeaderRenderer;\n      }\n\n      return this._defaultHeaderRenderer;\n    }\n\n    /**\n     * Computes the final renderer for the `_renderer` property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridBodyRenderer | undefined}\n     */\n    _computeRenderer(renderer) {\n      if (renderer) {\n        return renderer;\n      }\n\n      return this._defaultRenderer;\n    }\n\n    /**\n     * Computes the final footer renderer for the `_footerRenderer` property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridHeaderFooterRenderer | undefined}\n     */\n    _computeFooterRenderer(footerRenderer) {\n      if (footerRenderer) {\n        return footerRenderer;\n      }\n\n      return this._defaultFooterRenderer;\n    }\n  };\n\n/**\n * A `<vaadin-grid-column>` is used to configure how a column in `<vaadin-grid>`\n * should look like.\n *\n * See [`<vaadin-grid>`](#/elements/vaadin-grid) documentation for instructions on how\n * to configure the `<vaadin-grid-column>`.\n *\n * @extends HTMLElement\n * @mixes ColumnBaseMixin\n */\nclass GridColumn extends ColumnBaseMixin(DirMixin(PolymerElement)) {\n  static get is() {\n    return 'vaadin-grid-column';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Width of the cells for this column.\n       */\n      width: {\n        type: String,\n        value: '100px',\n      },\n\n      /**\n       * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.\n       * @attr {number} flex-grow\n       * @type {number}\n       */\n      flexGrow: {\n        type: Number,\n        value: 1,\n      },\n\n      /**\n       * Custom function for rendering the cell content.\n       * Receives three arguments:\n       *\n       * - `root` The cell content DOM element. Append your content to it.\n       * - `column` The `<vaadin-grid-column>` element.\n       * - `model` The object with the properties related with\n       *   the rendered item, contains:\n       *   - `model.index` The index of the item.\n       *   - `model.item` The item.\n       *   - `model.expanded` Sublevel toggle state.\n       *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n       *   - `model.selected` Selected state.\n       *   - `model.detailsOpened` Details opened state.\n       *\n       * @type {GridBodyRenderer | null | undefined}\n       */\n      renderer: Function,\n\n      /**\n       * Represents the final renderer computed on the set of observable arguments.\n       * It is supposed to be used internally when rendering the content of a body cell.\n       *\n       * @protected\n       * @type {GridBodyRenderer | undefined}\n       */\n      _renderer: {\n        type: Function,\n        computed: '_computeRenderer(renderer, __initialized)',\n      },\n\n      /**\n       * Path to an item sub-property whose value gets displayed in the column body cells.\n       * The property name is also shown in the column header if an explicit header or renderer isn't defined.\n       */\n      path: {\n        type: String,\n      },\n\n      /**\n       * Automatically sets the width of the column based on the column contents when this is set to `true`.\n       *\n       * For performance reasons the column width is calculated automatically only once when the grid items\n       * are rendered for the first time and the calculation only considers the rows which are currently\n       * rendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\n       * content changes, the column width might not match the contents anymore.\n       *\n       * Hidden columns are ignored in the calculation and their widths are not automatically updated when\n       * you show a column that was initially hidden.\n       *\n       * You can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n       *\n       * The column width may still grow larger when `flexGrow` is not 0.\n       * @attr {boolean} auto-width\n       * @type {boolean}\n       */\n      autoWidth: {\n        type: Boolean,\n        value: false,\n      },\n\n      /**\n       * @type {Array<!HTMLElement>}\n       * @protected\n       */\n      _cells: Array,\n    };\n  }\n}\n\ncustomElements.define(GridColumn.is, GridColumn);\n\nexport { GridColumn };\n"],
  "mappings": "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",
  "names": []
}
