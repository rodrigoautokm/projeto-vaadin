import {
  LabelMixin,
  SlotController
} from "./chunk-5765XJOL.js";
import {
  addValueToAttribute,
  removeValueFromAttribute
} from "./chunk-2FVEPLVQ.js";
import {
  ControllerMixin
} from "./chunk-SG4ORNH2.js";
import {
  registerStyles
} from "./chunk-SPVNJBW3.js";
import {
  css
} from "./chunk-BVJZYYEF.js";
import {
  dedupingMixin
} from "./chunk-NCN7ELFS.js";

// node_modules/@vaadin/vaadin-lumo-styles/mixins/helper.js
var helper = css`
  :host([has-helper]) [part='helper-text']::before {
    content: '';
    display: block;
    height: 0.4em;
  }

  [part='helper-text'] {
    display: block;
    color: var(--lumo-secondary-text-color);
    font-size: var(--lumo-font-size-xs);
    line-height: var(--lumo-line-height-xs);
    margin-left: calc(var(--lumo-border-radius-m) / 4);
    transition: color 0.2s;
  }

  :host(:hover:not([readonly])) [part='helper-text'] {
    color: var(--lumo-body-text-color);
  }

  :host([disabled]) [part='helper-text'] {
    color: var(--lumo-disabled-text-color);
    -webkit-text-fill-color: var(--lumo-disabled-text-color);
  }

  :host([has-helper][theme~='helper-above-field']) [part='helper-text']::before {
    display: none;
  }

  :host([has-helper][theme~='helper-above-field']) [part='helper-text']::after {
    content: '';
    display: block;
    height: 0.4em;
  }

  :host([has-helper][theme~='helper-above-field']) [part='label'] {
    order: 0;
    padding-bottom: 0.4em;
  }

  :host([has-helper][theme~='helper-above-field']) [part='helper-text'] {
    order: 1;
  }

  :host([has-helper][theme~='helper-above-field']) [part='label'] + * {
    order: 2;
  }

  :host([has-helper][theme~='helper-above-field']) [part='error-message'] {
    order: 3;
  }
`;

// node_modules/@vaadin/vaadin-lumo-styles/mixins/required-field.js
var requiredField = css`
  [part='label'] {
    align-self: flex-start;
    color: var(--lumo-secondary-text-color);
    font-weight: 500;
    font-size: var(--lumo-font-size-s);
    margin-left: calc(var(--lumo-border-radius-m) / 4);
    transition: color 0.2s;
    line-height: 1;
    padding-right: 1em;
    padding-bottom: 0.5em;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    position: relative;
    max-width: 100%;
    box-sizing: border-box;
  }

  :host([has-label])::before {
    margin-top: calc(var(--lumo-font-size-s) * 1.5);
  }

  :host([has-label][theme~='small'])::before {
    margin-top: calc(var(--lumo-font-size-xs) * 1.5);
  }

  :host([has-label]) {
    padding-top: var(--lumo-space-m);
  }

  :host([required]) [part='required-indicator']::after {
    content: var(--lumo-required-field-indicator, 'â€¢');
    transition: opacity 0.2s;
    color: var(--lumo-required-field-indicator-color, var(--lumo-primary-text-color));
    position: absolute;
    right: 0;
    width: 1em;
    text-align: center;
  }

  :host([invalid]) [part='required-indicator']::after {
    color: var(--lumo-required-field-indicator-color, var(--lumo-error-text-color));
  }

  [part='error-message'] {
    margin-left: calc(var(--lumo-border-radius-m) / 4);
    font-size: var(--lumo-font-size-xs);
    line-height: var(--lumo-line-height-xs);
    color: var(--lumo-error-text-color);
    will-change: max-height;
    transition: 0.4s max-height;
    max-height: 5em;
  }

  :host([has-error-message]) [part='error-message']::before,
  :host([has-error-message]) [part='error-message']::after {
    content: '';
    display: block;
    height: 0.4em;
  }

  :host(:not([invalid])) [part='error-message'] {
    max-height: 0;
    overflow: hidden;
  }

  /* RTL specific styles */

  :host([dir='rtl']) [part='label'] {
    margin-left: 0;
    margin-right: calc(var(--lumo-border-radius-m) / 4);
  }

  :host([dir='rtl']) [part='label'] {
    padding-left: 1em;
    padding-right: 0;
  }

  :host([dir='rtl']) [part='required-indicator']::after {
    right: auto;
    left: 0;
  }

  :host([dir='rtl']) [part='error-message'] {
    margin-left: 0;
    margin-right: calc(var(--lumo-border-radius-m) / 4);
  }
`;
registerStyles("", requiredField, { moduleId: "lumo-required-field" });

// node_modules/@vaadin/field-base/src/error-controller.js
var ErrorController = class extends SlotController {
  constructor(host) {
    super(
      host,
      "error-message",
      () => document.createElement("div"),
      (_host, node) => {
        this.__updateErrorId(node);
        this.__updateHasError();
      },
      true
    );
  }
  get errorId() {
    return this.node && this.node.id;
  }
  setErrorMessage(errorMessage) {
    this.errorMessage = errorMessage;
    this.__updateHasError();
  }
  setInvalid(invalid) {
    this.invalid = invalid;
    this.__updateHasError();
  }
  initCustomNode(errorNode) {
    this.__updateErrorId(errorNode);
    if (errorNode.textContent && !this.errorMessage) {
      this.errorMessage = errorNode.textContent.trim();
    }
    this.__updateHasError();
  }
  teardownNode(node) {
    let errorNode = this.getSlotChild();
    if (!errorNode && node !== this.defaultNode) {
      errorNode = this.attachDefaultNode();
      this.initNode(errorNode);
    }
    this.__updateHasError();
  }
  __isNotEmpty(error) {
    return Boolean(error && error.trim() !== "");
  }
  __updateHasError() {
    const errorNode = this.node;
    const hasError = Boolean(this.invalid && this.__isNotEmpty(this.errorMessage));
    if (errorNode) {
      errorNode.textContent = hasError ? this.errorMessage : "";
      errorNode.hidden = !hasError;
      if (hasError) {
        errorNode.setAttribute("role", "alert");
      } else {
        errorNode.removeAttribute("role");
      }
    }
    this.host.toggleAttribute("has-error-message", hasError);
  }
  __updateErrorId(errorNode) {
    if (!errorNode.id) {
      errorNode.id = this.defaultId;
    }
  }
};

// node_modules/@vaadin/field-base/src/field-aria-controller.js
var FieldAriaController = class {
  constructor(host) {
    this.host = host;
    this.__required = false;
  }
  setTarget(target) {
    this.__target = target;
    this.__setAriaRequiredAttribute(this.__required);
    this.__setLabelIdToAriaAttribute(this.__labelId);
    this.__setErrorIdToAriaAttribute(this.__errorId);
    this.__setHelperIdToAriaAttribute(this.__helperId);
  }
  setRequired(required) {
    this.__setAriaRequiredAttribute(required);
    this.__required = required;
  }
  setLabelId(labelId) {
    this.__setLabelIdToAriaAttribute(labelId, this.__labelId);
    this.__labelId = labelId;
  }
  setErrorId(errorId) {
    this.__setErrorIdToAriaAttribute(errorId, this.__errorId);
    this.__errorId = errorId;
  }
  setHelperId(helperId) {
    this.__setHelperIdToAriaAttribute(helperId, this.__helperId);
    this.__helperId = helperId;
  }
  get __isGroupField() {
    return this.__target === this.host;
  }
  __setLabelIdToAriaAttribute(labelId, oldLabelId) {
    this.__setAriaAttributeId("aria-labelledby", labelId, oldLabelId);
  }
  __setErrorIdToAriaAttribute(errorId, oldErrorId) {
    if (this.__isGroupField) {
      this.__setAriaAttributeId("aria-labelledby", errorId, oldErrorId);
    } else {
      this.__setAriaAttributeId("aria-describedby", errorId, oldErrorId);
    }
  }
  __setHelperIdToAriaAttribute(helperId, oldHelperId) {
    if (this.__isGroupField) {
      this.__setAriaAttributeId("aria-labelledby", helperId, oldHelperId);
    } else {
      this.__setAriaAttributeId("aria-describedby", helperId, oldHelperId);
    }
  }
  __setAriaRequiredAttribute(required) {
    if (!this.__target) {
      return;
    }
    if (["input", "textarea"].includes(this.__target.localName)) {
      return;
    }
    if (required) {
      this.__target.setAttribute("aria-required", "true");
    } else {
      this.__target.removeAttribute("aria-required");
    }
  }
  __setAriaAttributeId(attr, newId, oldId) {
    if (!this.__target) {
      return;
    }
    if (oldId) {
      removeValueFromAttribute(this.__target, attr, oldId);
    }
    if (newId) {
      addValueToAttribute(this.__target, attr, newId);
    }
  }
};

// node_modules/@vaadin/field-base/src/helper-controller.js
var HelperController = class extends SlotController {
  constructor(host) {
    super(host, "helper", null, null, true);
  }
  get helperId() {
    return this.node && this.node.id;
  }
  initCustomNode(helperNode) {
    this.__updateHelperId(helperNode);
    this.__observeHelper(helperNode);
    const hasHelper = this.__hasHelper(helperNode);
    this.__toggleHasHelper(hasHelper);
  }
  teardownNode(_node) {
    if (this.__helperIdObserver) {
      this.__helperIdObserver.disconnect();
    }
    const helperNode = this.getSlotChild();
    if (helperNode && helperNode !== this.defaultNode) {
      const hasHelper = this.__hasHelper(helperNode);
      this.__toggleHasHelper(hasHelper);
    } else {
      this.__applyDefaultHelper(this.helperText, helperNode);
    }
  }
  setHelperText(helperText) {
    this.helperText = helperText;
    const helperNode = this.getSlotChild();
    if (!helperNode || helperNode === this.defaultNode) {
      this.__applyDefaultHelper(helperText, helperNode);
    }
  }
  __hasHelper(helperNode) {
    if (!helperNode) {
      return false;
    }
    return helperNode.children.length > 0 || helperNode.nodeType === Node.ELEMENT_NODE && customElements.get(helperNode.localName) || this.__isNotEmpty(helperNode.textContent);
  }
  __isNotEmpty(helperText) {
    return helperText && helperText.trim() !== "";
  }
  __applyDefaultHelper(helperText, helperNode) {
    const hasHelperText = this.__isNotEmpty(helperText);
    if (hasHelperText && !helperNode) {
      this.slotFactory = () => document.createElement("div");
      helperNode = this.attachDefaultNode();
      this.__updateHelperId(helperNode);
      this.__observeHelper(helperNode);
    }
    if (helperNode) {
      helperNode.textContent = helperText;
    }
    this.__toggleHasHelper(hasHelperText);
  }
  __observeHelper(helperNode) {
    this.__helperObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        const target = mutation.target;
        const isHelperMutation = target === this.node;
        if (mutation.type === "attributes") {
          if (isHelperMutation && target.id !== this.defaultId) {
            this.__updateHelperId(target);
          }
        } else if (isHelperMutation || target.parentElement === this.node) {
          const hasHelper = this.__hasHelper(this.node);
          this.__toggleHasHelper(hasHelper);
        }
      });
    });
    this.__helperObserver.observe(helperNode, {
      attributes: true,
      attributeFilter: ["id"],
      childList: true,
      subtree: true,
      characterData: true
    });
  }
  __toggleHasHelper(hasHelper) {
    this.host.toggleAttribute("has-helper", hasHelper);
    this.dispatchEvent(
      new CustomEvent("helper-changed", {
        detail: {
          hasHelper,
          node: this.node
        }
      })
    );
  }
  __updateHelperId(helperNode) {
    if (!helperNode.id) {
      helperNode.id = this.defaultId;
    }
  }
};

// node_modules/@vaadin/field-base/src/validate-mixin.js
var ValidateMixin = dedupingMixin(
  (superclass) => class ValidateMixinClass extends superclass {
    static get properties() {
      return {
        invalid: {
          type: Boolean,
          reflectToAttribute: true,
          notify: true,
          value: false
        },
        required: {
          type: Boolean,
          reflectToAttribute: true
        }
      };
    }
    validate() {
      const isValid = this.checkValidity();
      this._setInvalid(!isValid);
      this.dispatchEvent(new CustomEvent("validated", { detail: { valid: isValid } }));
      return isValid;
    }
    checkValidity() {
      return !this.required || !!this.value;
    }
    _setInvalid(invalid) {
      if (this._shouldSetInvalid(invalid)) {
        this.invalid = invalid;
      }
    }
    _shouldSetInvalid(_invalid) {
      return true;
    }
  }
);

// node_modules/@vaadin/field-base/src/field-mixin.js
var FieldMixin = (superclass) => class FieldMixinClass extends ValidateMixin(LabelMixin(ControllerMixin(superclass))) {
  static get properties() {
    return {
      ariaTarget: {
        type: Object,
        observer: "_ariaTargetChanged"
      },
      errorMessage: {
        type: String,
        observer: "_errorMessageChanged"
      },
      helperText: {
        type: String,
        observer: "_helperTextChanged"
      }
    };
  }
  static get observers() {
    return ["_invalidChanged(invalid)", "_requiredChanged(required)"];
  }
  get _errorId() {
    return this._errorController.errorId;
  }
  get _errorNode() {
    return this._errorController.node;
  }
  get _helperId() {
    return this._helperController.helperId;
  }
  get _helperNode() {
    return this._helperController.node;
  }
  constructor() {
    super();
    this._fieldAriaController = new FieldAriaController(this);
    this._helperController = new HelperController(this);
    this._errorController = new ErrorController(this);
    this._labelController.addEventListener("label-changed", (event) => {
      const { hasLabel, node } = event.detail;
      this.__labelChanged(hasLabel, node);
    });
    this._helperController.addEventListener("helper-changed", (event) => {
      const { hasHelper, node } = event.detail;
      this.__helperChanged(hasHelper, node);
    });
  }
  ready() {
    super.ready();
    this.addController(this._fieldAriaController);
    this.addController(this._helperController);
    this.addController(this._errorController);
  }
  __helperChanged(hasHelper, helperNode) {
    if (hasHelper) {
      this._fieldAriaController.setHelperId(helperNode.id);
    } else {
      this._fieldAriaController.setHelperId(null);
    }
  }
  __labelChanged(hasLabel, labelNode) {
    if (hasLabel) {
      this._fieldAriaController.setLabelId(labelNode.id);
    } else {
      this._fieldAriaController.setLabelId(null);
    }
  }
  _errorMessageChanged(errorMessage) {
    this._errorController.setErrorMessage(errorMessage);
  }
  _helperTextChanged(helperText) {
    this._helperController.setHelperText(helperText);
  }
  _ariaTargetChanged(target) {
    if (target) {
      this._fieldAriaController.setTarget(target);
    }
  }
  _requiredChanged(required) {
    this._fieldAriaController.setRequired(required);
  }
  _invalidChanged(invalid) {
    this._errorController.setInvalid(invalid);
    setTimeout(() => {
      if (invalid) {
        this._fieldAriaController.setErrorId(this._errorController.errorId);
      } else {
        this._fieldAriaController.setErrorId(null);
      }
    });
  }
};

export {
  helper,
  requiredField,
  ValidateMixin,
  FieldMixin
};
/**
 * @license
 * Copyright (c) 2017 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-FXYB4AC6.js.map
