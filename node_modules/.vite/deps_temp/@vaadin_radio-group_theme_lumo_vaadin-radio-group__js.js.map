{
  "version": 3,
  "sources": ["../../@vaadin/radio-group/theme/lumo/vaadin-radio-group-styles.js", "../../@vaadin/radio-group/src/vaadin-radio-group.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { helper } from '@vaadin/vaadin-lumo-styles/mixins/helper.js';\nimport { requiredField } from '@vaadin/vaadin-lumo-styles/mixins/required-field.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst radioGroup = css`\n  :host {\n    color: var(--lumo-body-text-color);\n    font-size: var(--lumo-font-size-m);\n    font-family: var(--lumo-font-family);\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-tap-highlight-color: transparent;\n    padding: var(--lumo-space-xs) 0;\n  }\n\n  :host::before {\n    /* Effective height of vaadin-radio-button */\n    height: var(--lumo-size-s);\n    box-sizing: border-box;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  :host([theme~='vertical']) [part='group-field'] {\n    display: flex;\n    flex-direction: column;\n  }\n\n  :host([focused]:not([readonly])) [part='label'] {\n    color: var(--lumo-primary-text-color);\n  }\n\n  :host(:hover:not([readonly]):not([focused])) [part='label'],\n  :host(:hover:not([readonly])) [part='helper-text'] {\n    color: var(--lumo-body-text-color);\n  }\n\n  /* Touch device adjustment */\n  @media (pointer: coarse) {\n    :host(:hover:not([readonly]):not([focused])) [part='label'] {\n      color: var(--lumo-secondary-text-color);\n    }\n  }\n`;\n\nregisterStyles('vaadin-radio-group', [requiredField, helper, radioGroup], { moduleId: 'lumo-radio-group' });\n", "/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { DisabledMixin } from '@vaadin/component-base/src/disabled-mixin.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { FocusMixin } from '@vaadin/component-base/src/focus-mixin.js';\nimport { KeyboardMixin } from '@vaadin/component-base/src/keyboard-mixin.js';\nimport { generateUniqueId } from '@vaadin/component-base/src/unique-id-utils.js';\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { RadioButton } from './vaadin-radio-button.js';\n\n/**\n * `<vaadin-radio-group>` is a web component that allows the user to choose one item from a group of choices.\n *\n * ```html\n * <vaadin-radio-group label=\"Travel class\">\n *   <vaadin-radio-button value=\"economy\" label=\"Economy\"></vaadin-radio-button>\n *   <vaadin-radio-button value=\"business\" label=\"Business\"></vaadin-radio-button>\n *   <vaadin-radio-button value=\"firstClass\" label=\"First Class\"></vaadin-radio-button>\n * </vaadin-radio-group>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name            | Description\n * ---------------------|----------------\n * `label`              | The slotted label element wrapper\n * `group-field`        | The radio button elements wrapper\n * `helper-text`        | The slotted helper text element wrapper\n * `error-message`      | The slotted error message element wrapper\n * `required-indicator` | The `required` state indicator element\n *\n * The following state attributes are available for styling:\n *\n * Attribute           | Description                               | Part name\n * --------------------|-------------------------------------------|------------\n * `disabled`          | Set when the element is disabled          | :host\n * `readonly`          | Set when the element is readonly          | :host\n * `invalid`           | Set when the element is invalid           | :host\n * `focused`           | Set when the element is focused           | :host\n * `has-label`         | Set when the element has a label          | :host\n * `has-value`         | Set when the element has a value          | :host\n * `has-helper`        | Set when the element has helper text      | :host\n * `has-error-message` | Set when the element has an error message | :host\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes ThemableMixin\n * @mixes DisabledMixin\n * @mixes ElementMixin\n * @mixes FocusMixin\n * @mixes FieldMixin\n * @mixes KeyboardMixin\n */\nclass RadioGroup extends FieldMixin(\n  FocusMixin(DisabledMixin(KeyboardMixin(ElementMixin(ThemableMixin(PolymerElement))))),\n) {\n  static get is() {\n    return 'vaadin-radio-group';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n        }\n\n        :host::before {\n          content: '\\\\2003';\n          width: 0;\n          display: inline-block;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        .vaadin-group-field-container {\n          display: flex;\n          flex-direction: column;\n          width: 100%;\n        }\n\n        :host(:not([has-label])) [part='label'] {\n          display: none;\n        }\n      </style>\n      <div class=\"vaadin-group-field-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\n        </div>\n\n        <div part=\"group-field\">\n          <slot></slot>\n        </div>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The value of the radio group.\n       *\n       * @type {string}\n       */\n      value: {\n        type: String,\n        notify: true,\n        value: '',\n        observer: '__valueChanged',\n      },\n\n      /**\n       * When present, the user cannot modify the value of the radio group.\n       * The property works similarly to the `disabled` property.\n       * While the `disabled` property disables all radio buttons inside the group,\n       * the `readonly` property disables only unchecked ones.\n       *\n       * @type {boolean}\n       */\n      readonly: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        observer: '__readonlyChanged',\n      },\n\n      /**\n       * @type {string}\n       * @private\n       */\n      _fieldName: {\n        type: String,\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.__registerRadioButton = this.__registerRadioButton.bind(this);\n    this.__unregisterRadioButton = this.__unregisterRadioButton.bind(this);\n    this.__onRadioButtonCheckedChange = this.__onRadioButtonCheckedChange.bind(this);\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.ariaTarget = this;\n\n    // See https://github.com/vaadin/vaadin-web-components/issues/94\n    this.setAttribute('role', 'radiogroup');\n\n    this._fieldName = `${this.localName}-${generateUniqueId()}`;\n\n    this._observer = new FlattenedNodesObserver(this, ({ addedNodes, removedNodes }) => {\n      // Registers the added radio buttons in the reverse order\n      // in order for the group to take the value of the most recent button.\n      this.__filterRadioButtons(addedNodes).reverse().forEach(this.__registerRadioButton);\n\n      // Unregisters the removed radio buttons.\n      this.__filterRadioButtons(removedNodes).forEach(this.__unregisterRadioButton);\n    });\n  }\n\n  /**\n   * @param {!Array<!Node>} nodes\n   * @return {!Array<!RadioButton>}\n   * @private\n   */\n  __filterRadioButtons(nodes) {\n    return nodes.filter((child) => child instanceof RadioButton);\n  }\n\n  /**\n   * A collection of the group's radio buttons.\n   *\n   * @return {!Array<!RadioButton>}\n   * @private\n   */\n  get __radioButtons() {\n    return this.__filterRadioButtons([...this.children]);\n  }\n\n  /**\n   * A currently selected radio button.\n   *\n   * @return {!RadioButton | undefined}\n   * @private\n   */\n  get __selectedRadioButton() {\n    return this.__radioButtons.find((radioButton) => radioButton.checked);\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  get isHorizontalRTL() {\n    return this.getAttribute('dir') === 'rtl' && this._theme !== 'vertical';\n  }\n\n  /**\n   * Override method inherited from `KeyboardMixin`\n   * to implement the custom keyboard navigation as a replacement for the native one\n   * in order for the navigation to work the same way across different browsers.\n   *\n   * @param {!KeyboardEvent} event\n   * @override\n   * @protected\n   */\n  _onKeyDown(event) {\n    super._onKeyDown(event);\n\n    const radioButton = event.composedPath().find((node) => node instanceof RadioButton);\n\n    if (['ArrowLeft', 'ArrowUp'].includes(event.key)) {\n      event.preventDefault();\n      this.__selectNextRadioButton(radioButton);\n    }\n\n    if (['ArrowRight', 'ArrowDown'].includes(event.key)) {\n      event.preventDefault();\n      this.__selectPrevRadioButton(radioButton);\n    }\n  }\n\n  /**\n   * Override an observer from `FieldMixin`.\n   *\n   * @param {boolean} invalid\n   * @protected\n   * @override\n   */\n  _invalidChanged(invalid) {\n    super._invalidChanged(invalid);\n\n    if (invalid) {\n      this.setAttribute('aria-invalid', 'true');\n    } else {\n      this.removeAttribute('aria-invalid');\n    }\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  __selectNextRadioButton(radioButton) {\n    const index = this.__radioButtons.indexOf(radioButton);\n\n    this.__selectIncRadioButton(index, this.isHorizontalRTL ? 1 : -1);\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  __selectPrevRadioButton(radioButton) {\n    const index = this.__radioButtons.indexOf(radioButton);\n\n    this.__selectIncRadioButton(index, this.isHorizontalRTL ? -1 : 1);\n  }\n\n  /**\n   * @param {number} index\n   * @param {number} step\n   * @private\n   */\n  __selectIncRadioButton(index, step) {\n    const newIndex = (this.__radioButtons.length + index + step) % this.__radioButtons.length;\n    const newRadioButton = this.__radioButtons[newIndex];\n\n    if (newRadioButton.disabled) {\n      this.__selectIncRadioButton(newIndex, step);\n    } else {\n      newRadioButton.focusElement.focus();\n      newRadioButton.focusElement.click();\n    }\n  }\n\n  /**\n   * Registers the radio button after adding it to the group.\n   *\n   * @param {!RadioButton} radioButton\n   * @private\n   */\n  __registerRadioButton(radioButton) {\n    radioButton.name = this._fieldName;\n    radioButton.addEventListener('checked-changed', this.__onRadioButtonCheckedChange);\n\n    if (this.disabled || this.readonly) {\n      radioButton.disabled = true;\n    }\n\n    if (radioButton.checked) {\n      this.__selectRadioButton(radioButton);\n    }\n  }\n\n  /**\n   * Unregisters the radio button before removing it from the group.\n   *\n   * @param {!RadioButton} radioButton\n   * @private\n   */\n  __unregisterRadioButton(radioButton) {\n    radioButton.removeEventListener('checked-changed', this.__onRadioButtonCheckedChange);\n\n    if (radioButton.value === this.value) {\n      this.__selectRadioButton(null);\n    }\n  }\n\n  /**\n   * @param {!CustomEvent} event\n   * @private\n   */\n  __onRadioButtonCheckedChange(event) {\n    if (event.target.checked) {\n      this.__selectRadioButton(event.target);\n    }\n  }\n\n  /**\n   * Whenever the user sets a non-empty value,\n   * the method tries to select the radio button with that value\n   * showing a warning if no radio button was found with the given value.\n   * If the new value is empty, the method deselects the currently selected radio button.\n   * At last, the method toggles the `has-value` attribute considering the new value.\n   *\n   * @param {string | null | undefined} newValue\n   * @param {string | null | undefined} oldValue\n   * @private\n   */\n  __valueChanged(newValue, oldValue) {\n    if (oldValue === undefined && newValue === '') {\n      return;\n    }\n\n    if (newValue) {\n      const newSelectedRadioButton = this.__radioButtons.find((radioButton) => {\n        return radioButton.value === newValue;\n      });\n\n      if (newSelectedRadioButton) {\n        this.__selectRadioButton(newSelectedRadioButton);\n        this.toggleAttribute('has-value', true);\n      } else {\n        console.warn(`The radio button with the value \"${newValue}\" was not found.`);\n      }\n    } else {\n      this.__selectRadioButton(null);\n      this.removeAttribute('has-value');\n    }\n\n    if (oldValue !== undefined) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Whenever `readonly` property changes on the group element,\n   * the method updates the `disabled` property for the radio buttons.\n   *\n   * @param {boolean} newValue\n   * @param {boolean} oldValue\n   * @private\n   */\n  __readonlyChanged(newValue, oldValue) {\n    // Prevent updating the `disabled` property for the radio buttons at initialization.\n    // Otherwise, the group's radio buttons may end up enabled regardless\n    // an intentionally added `disabled` attribute on some of them.\n    if (!newValue && oldValue === undefined) {\n      return;\n    }\n\n    if (oldValue !== newValue) {\n      this.__updateRadioButtonsDisabledProperty();\n    }\n  }\n\n  /**\n   * Override method inherited from `DisabledMixin`\n   * to update the `disabled` property for the radio buttons\n   * whenever the property changes on the group element.\n   *\n   * @param {boolean} newValue\n   * @param {boolean} oldValue\n   * @override\n   * @protected\n   */\n  _disabledChanged(newValue, oldValue) {\n    super._disabledChanged(newValue, oldValue);\n\n    // Prevent updating the `disabled` property for the radio buttons at initialization.\n    // Otherwise, the group's radio buttons may end up enabled regardless\n    // an intentionally added `disabled` attribute on some of them.\n    if (!newValue && oldValue === undefined) {\n      return;\n    }\n\n    if (oldValue !== newValue) {\n      this.__updateRadioButtonsDisabledProperty();\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin`\n   * to prevent removing the `focused` attribute\n   * when focus moves between radio buttons inside the group.\n   *\n   * @param {!FocusEvent} event\n   * @return {boolean}\n   * @protected\n   */\n  _shouldRemoveFocus(event) {\n    return !this.contains(event.relatedTarget);\n  }\n\n  /**\n   * Override method inherited from `FocusMixin`\n   * to run validation when the group loses focus.\n   *\n   * @param {boolean} focused\n   * @override\n   * @protected\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this.validate();\n    }\n  }\n\n  /**\n   * @param {RadioButton} radioButton\n   * @private\n   */\n  __selectRadioButton(radioButton) {\n    if (radioButton) {\n      this.value = radioButton.value;\n    } else {\n      this.value = '';\n    }\n\n    this.__radioButtons.forEach((button) => {\n      button.checked = button === radioButton;\n    });\n\n    if (this.readonly) {\n      this.__updateRadioButtonsDisabledProperty();\n    }\n  }\n\n  /**\n   * If the group is read-only, the method disables the unchecked radio buttons.\n   * Otherwise, the method propagates the group's `disabled` property to the radio buttons.\n   *\n   * @private\n   */\n  __updateRadioButtonsDisabledProperty() {\n    this.__radioButtons.forEach((button) => {\n      if (this.readonly) {\n        // The native radio button doesn't support the `readonly` attribute\n        // so the state can be only imitated, by disabling unchecked radio buttons.\n        button.disabled = button !== this.__selectedRadioButton;\n      } else {\n        button.disabled = this.disabled;\n      }\n    });\n  }\n}\n\ncustomElements.define(RadioGroup.is, RadioGroup);\n\nexport { RadioGroup };\n"],
  "mappings": "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",
  "names": []
}
