{
  "version": 3,
  "sources": ["../../@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js", "../../@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n/**\n * @polymerMixin\n */\nexport const ThemePropertyMixin = (superClass) =>\n  class VaadinThemePropertyMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Helper property with theme attribute value facilitating propagation\n         * in shadow DOM.\n         *\n         * Enables the component implementation to propagate the `theme`\n         * attribute value to the sub-components in Shadow DOM by binding\n         * the sub-component\u2019s \"theme\" attribute to the `theme` property of\n         * the host.\n         *\n         * **NOTE:** Extending the mixin only provides the property for binding,\n         * and does not make the propagation alone.\n         *\n         * See [Styling Components: Sub-components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components/#sub-components).\n         * page for more information.\n         *\n         * @deprecated The `theme` property is not supposed for public use and will be dropped in Vaadin 24.\n         * Please, use the `theme` attribute instead.\n         * @protected\n         */\n        theme: {\n          type: String,\n          reflectToAttribute: true,\n          observer: '__deprecatedThemePropertyChanged',\n        },\n\n        /**\n         * Helper property with theme attribute value facilitating propagation\n         * in shadow DOM.\n         *\n         * Enables the component implementation to propagate the `theme`\n         * attribute value to the sub-components in Shadow DOM by binding\n         * the sub-component\u2019s \"theme\" attribute to the `theme` property of\n         * the host.\n         *\n         * **NOTE:** Extending the mixin only provides the property for binding,\n         * and does not make the propagation alone.\n         *\n         * See [Styling Components: Sub-components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components/#sub-components).\n         * page for more information.\n         *\n         * @protected\n         */\n        _theme: {\n          type: String,\n          readOnly: true,\n        },\n      };\n    }\n\n    /** @private */\n    __deprecatedThemePropertyChanged(theme) {\n      this._set_theme(theme);\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css, CSSResult, unsafeCSS } from 'lit';\nimport { ThemePropertyMixin } from './vaadin-theme-property-mixin.js';\n\nexport { css, unsafeCSS };\n\n/**\n * @typedef {Object} Theme\n * @property {string} themeFor\n * @property {CSSResult[]} styles\n * @property {string | string[]} [include]\n * @property {string} [moduleId]\n *\n * @typedef {CSSResult[] | CSSResult} CSSResultGroup\n */\n\n/**\n * @type {Theme[]}\n */\nconst themeRegistry = [];\n\n/**\n * Registers CSS styles for a component type. Make sure to register the styles before\n * the first instance of a component of the type is attached to DOM.\n *\n * @param {string} themeFor The local/tag name of the component type to register the styles for\n * @param {CSSResultGroup} styles The CSS style rules to be registered for the component type\n * matching themeFor and included in the local scope of each component instance\n * @param {{moduleId?: string, include?: string | string[]}} options Additional options\n * @return {void}\n */\nexport function registerStyles(themeFor, styles, options = {}) {\n  if (themeFor) {\n    if (hasThemes(themeFor)) {\n      console.warn(`The custom element definition for \"${themeFor}\"\n      was finalized before a style module was registered.\n      Make sure to add component specific style modules before\n      importing the corresponding custom element.`);\n    }\n  }\n\n  styles = flattenStyles(styles);\n\n  if (window.Vaadin && window.Vaadin.styleModules) {\n    window.Vaadin.styleModules.registerStyles(themeFor, styles, options);\n  } else {\n    themeRegistry.push({\n      themeFor,\n      styles,\n      include: options.include,\n      moduleId: options.moduleId,\n    });\n  }\n}\n\n/**\n * Returns all registered themes. By default the themeRegistry is returned as is.\n * In case the style-modules adapter is imported, the themes are obtained from there instead\n * @returns {Theme[]}\n */\nfunction getAllThemes() {\n  if (window.Vaadin && window.Vaadin.styleModules) {\n    return window.Vaadin.styleModules.getAllThemes();\n  }\n  return themeRegistry;\n}\n\n/**\n * Returns true if the themeFor string matches the tag name\n * @param {string} themeFor\n * @param {string} tagName\n * @returns {boolean}\n */\nfunction matchesThemeFor(themeFor, tagName) {\n  return (themeFor || '').split(' ').some((themeForToken) => {\n    return new RegExp(`^${themeForToken.split('*').join('.*')}$`).test(tagName);\n  });\n}\n\n/**\n * Maps the moduleName to an include priority number which is used for\n * determining the order in which styles are applied.\n * @param {string} moduleName\n * @returns {number}\n */\nfunction getIncludePriority(moduleName = '') {\n  let includePriority = 0;\n  if (moduleName.startsWith('lumo-') || moduleName.startsWith('material-')) {\n    includePriority = 1;\n  } else if (moduleName.startsWith('vaadin-')) {\n    includePriority = 2;\n  }\n  return includePriority;\n}\n\n/**\n * Flattens the styles into a single array of styles.\n * @param {CSSResultGroup} styles\n * @param {CSSResult[]} result\n * @returns {CSSResult[]}\n */\nfunction flattenStyles(styles = []) {\n  return [styles].flat(Infinity).filter((style) => {\n    if (style instanceof CSSResult) {\n      return true;\n    }\n    console.warn('An item in styles is not of type CSSResult. Use `unsafeCSS` or `css`.');\n    return false;\n  });\n}\n\n/**\n * Gets an array of CSSResults matching the include property of the theme.\n * @param {Theme} theme\n * @returns {CSSResult[]}\n */\nfunction getIncludedStyles(theme) {\n  const includedStyles = [];\n  if (theme.include) {\n    [].concat(theme.include).forEach((includeModuleId) => {\n      const includedTheme = getAllThemes().find((s) => s.moduleId === includeModuleId);\n      if (includedTheme) {\n        includedStyles.push(...getIncludedStyles(includedTheme), ...includedTheme.styles);\n      } else {\n        console.warn(`Included moduleId ${includeModuleId} not found in style registry`);\n      }\n    }, theme.styles);\n  }\n  return includedStyles;\n}\n\n/**\n * Includes the styles to the template.\n * @param {CSSResult[]} styles\n * @param {HTMLTemplateElement} template\n */\nfunction addStylesToTemplate(styles, template) {\n  const styleEl = document.createElement('style');\n  styleEl.innerHTML = styles.map((style) => style.cssText).join('\\n');\n  template.content.appendChild(styleEl);\n}\n\n/**\n * Returns an array of themes that should be used for styling a component matching\n * the tag name. The array is sorted by the include order.\n * @param {string} tagName\n * @returns {Theme[]}\n */\nfunction getThemes(tagName) {\n  const defaultModuleName = `${tagName}-default-theme`;\n\n  const themes = getAllThemes()\n    // Filter by matching themeFor properties\n    .filter((theme) => theme.moduleId !== defaultModuleName && matchesThemeFor(theme.themeFor, tagName))\n    .map((theme) => ({\n      ...theme,\n      // Prepend styles from included themes\n      styles: [...getIncludedStyles(theme), ...theme.styles],\n      // Map moduleId to includePriority\n      includePriority: getIncludePriority(theme.moduleId),\n    }))\n    // Sort by includePriority\n    .sort((themeA, themeB) => themeB.includePriority - themeA.includePriority);\n\n  if (themes.length > 0) {\n    return themes;\n  }\n  // No theme modules found, return the default module if it exists\n  return getAllThemes().filter((theme) => theme.moduleId === defaultModuleName);\n}\n\n/**\n * Check if the custom element type has themes applied.\n * @param {string} tagName\n * @returns {boolean}\n */\nfunction hasThemes(tagName) {\n  return classHasThemes(customElements.get(tagName));\n}\n\n/**\n * Check if the custom element type has themes applied.\n * @param {Function} elementClass\n * @returns {boolean}\n */\nfunction classHasThemes(elementClass) {\n  return elementClass && Object.prototype.hasOwnProperty.call(elementClass, '__themes');\n}\n\n/**\n * @polymerMixin\n * @mixes ThemePropertyMixin\n */\nexport const ThemableMixin = (superClass) =>\n  class VaadinThemableMixin extends ThemePropertyMixin(superClass) {\n    /**\n     * Covers PolymerElement based component styling\n     * @protected\n     */\n    static finalize() {\n      super.finalize();\n\n      // Make sure not to run the logic intended for PolymerElement when LitElement is used.\n      if (this.elementStyles) {\n        return;\n      }\n\n      const template = this.prototype._template;\n      if (!template || classHasThemes(this)) {\n        return;\n      }\n\n      addStylesToTemplate(this.getStylesForThis(), template);\n    }\n\n    /**\n     * Covers LitElement based component styling\n     *\n     * @protected\n     */\n    static finalizeStyles(styles) {\n      // The \"styles\" object originates from the \"static get styles()\" function of\n      // a LitElement based component. The theme styles are added after it\n      // so that they can override the component styles.\n      const themeStyles = this.getStylesForThis();\n      return styles ? [...super.finalizeStyles(styles), ...themeStyles] : themeStyles;\n    }\n\n    /**\n     * Get styles for the component type\n     *\n     * @private\n     */\n    static getStylesForThis() {\n      const parent = Object.getPrototypeOf(this.prototype);\n      const inheritedThemes = (parent ? parent.constructor.__themes : []) || [];\n      this.__themes = [...inheritedThemes, ...getThemes(this.is)];\n      const themeStyles = this.__themes.flatMap((theme) => theme.styles);\n      // Remove duplicates\n      return themeStyles.filter((style, index) => index === themeStyles.lastIndexOf(style));\n    }\n  };\n\nexport { themeRegistry as __themeRegistry };\n"],
  "mappings": "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",
  "names": []
}
