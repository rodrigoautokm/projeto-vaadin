{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/resolve-url.js", "../../@polymer/polymer/lib/utils/settings.js", "../../@polymer/polymer/lib/elements/dom-module.js", "../../@polymer/polymer/lib/utils/style-gather.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/[^\\/])|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  if (url === '//') {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    try {\n      return (new URL(url, baseURI)).href;\n    } catch (e) {\n      // Bad url or baseURI structure. Do not attempt to resolve.\n      return url;\n    }\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM) || !(window.ShadyDOM.inUse);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\nexport const supportsAdoptingStyleSheets = useShadow &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replaceSync' in CSSStyleSheet.prototype) &&\n    // Since spec may change, feature detect exact API we need\n    (() => {\n      try {\n        const sheet = new CSSStyleSheet();\n        sheet.replaceSync('');\n        const host = document.createElement('div');\n        host.attachShadow({mode: 'open'});\n        host.shadowRoot.adoptedStyleSheets = [sheet];\n        return (host.shadowRoot.adoptedStyleSheets[0] === sheet);\n      } catch(e) {\n        return false;\n      }\n    })();\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = window.Polymer && window.Polymer.rootPath ||\n  pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM.\n * The callback signature is:\n *\n *  function sanitizeDOMValue(value, name, type, node) { ... }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,?Node):*)|undefined}\n */\nexport let sanitizeDOMValue =\n  window.Polymer && window.Polymer.sanitizeDOMValue || undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,?Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Gets sanitizeDOMValue, for environments that don't well support `export let`.\n *\n * @return {(function(*,string,string,?Node):*)|undefined} sanitizeDOMValue\n */\nexport const getSanitizeDOMValue = function() {\n  return sanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures =\n  window.Polymer && window.Polymer.setPassiveTouchGestures || false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n\n/**\n * Setting to ensure Polymer template evaluation only occurs based on tempates\n * defined in trusted script.  When true, `<dom-module>` re-registration is\n * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`\n * templates will only evaluate in the context of a trusted element template.\n */\nexport let strictTemplatePolicy =\n  window.Polymer && window.Polymer.strictTemplatePolicy || false;\n\n/**\n * Sets `strictTemplatePolicy` globally for all elements\n *\n * @param {boolean} useStrictPolicy enable or disable strict template policy\n *   globally\n * @return {void}\n */\nexport const setStrictTemplatePolicy = function(useStrictPolicy) {\n  strictTemplatePolicy = useStrictPolicy;\n};\n\n/**\n * Setting to enable dom-module lookup from Polymer.Element.  By default,\n * templates must be defined in script using the `static get template()`\n * getter and the `html` tag function.  To enable legacy loading of templates\n * via dom-module, set this flag to true.\n */\nexport let allowTemplateFromDomModule =\n  window.Polymer && window.Polymer.allowTemplateFromDomModule || false;\n\n/**\n * Sets `lookupTemplateFromDomModule` globally for all elements\n *\n * @param {boolean} allowDomModule enable or disable template lookup\n *   globally\n * @return {void}\n */\nexport const setAllowTemplateFromDomModule = function(allowDomModule) {\n  allowTemplateFromDomModule = allowDomModule;\n};\n\n/**\n * Setting to skip processing style includes and re-writing urls in css styles.\n * Normally \"included\" styles are pulled into the element and all urls in styles\n * are re-written to be relative to the containing script url.\n * If no includes or relative urls are used in styles, these steps can be\n * skipped as an optimization.\n */\nexport let legacyOptimizations =\n  window.Polymer && window.Polymer.legacyOptimizations || false;\n\n/**\n * Sets `legacyOptimizations` globally for all elements to enable optimizations\n * when only legacy based elements are used.\n *\n * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations\n * includes and url rewriting\n * @return {void}\n */\nexport const setLegacyOptimizations = function(useLegacyOptimizations) {\n  legacyOptimizations = useLegacyOptimizations;\n};\n\n/**\n * Setting to add warnings useful when migrating from Polymer 1.x to 2.x.\n */\nexport let legacyWarnings =\n  window.Polymer && window.Polymer.legacyWarnings || false;\n\n/**\n * Sets `legacyWarnings` globally for all elements to migration warnings.\n *\n * @param {boolean} useLegacyWarnings enable or disable warnings\n * @return {void}\n */\nexport const setLegacyWarnings = function(useLegacyWarnings) {\n  legacyWarnings = useLegacyWarnings;\n};\n\n/**\n * Setting to perform initial rendering synchronously when running under ShadyDOM.\n * This matches the behavior of Polymer 1.\n */\nexport let syncInitialRender =\n  window.Polymer && window.Polymer.syncInitialRender || false;\n\n/**\n * Sets `syncInitialRender` globally for all elements to enable synchronous\n * initial rendering.\n *\n * @param {boolean} useSyncInitialRender enable or disable synchronous initial\n * rendering globally.\n * @return {void}\n */\nexport const setSyncInitialRender = function(useSyncInitialRender) {\n  syncInitialRender = useSyncInitialRender;\n};\n\n/**\n * Setting to retain the legacy Polymer 1 behavior for multi-property\n * observers around undefined values. Observers and computed property methods\n * are not called until no argument is undefined.\n */\nexport let legacyUndefined =\n  window.Polymer && window.Polymer.legacyUndefined || false;\n\n/**\n * Sets `legacyUndefined` globally for all elements to enable legacy\n * multi-property behavior for undefined values.\n *\n * @param {boolean} useLegacyUndefined enable or disable legacy\n * multi-property behavior for undefined.\n * @return {void}\n */\nexport const setLegacyUndefined = function(useLegacyUndefined) {\n  legacyUndefined = useLegacyUndefined;\n};\n\n/**\n * Setting to ensure computed properties are computed in order to ensure\n * re-computation never occurs in a given turn.\n */\nexport let orderedComputed =\n  window.Polymer && window.Polymer.orderedComputed || false;\n\n/**\n * Sets `orderedComputed` globally for all elements to enable ordered computed\n * property computation.\n *\n * @param {boolean} useOrderedComputed enable or disable ordered computed effects\n * @return {void}\n */\nexport const setOrderedComputed = function(useOrderedComputed) {\n  orderedComputed = useOrderedComputed;\n};\n\n/**\n * Setting to cancel synthetic click events fired by older mobile browsers. Modern browsers\n * no longer fire synthetic click events, and the cancellation behavior can interfere\n * when programmatically clicking on elements.\n */\nexport let cancelSyntheticClickEvents = true;\n\n/**\n * Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.\n *\n * @param {boolean} useCancelSyntheticClickEvents enable or disable cancelling synthetic\n * events\n * @return {void}\n */\nexport const setCancelSyntheticClickEvents = function(useCancelSyntheticClickEvents) {\n  cancelSyntheticClickEvents = useCancelSyntheticClickEvents;\n};\n\n/**\n * Setting to remove nested templates inside `dom-if` and `dom-repeat` as\n * part of element template parsing.  This is a performance optimization that\n * eliminates most of the tax of needing two elements due to the loss of\n * type-extended templates as a result of the V1 specification changes.\n */\nexport let removeNestedTemplates =\n  window.Polymer && window.Polymer.removeNestedTemplates || false;\n\n/**\n * Sets `removeNestedTemplates` globally, to eliminate nested templates\n * inside `dom-if` and `dom-repeat` as part of template parsing.\n *\n * @param {boolean} useRemoveNestedTemplates enable or disable removing nested\n *   templates during parsing\n * @return {void}\n */\nexport const setRemoveNestedTemplates = function(useRemoveNestedTemplates) {\n  removeNestedTemplates = useRemoveNestedTemplates;\n};\n\n/**\n * Setting to place `dom-if` elements in a performance-optimized mode that takes\n * advantage of lighter-weight host runtime template stamping to eliminate the\n * need for an intermediate Templatizer `TemplateInstance` to mange the nodes\n * stamped by `dom-if`.  Under this setting, any Templatizer-provided API's\n * such as `modelForElement` will not be available for nodes stamped by\n * `dom-if`.\n */\nexport let fastDomIf = window.Polymer && window.Polymer.fastDomIf || false;\n\n/**\n * Sets `fastDomIf` globally, to put `dom-if` in a performance-optimized mode.\n *\n * @param {boolean} useFastDomIf enable or disable `dom-if` fast-mode\n * @return {void}\n */\nexport const setFastDomIf = function(useFastDomIf) {\n  fastDomIf = useFastDomIf;\n};\n\n/**\n * Setting to disable `dom-change` and `rendered-item-count` events from\n * `dom-if` and `dom-repeat`. Users can opt back into `dom-change` events by\n * setting the `notify-dom-change` attribute (`notifyDomChange: true` property)\n * to `dom-if`/`don-repeat` instances.\n */\nexport let suppressTemplateNotifications =\n  window.Polymer && window.Polymer.suppressTemplateNotifications || false;\n\n/**\n * Sets `suppressTemplateNotifications` globally, to disable `dom-change` and\n * `rendered-item-count` events from `dom-if` and `dom-repeat`.\n *\n * @param {boolean} suppress enable or disable `suppressTemplateNotifications`\n * @return {void}\n */\nexport const setSuppressTemplateNotifications = function(suppress) {\n  suppressTemplateNotifications = suppress;\n};\n\n/**\n * Setting to disable use of dynamic attributes. This is an optimization\n * to avoid setting `observedAttributes`. Instead attributes are read\n * once at create time and set/removeAttribute are patched.\n */\nexport let legacyNoObservedAttributes =\n  window.Polymer && window.Polymer.legacyNoObservedAttributes || false;\n\n/**\n * Sets `legacyNoObservedAttributes` globally, to disable `observedAttributes`.\n *\n * @param {boolean} noObservedAttributes enable or disable `legacyNoObservedAttributes`\n * @return {void}\n */\nexport const setLegacyNoObservedAttributes = function(noObservedAttributes) {\n  legacyNoObservedAttributes = noObservedAttributes;\n};\n\n/**\n * Setting to enable use of `adoptedStyleSheets` for sharing style sheets\n * between component instances' shadow roots, if the app uses built Shady CSS\n * styles.\n */\nexport let useAdoptedStyleSheetsWithBuiltCSS =\n  window.Polymer && window.Polymer.useAdoptedStyleSheetsWithBuiltCSS || false;\n\n/**\n * Sets `useAdoptedStyleSheetsWithBuiltCSS` globally.\n *\n * @param {boolean} value enable or disable `useAdoptedStyleSheetsWithBuiltCSS`\n * @return {void}\n */\nexport const setUseAdoptedStyleSheetsWithBuiltCSS = function(value) {\n  useAdoptedStyleSheetsWithBuiltCSS = value;\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  /** @override */\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accommodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = /** @type {?HTMLTemplateElement} */(\n        m.querySelector('template'));\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent =\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n  let styles = _stylesFromModuleImports(module);\n  for (let i=0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}\n"],
  "mappings": "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",
  "names": ["modules"]
}
