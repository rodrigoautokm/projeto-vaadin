{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/mixins/mutable-data.js", "../../@polymer/polymer/lib/utils/templatize.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// Common implementation for mixin & behavior\nfunction mutablePropertyChange(inst, property, value, old, mutableData) {\n  let isObject;\n  if (mutableData) {\n    isObject = (typeof value === 'object' && value !== null);\n    // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n    if (isObject) {\n      old = inst.__dataTemp[property];\n    }\n  }\n  // Strict equality check, but return false for NaN===NaN\n  let shouldChange = (old !== value && (old === old || value === value));\n  // Objects are stored in temporary cache (cleared at end of\n  // turn), which is used for dirty-checking\n  if (isObject && shouldChange) {\n    inst.__dataTemp[property] = value;\n  }\n  return shouldChange;\n}\n\n/**\n * Element class mixin to skip strict dirty-checking for objects and arrays\n * (always consider them to be \"dirty\"), for use on elements utilizing\n * `PropertyEffects`\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this mixin or enable the\n * `OptionalMutableData` mixin.\n *\n * In order to make the dirty check strategy configurable, see\n * `OptionalMutableData`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to skip strict dirty-checking for objects\n *   and arrays\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const MutableData = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_MutableData}\n   */\n  class MutableData extends superClass {\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * This method pulls the value to dirty check against from the `__dataTemp`\n     * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, true);\n    }\n\n  }\n\n  return MutableData;\n\n});\n\n/**\n * Element class mixin to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this mixin or apply the\n * `MutableData` mixin.\n *\n * While this mixin adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to optionally skip strict dirty-checking\n *   for objects and arrays\n */\nexport const OptionalMutableData = dedupingMixin(superClass => {\n\n  /**\n   * @mixinClass\n   * @polymer\n   * @implements {Polymer_OptionalMutableData}\n   */\n  class OptionalMutableData extends superClass {\n\n    /** @nocollapse */\n    static get properties() {\n      return {\n        /**\n         * Instance-level flag for configuring the dirty-checking strategy\n         * for this element.  When true, Objects and Arrays will skip dirty\n         * checking, otherwise strict equality checking will be used.\n         */\n        mutableData: Boolean\n      };\n    }\n\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * When `this.mutableData` is true on this instance, this method\n     * pulls the value to dirty check against from the `__dataTemp` cache\n     * (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, this.mutableData);\n    }\n  }\n\n  return OptionalMutableData;\n\n});\n\n// Export for use by legacy behavior\nMutableData._mutablePropertyChange = mutablePropertyChange;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy, legacyWarnings } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() { return newInstance; }\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nconst templateInstanceBase = PropertyEffects(class {});\n\nexport function showHideChildren(hide, children) {\n  for (let i=0; i<children.length; i++) {\n    let n = children[i];\n    // Ignore non-changes\n    if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n      // clear and restore text\n      if (n.nodeType === Node.TEXT_NODE) {\n        if (hide) {\n          n.__polymerTextContent__ = n.textContent;\n          n.textContent = '';\n        } else {\n          n.textContent = n.__polymerTextContent__;\n        }\n      // remove and replace slot\n      } else if (n.localName === 'slot') {\n        if (hide) {\n          n.__polymerReplaced__ = document.createComment('hidden-slot');\n          wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n        } else {\n          const replace = n.__polymerReplaced__;\n          if (replace) {\n            wrap(wrap(replace).parentNode).replaceChild(n, replace);\n          }\n        }\n      }\n      // hide and show nodes\n      else if (n.style) {\n        if (hide) {\n          n.__polymerDisplay__ = n.style.display;\n          n.style.display = 'none';\n        } else {\n          n.style.display = n.__polymerDisplay__;\n        }\n      }\n    }\n    n.__hideTemplateChildren__ = hide;\n    if (n._showHideChildren) {\n      n._showHideChildren(hide);\n    }\n  }\n}\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends templateInstanceBase {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = [];\n    /** @suppress {invalidCasts} */\n    this.children = /** @type {!NodeList} */ (children);\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (let n = this.root.firstChild; n; n=n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner &&\n      this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if ((props && options.instanceProps) || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @override\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    showHideChildren(hide, this.children);\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ &&\n        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   * @override\n   */\n   dispatchEvent(event) { // eslint-disable-line no-unused-vars\n     return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nconst MutableTemplateInstanceBase = MutableData(\n    // This cast shouldn't be neccessary, but Closure doesn't understand that\n    // TemplateInstanceBase is a constructor function.\n    /** @type {function(new:TemplateInstanceBase)} */ (TemplateInstanceBase));\n\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let templatizerBase = options.mutableData ?\n    MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  let klass = class extends templatizerBase { };\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * Adds propagate effects from the template to the template instance for\n * properties that the host binds to the template using the `_host_` prefix.\n *\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(target, templateInfo, options, methodHost) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp && templateInfo.hasHostProps) {\n    // Under the `removeNestedTemplates` optimization, a custom element like\n    // `dom-if` or `dom-repeat` can itself be treated as the \"template\"; this\n    // flag is used to switch between upgrading a `<template>` to be a property\n    // effects client vs. adding the effects directly to the custom element\n    const isTemplate = target.localName == 'template';\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      if (isTemplate) {\n        /**\n         * @constructor\n         * @extends {DataTemplate}\n         */\n        let templatizedBase =\n            options.mutableData ? MutableDataTemplate : DataTemplate;\n\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplate extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass = TemplatizedTemplate;\n      } else {\n        /**\n         * @constructor\n         * @extends {PolymerElement}\n         */\n        const templatizedBase = target.constructor;\n\n        // Create a cached subclass of the base custom element class onto which\n        // to put the template-specific propagate effects\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplateExtension extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass =\n            TemplatizedTemplateExtension;\n      }\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop,\n          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n      if (legacyWarnings && methodHost) {\n        warnOnUndeclaredProperties(templateInfo, options, methodHost);\n      }\n    }\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (target.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(target.__data, target.__dataProto);\n    }\n    if (isTemplate) {\n      upgradeTemplate(target, klass);\n      // Clear any pending data for performance\n      target.__dataTemp = {};\n      target.__dataPending = null;\n      target.__dataOld = null;\n      target._enableProperties();\n    } else {\n      // Swizzle the cached subclass prototype onto the custom element\n      Object.setPrototypeOf(target, klass.prototype);\n      // Check for any pre-bound instance host properties, and do the\n      // instance property delete/assign dance for those (directly into data;\n      // not need to go through accessor since they are pulled at instance time)\n      const hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        prop = '_host_' + prop;\n        if (prop in target) {\n          const val = target[prop];\n          delete target[prop];\n          target.__data[prop] = val;\n        }\n      }\n    }\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner,\n      prop.substring('_host_'.length), props[prop]);\n  };\n}\n\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      // As we're iterating hostProps in this function, note whether\n      // there were any, for an optimization in addPropagateEffects\n      if (!templateInfo.hasHostProps) {\n        templateInfo.hasHostProps = true;\n      }\n      klass.prototype._addPropertyEffect(hprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyHostPropEffect()});\n    }\n  }\n}\n\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner,\n      inst, prop, props[prop]);\n  };\n}\n\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound\n *   to the template provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */(options || {});\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  const methodHost = findMethodHost(template);\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options, methodHost);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  /** @override */\n  klass.prototype._methodHost = methodHost;\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */ (template);\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */ (owner);\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign\n  return klass;\n}\n\nfunction warnOnUndeclaredProperties(templateInfo, options, methodHost) {\n  const declaredProps = methodHost.constructor._properties;\n  const {propertyEffects} = templateInfo;\n  const {instanceProps} = options;\n  for (let prop in propertyEffects) {\n    // Ensure properties with template effects are declared on the outermost\n    // host (`methodHost`), unless they are instance props or static functions\n    if (!declaredProps[prop] && !(instanceProps && instanceProps[prop])) {\n      const effects = propertyEffects[prop];\n      for (let i=0; i<effects.length; i++) {\n        const {part} = effects[i].info;\n        if (!(part.signature && part.signature.static)) {\n          console.warn(`Property '${prop}' used in template but not ` +\n            `declared in 'properties'; attribute will not be observed.`);\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLElement} template The model will be returned for\n *   elements stamped from this template (accepts either an HTMLTemplateElement)\n *   or a `<dom-if>`/`<dom-repeat>` element when using `removeNestedTemplates`\n *   optimization.\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if ((model = node.__dataHost ? node : node.__templatizeInstance)) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\n\nexport { TemplateInstanceBase };\n"],
  "mappings": ";;;;;;;;;;;;;AAYA,SAAS,sBAAsB,MAAM,UAAU,OAAO,KAAK,aAAa;AACtE,MAAI;AACJ,MAAI,aAAa;AACf,eAAY,OAAO,UAAU,YAAY,UAAU;AAEnD,QAAI,UAAU;AACZ,YAAM,KAAK,WAAW;AAAA,IACxB;AAAA,EACF;AAEA,MAAI,eAAgB,QAAQ,UAAU,QAAQ,OAAO,UAAU;AAG/D,MAAI,YAAY,cAAc;AAC5B,SAAK,WAAW,YAAY;AAAA,EAC9B;AACA,SAAO;AACT;AA4CO,IAAM,cAAc,cAAc,gBAAc;AAOrD,QAAMA,qBAAoB,WAAW;AAAA,IAkBnC,sBAAsB,UAAU,OAAO,KAAK;AAC1C,aAAO,sBAAsB,MAAM,UAAU,OAAO,KAAK,IAAI;AAAA,IAC/D;AAAA,EAEF;AAEA,SAAOA;AAET,CAAC;AA0CM,IAAM,sBAAsB,cAAc,gBAAc;AAO7D,QAAMC,6BAA4B,WAAW;AAAA,IAG3C,WAAW,aAAa;AACtB,aAAO;AAAA,QAML,aAAa;AAAA,MACf;AAAA,IACF;AAAA,IAoBA,sBAAsB,UAAU,OAAO,KAAK;AAC1C,aAAO,sBAAsB,MAAM,UAAU,OAAO,KAAK,KAAK,WAAW;AAAA,IAC3E;AAAA,EACF;AAEA,SAAOA;AAET,CAAC;AAGD,YAAY,yBAAyB;;;AC3IrC,IAAI,cAAc;AAOlB,SAAS,+BAA+B;AAAE,SAAO;AAAa;AAC9D,6BAA6B,YAAY,OAAO,OAAO,oBAAoB,WAAW;AAAA,EACpF,aAAa;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,EACZ;AACF,CAAC;AAQD,IAAM,eAAe,gBAAgB,4BAA4B;AAQjE,IAAM,sBAAsB,YAAY,YAAY;AAGpD,SAAS,gBAAgB,UAAU,aAAa;AAC9C,gBAAc;AACd,SAAO,eAAe,UAAU,YAAY,SAAS;AACrD,MAAI,YAAY;AAChB,gBAAc;AAChB;AASA,IAAM,uBAAuB,gBAAgB,MAAM;AAAC,CAAC;AAE9C,SAAS,iBAAiB,MAAM,UAAU;AAC/C,WAAS,IAAE,GAAG,IAAE,SAAS,QAAQ,KAAK;AACpC,QAAI,IAAI,SAAS;AAEjB,QAAI,QAAQ,IAAI,KAAK,QAAQ,EAAE,wBAAwB,GAAG;AAExD,UAAI,EAAE,aAAa,KAAK,WAAW;AACjC,YAAI,MAAM;AACR,YAAE,yBAAyB,EAAE;AAC7B,YAAE,cAAc;AAAA,QAClB,OAAO;AACL,YAAE,cAAc,EAAE;AAAA,QACpB;AAAA,MAEF,WAAW,EAAE,cAAc,QAAQ;AACjC,YAAI,MAAM;AACR,YAAE,sBAAsB,SAAS,cAAc,aAAa;AAC5D,eAAK,KAAK,CAAC,EAAE,UAAU,EAAE,aAAa,EAAE,qBAAqB,CAAC;AAAA,QAChE,OAAO;AACL,gBAAM,UAAU,EAAE;AAClB,cAAI,SAAS;AACX,iBAAK,KAAK,OAAO,EAAE,UAAU,EAAE,aAAa,GAAG,OAAO;AAAA,UACxD;AAAA,QACF;AAAA,MACF,WAES,EAAE,OAAO;AAChB,YAAI,MAAM;AACR,YAAE,qBAAqB,EAAE,MAAM;AAC/B,YAAE,MAAM,UAAU;AAAA,QACpB,OAAO;AACL,YAAE,MAAM,UAAU,EAAE;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AACA,MAAE,2BAA2B;AAC7B,QAAI,EAAE,mBAAmB;AACvB,QAAE,kBAAkB,IAAI;AAAA,IAC1B;AAAA,EACF;AACF;AAQA,IAAM,uBAAN,cAAmC,qBAAqB;AAAA,EACtD,YAAY,OAAO;AACjB,UAAM;AACN,SAAK,qBAAqB,KAAK;AAE/B,SAAK,OAAO,KAAK,eAAe,KAAK,UAAU;AAE/C,QAAI,WAAW,CAAC;AAEhB,SAAK,WAAqC;AAE1C,aAAS,IAAI,KAAK,KAAK,YAAY,GAAG,IAAE,EAAE,aAAa;AACrD,eAAS,KAAK,CAAC;AACf,QAAE,uBAAuB;AAAA,IAC3B;AACA,QAAI,KAAK,qBACP,KAAK,kBAAkB,0BAA0B;AACjD,WAAK,kBAAkB,IAAI;AAAA,IAC7B;AAGA,QAAI,UAAU,KAAK;AACnB,QAAK,SAAS,QAAQ,iBAAkB,CAAC,QAAQ,eAAe;AAC9D,WAAK,kBAAkB;AAAA,IACzB;AAAA,EACF;AAAA,EAQA,qBAAqB,OAAO;AAC1B,QAAI,UAAU,KAAK;AACnB,QAAI,QAAQ,iBAAiB;AAC3B,eAAS,SAAS,KAAK,aAAa;AAClC,aAAK,oBAAoB,OAAO,KAAK,WAAW,WAAW,MAAM;AAAA,MACnE;AAAA,IACF;AAGA,aAAS,SAAS,OAAO;AACvB,WAAK,oBAAoB,OAAO,MAAM,MAAM;AAAA,IAC9C;AAAA,EACF;AAAA,EAYA,gBAAgB,MAAM,OAAO;AAC3B,QAAI,KAAK,0BAA0B,MAAM,OAAO,OAAO,IAAI,GAAG;AAC5D,WAAK,WAAW,eAAe,IAAI;AAAA,IACrC;AAAA,EACF;AAAA,EAWA,wBAAwB,MAAM,WAAW,SAAS;AAChD,QAAI,KAAK,eAAe,KAAK,oBAAoB,aAAa;AAG5D,WAAK,YAAY,wBAAwB,MAAM,WAAW,CAAC,MAAM;AAC/D,UAAE,QAAQ;AACV,gBAAQ,CAAC;AAAA,MACX,CAAC;AAAA,IACH,OAAO;AAGL,UAAI,eAAe,KAAK,WAAW;AACnC,UAAI,cAAc;AAChB,qBAAa,wBAAwB,MAAM,WAAW,OAAO;AAAA,MAC/D;AAAA,IACF;AAAA,EACF;AAAA,EAUA,kBAAkB,MAAM;AACtB,qBAAiB,MAAM,KAAK,QAAQ;AAAA,EACtC;AAAA,EAaA,4BAA4B,MAAM,MAAM,OAAO;AAC7C,QAAI,KAAK,4BACL,KAAK,YAAY,KAAK,aAAa,QAAQ,eAAe;AAC5D,WAAK,yBAAyB;AAAA,IAChC,OAAO;AACL,YAAM,4BAA4B,MAAM,MAAM,KAAK;AAAA,IACrD;AAAA,EACF;AAAA,EAQA,IAAI,cAAc;AAChB,QAAI,QAAQ,KAAK;AACjB,QAAI,CAAC,OAAO;AACV,UAAI;AACJ,cAAQ;AACR,SAAG;AAGD,gBAAQ,MAAM,WAAW;AAAA,MAC3B,UAAU,UAAU,MAAM,wBAAwB,CAAC,QAAQ;AAC3D,WAAK,gBAAgB;AAAA,IACvB;AACA,WAAO;AAAA,EACT;AAAA,EAUC,cAAc,OAAO;AACnB,WAAO;AAAA,EACV;AACF;AAGA,qBAAqB,UAAU;AAE/B,qBAAqB,UAAU;AAE/B,qBAAqB,UAAU;AAE/B,qBAAqB,UAAU;AAE/B,qBAAqB,UAAU;AAQ/B,IAAM,8BAA8B;AAAA,EAGmB;AAAqB;AAE5E,SAAS,eAAe,UAAU;AAMhC,MAAI,eAAe,SAAS;AAC5B,SAAO,gBAAgB,aAAa,eAAe;AACrD;AAMA,SAAS,uBAAuB,UAAU,cAAc,SAAS;AAK/D,MAAI,kBAAkB,QAAQ,cAC5B,8BAA8B;AAGhC,MAAI,WAAW,OAAO;AACpB,sBAAkB,WAAW,MAAM,eAAe;AAAA,EACpD;AAOA,MAAI,QAAQ,cAAc,gBAAgB;AAAA,EAAE;AAE5C,QAAM,UAAU,sBAAsB;AACtC,QAAM,UAAU,cAAc,QAAQ;AACtC,mBAAiB,OAAO,UAAU,cAAc,OAAO;AACvD,SAAO;AACT;AAQA,SAAS,oBAAoB,QAAQ,cAAc,SAAS,YAAY;AACtE,MAAI,sBAAsB,QAAQ;AAClC,MAAI,uBAAuB,aAAa,cAAc;AAKpD,UAAM,aAAa,OAAO,aAAa;AAEvC,QAAI,QAAQ,aAAa;AACzB,QAAI,CAAC,OAAO;AACV,UAAI,YAAY;AAKd,YAAI,kBACA,QAAQ,cAAc,sBAAsB;AAMhD,cAAM,4BAA4B,gBAAgB;AAAA,QAAC;AACnD,gBAAQ,aAAa,0BAA0B;AAAA,MACjD,OAAO;AAKL,cAAM,kBAAkB,OAAO;AAQ/B,cAAM,qCAAqC,gBAAgB;AAAA,QAAC;AAC5D,gBAAQ,aAAa,0BACjB;AAAA,MACN;AAGA,UAAI,YAAY,aAAa;AAC7B,eAAS,QAAQ,WAAW;AAC1B,cAAM,UAAU;AAAA,UAAmB,WAAW;AAAA,UAC5C,MAAM,UAAU,sBAAsB;AAAA,UACtC,EAAC,IAAI,4BAA4B,MAAM,mBAAmB,EAAC;AAAA,QAAC;AAC9D,cAAM,UAAU,yBAAyB,WAAW,IAAI;AAAA,MAC1D;AACA,UAAI,kBAAkB,YAAY;AAChC,mCAA2B,cAAc,SAAS,UAAU;AAAA,MAC9D;AAAA,IACF;AAGA,QAAI,OAAO,aAAa;AAGtB,aAAO,OAAO,OAAO,QAAQ,OAAO,WAAW;AAAA,IACjD;AACA,QAAI,YAAY;AACd,sBAAgB,QAAQ,KAAK;AAE7B,aAAO,aAAa,CAAC;AACrB,aAAO,gBAAgB;AACvB,aAAO,YAAY;AACnB,aAAO,kBAAkB;AAAA,IAC3B,OAAO;AAEL,aAAO,eAAe,QAAQ,MAAM,SAAS;AAI7C,YAAM,YAAY,aAAa;AAC/B,eAAS,QAAQ,WAAW;AAC1B,eAAO,WAAW;AAClB,YAAI,QAAQ,QAAQ;AAClB,gBAAM,MAAM,OAAO;AACnB,iBAAO,OAAO;AACd,iBAAO,OAAO,QAAQ;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAGA,SAAS,4BAA4B,UAAU,qBAAqB;AAClE,SAAO,SAAS,gBAAgB,UAAU,MAAM,OAAO;AACrD,wBAAoB;AAAA,MAAK,SAAS;AAAA,MAChC,KAAK,UAAU,SAAS,MAAM;AAAA,MAAG,MAAM;AAAA,IAAK;AAAA,EAChD;AACF;AAEA,SAAS,iBAAiB,OAAO,UAAU,cAAc,SAAS;AAChE,MAAI,YAAY,aAAa,aAAa,CAAC;AAC3C,WAAS,SAAS,QAAQ,eAAe;AACvC,WAAO,UAAU;AACjB,QAAI,yBAAyB,QAAQ;AACrC,QAAI,wBAAwB;AAC1B,YAAM,UAAU;AAAA,QAAmB;AAAA,QACjC,MAAM,UAAU,sBAAsB;AAAA,QACtC,EAAC,IAAI,+BAA+B,OAAO,sBAAsB,EAAC;AAAA,MAAC;AAAA,IACvE;AAAA,EACF;AACA,MAAI,QAAQ,mBAAmB,SAAS,YAAY;AAClD,aAAS,SAAS,WAAW;AAG3B,UAAI,CAAC,aAAa,cAAc;AAC9B,qBAAa,eAAe;AAAA,MAC9B;AACA,YAAM,UAAU;AAAA,QAAmB;AAAA,QACjC,MAAM,UAAU,sBAAsB;AAAA,QACtC,EAAC,IAAI,2BAA2B,EAAC;AAAA,MAAC;AAAA,IACtC;AAAA,EACF;AACF;AAEA,SAAS,+BAA+B,UAAU,wBAAwB;AACxE,SAAO,SAAS,mBAAmB,MAAM,MAAM,OAAO;AACpD,2BAAuB;AAAA,MAAK,KAAK;AAAA,MAC/B;AAAA,MAAM;AAAA,MAAM,MAAM;AAAA,IAAK;AAAA,EAC3B;AACF;AAEA,SAAS,6BAA6B;AACpC,SAAO,SAAS,eAAe,MAAM,MAAM,OAAO;AAChD,SAAK,WAAW,0BAA0B,WAAW,MAAM,MAAM,OAAO,MAAM,IAAI;AAAA,EACpF;AACF;AAiFO,SAAS,WAAW,UAAU,OAAO,SAAS;AAInD,MAAI,wBAAwB,CAAC,eAAe,QAAQ,GAAG;AACrD,UAAM,IAAI,MAAM,kDAAkD;AAAA,EACpE;AACA,YAA4C,WAAW,CAAC;AACxD,MAAI,SAAS,mBAAmB;AAC9B,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC7D;AACA,WAAS,oBAAoB;AAC7B,QAAM,OAAO,QAAQ,MAAM,cAAc;AACzC,MAAI,eAAe,KAAK,eAAe,QAAQ;AAO/C,MAAI,YAAY,aAAa;AAC7B,MAAI,CAAC,WAAW;AACd,gBAAY,uBAAuB,UAAU,cAAc,OAAO;AAClE,iBAAa,0BAA0B;AAAA,EACzC;AACA,QAAM,aAAa,eAAe,QAAQ;AAE1C,sBAAoB,UAAU,cAAc,SAAS,UAAU;AAG/D,MAAI,QAAQ,MAAM,yBAAyB,UAAU;AAAA,EAAC;AAEtD,QAAM,UAAU,cAAc;AAE9B,QAAM,UAAU,aAA2C;AAE3D,QAAM,UAAU,oBAA4C;AAE5D,QAAM,UAAU,cAAc,aAAa;AAC3C,UAA0D;AAC1D,SAAO;AACT;AAEA,SAAS,2BAA2B,cAAc,SAAS,YAAY;AACrE,QAAM,gBAAgB,WAAW,YAAY;AAC7C,QAAM,EAAC,gBAAe,IAAI;AAC1B,QAAM,EAAC,cAAa,IAAI;AACxB,WAAS,QAAQ,iBAAiB;AAGhC,QAAI,CAAC,cAAc,SAAS,EAAE,iBAAiB,cAAc,QAAQ;AACnE,YAAM,UAAU,gBAAgB;AAChC,eAAS,IAAE,GAAG,IAAE,QAAQ,QAAQ,KAAK;AACnC,cAAM,EAAC,KAAI,IAAI,QAAQ,GAAG;AAC1B,YAAI,EAAE,KAAK,aAAa,KAAK,UAAU,SAAS;AAC9C,kBAAQ,KAAK,aAAa,0FACmC;AAC7D;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAwBO,SAAS,gBAAgB,UAAU,MAAM;AAC9C,MAAI;AACJ,SAAO,MAAM;AAIX,QAAK,QAAQ,KAAK,aAAa,OAAO,KAAK,sBAAuB;AAGhE,UAAI,MAAM,cAAc,UAAU;AAChC,eAAO,MAAM;AAAA,MACf,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF,OAAO;AAGL,aAAO,KAAK,IAAI,EAAE;AAAA,IACpB;AAAA,EACF;AACA,SAAO;AACT;",
  "names": ["MutableData", "OptionalMutableData"]
}
