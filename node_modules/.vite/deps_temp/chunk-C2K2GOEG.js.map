{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/resize-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\nconst observer = new ResizeObserver((entries) => {\n  setTimeout(() => {\n    entries.forEach((entry) => {\n      // Notify child resizables, if any\n      if (entry.target.resizables) {\n        entry.target.resizables.forEach((resizable) => {\n          resizable._onResize(entry.contentRect);\n        });\n      } else {\n        entry.target._onResize(entry.contentRect);\n      }\n    });\n  });\n});\n\n/**\n * A mixin that uses a ResizeObserver to listen to host size changes.\n *\n * @polymerMixin\n */\nexport const ResizeMixin = dedupingMixin(\n  (superclass) =>\n    class ResizeMixinClass extends superclass {\n      /** @protected */\n      connectedCallback() {\n        super.connectedCallback();\n        observer.observe(this);\n\n        if (this._observeParent) {\n          const parent = this.parentNode instanceof ShadowRoot ? this.parentNode.host : this.parentNode;\n\n          if (!parent.resizables) {\n            parent.resizables = new Set();\n            observer.observe(parent);\n          }\n\n          parent.resizables.add(this);\n          this.__parent = parent;\n        }\n      }\n\n      /** @protected */\n      disconnectedCallback() {\n        super.disconnectedCallback();\n        observer.unobserve(this);\n\n        const parent = this.__parent;\n        if (this._observeParent && parent) {\n          const resizables = parent.resizables;\n\n          if (resizables) {\n            resizables.delete(this);\n\n            if (resizables.size === 0) {\n              observer.unobserve(parent);\n            }\n          }\n\n          this.__parent = null;\n        }\n      }\n\n      /**\n       * When true, the parent element resize will be also observed.\n       * Override this getter and return `true` to enable this.\n       *\n       * @protected\n       */\n      get _observeParent() {\n        return false;\n      }\n\n      /**\n       * A handler invoked on host resize. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @protected\n       */\n      _onResize(_contentRect) {\n        // To be implemented.\n      }\n\n      /**\n       * @deprecated Since Vaadin 23, `notifyResize()` is deprecated. The component uses a\n       * ResizeObserver internally and doesn't need to be explicitly notified of resizes.\n       */\n      notifyResize() {\n        console.warn(\n          `WARNING: Since Vaadin 23, notifyResize() is deprecated. The component uses a ResizeObserver internally and doesn't need to be explicitly notified of resizes.`,\n        );\n      }\n    },\n);\n"],
  "mappings": ";;;;;AAOA,IAAM,WAAW,IAAI,eAAe,CAAC,YAAY;AAC/C,aAAW,MAAM;AACf,YAAQ,QAAQ,CAAC,UAAU;AAEzB,UAAI,MAAM,OAAO,YAAY;AAC3B,cAAM,OAAO,WAAW,QAAQ,CAAC,cAAc;AAC7C,oBAAU,UAAU,MAAM,WAAW;AAAA,QACvC,CAAC;AAAA,MACH,OAAO;AACL,cAAM,OAAO,UAAU,MAAM,WAAW;AAAA,MAC1C;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH,CAAC;AAOM,IAAM,cAAc;AAAA,EACzB,CAAC,eACC,MAAM,yBAAyB,WAAW;AAAA,IAExC,oBAAoB;AAClB,YAAM,kBAAkB;AACxB,eAAS,QAAQ,IAAI;AAErB,UAAI,KAAK,gBAAgB;AACvB,cAAM,SAAS,KAAK,sBAAsB,aAAa,KAAK,WAAW,OAAO,KAAK;AAEnF,YAAI,CAAC,OAAO,YAAY;AACtB,iBAAO,aAAa,oBAAI,IAAI;AAC5B,mBAAS,QAAQ,MAAM;AAAA,QACzB;AAEA,eAAO,WAAW,IAAI,IAAI;AAC1B,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA,IAGA,uBAAuB;AACrB,YAAM,qBAAqB;AAC3B,eAAS,UAAU,IAAI;AAEvB,YAAM,SAAS,KAAK;AACpB,UAAI,KAAK,kBAAkB,QAAQ;AACjC,cAAM,aAAa,OAAO;AAE1B,YAAI,YAAY;AACd,qBAAW,OAAO,IAAI;AAEtB,cAAI,WAAW,SAAS,GAAG;AACzB,qBAAS,UAAU,MAAM;AAAA,UAC3B;AAAA,QACF;AAEA,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA,IAQA,IAAI,iBAAiB;AACnB,aAAO;AAAA,IACT;AAAA,IAQA,UAAU,cAAc;AAAA,IAExB;AAAA,IAMA,eAAe;AACb,cAAQ;AAAA,QACN;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACJ;",
  "names": []
}
