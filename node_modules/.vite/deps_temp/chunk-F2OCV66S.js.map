{
  "version": 3,
  "sources": ["../../@vaadin/password-field/theme/lumo/vaadin-password-field-button-styles.js", "../../@vaadin/password-field/theme/lumo/vaadin-password-field-styles.js", "../../@vaadin/password-field/src/vaadin-password-field-button.js", "../../@vaadin/password-field/src/vaadin-password-field.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { button } from '@vaadin/button/theme/lumo/vaadin-button-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst passwordFieldButton = css`\n  :host {\n    position: absolute;\n    right: 0;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    min-width: auto;\n    background: transparent;\n    outline: none;\n  }\n`;\n\nregisterStyles('vaadin-password-field-button', [button, passwordFieldButton], {\n  moduleId: 'lumo-password-field-button',\n});\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/font-icons.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst passwordField = css`\n  [part='reveal-button']::before {\n    content: var(--lumo-icons-eye);\n  }\n\n  :host([password-visible]) [part='reveal-button']::before {\n    content: var(--lumo-icons-eye-disabled);\n  }\n\n  /* Make it easy to hide the button across the whole app */\n  [part='reveal-button'] {\n    position: relative;\n    display: var(--lumo-password-field-reveal-button-display, block);\n  }\n\n  [part='reveal-button'][hidden] {\n    display: none !important;\n  }\n`;\n\nregisterStyles('vaadin-password-field', [inputFieldShared, passwordField], { moduleId: 'lumo-password-field' });\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html } from '@polymer/polymer/polymer-element.js';\nimport { Button } from '@vaadin/button/src/vaadin-button.js';\n\n/**\n * An element used internally by `<vaadin-password-field>`. Not intended to be used separately.\n *\n * @extends Button\n * @private\n */\nclass PasswordFieldButton extends Button {\n  static get is() {\n    return 'vaadin-password-field-button';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n      </style>\n    `;\n  }\n}\n\ncustomElements.define(PasswordFieldButton.is, PasswordFieldButton);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-password-field-button.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\nimport { TextField } from '@vaadin/text-field/src/vaadin-text-field.js';\n\nconst ownTemplate = html`\n  <div part=\"reveal-button\" slot=\"suffix\">\n    <slot name=\"reveal\"></slot>\n  </div>\n`;\n\nlet memoizedTemplate;\n\n/**\n * `<vaadin-password-field>` is an extension of `<vaadin-text-field>` component for entering passwords.\n *\n * ```html\n * <vaadin-password-field label=\"Password\"></vaadin-password-field>\n * ```\n *\n * ### Styling\n *\n * `<vaadin-password-field>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * In addition to `<vaadin-text-field>` parts, the following parts are available for theming:\n *\n * Part name       | Description\n * ----------------|----------------------------------------------------\n * `reveal-button` | The eye icon which toggles the password visibility\n *\n * In addition to `<vaadin-text-field>` state attributes, the following state attributes are available for theming:\n *\n * Attribute          | Description\n * -------------------|---------------------------------\n * `password-visible` | Set when the password is visible\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends TextField\n */\nexport class PasswordField extends TextField {\n  static get is() {\n    return 'vaadin-password-field';\n  }\n\n  static get template() {\n    if (!memoizedTemplate) {\n      // Clone the superclass template\n      memoizedTemplate = super.template.cloneNode(true);\n\n      // Retrieve this element's dom-module template\n      const revealButton = ownTemplate.content.querySelector('[part=\"reveal-button\"]');\n\n      // Append reveal-button and styles to the text-field template\n      const inputField = memoizedTemplate.content.querySelector('[part=\"input-field\"]');\n      inputField.appendChild(revealButton);\n    }\n\n    return memoizedTemplate;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set to true to hide the eye icon which toggles the password visibility.\n       * @attr {boolean} reveal-button-hidden\n       */\n      revealButtonHidden: {\n        type: Boolean,\n        observer: '_revealButtonHiddenChanged',\n        value: false,\n      },\n\n      /**\n       * True if the password is visible ([type=text]).\n       * @attr {boolean} password-visible\n       */\n      passwordVisible: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n        observer: '_passwordVisibleChanged',\n        readOnly: true,\n      },\n\n      /**\n       * An object with translated strings used for localization.\n       * It has the following structure and default values:\n       *\n       * ```\n       * {\n       *   // Translation of the reveal icon button accessible label\n       *   reveal: 'Show password'\n       * }\n       * ```\n       */\n      i18n: {\n        type: Object,\n        value: () => {\n          return {\n            reveal: 'Show password',\n          };\n        },\n      },\n    };\n  }\n\n  static get observers() {\n    return ['__i18nChanged(i18n.*)'];\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      ...super.slotStyles,\n      `\n        ${tag} [slot=\"input\"]::-ms-reveal {\n          display: none;\n        }\n      `,\n    ];\n  }\n\n  /** @protected */\n  get _revealNode() {\n    return this._revealButtonController && this._revealButtonController.node;\n  }\n\n  constructor() {\n    super();\n    this._setType('password');\n    this.__boundRevealButtonClick = this._onRevealButtonClick.bind(this);\n    this.__boundRevealButtonTouchend = this._onRevealButtonTouchend.bind(this);\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._revealPart = this.shadowRoot.querySelector('[part=\"reveal-button\"]');\n\n    this._revealButtonController = new SlotController(\n      this,\n      'reveal',\n      () => document.createElement('vaadin-password-field-button'),\n      (host, btn) => {\n        btn.disabled = host.disabled;\n\n        btn.addEventListener('click', host.__boundRevealButtonClick);\n        btn.addEventListener('touchend', host.__boundRevealButtonTouchend);\n      },\n    );\n    this.addController(this._revealButtonController);\n\n    this.__updateAriaLabel(this.i18n);\n\n    this._updateToggleState(false);\n    this._toggleRevealHidden(this.revealButtonHidden);\n\n    if (this.inputElement) {\n      this.inputElement.autocapitalize = 'off';\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to mark field as focused\n   * when focus moves to the reveal button using Shift Tab.\n   * @param {Event} event\n   * @return {boolean}\n   * @protected\n   */\n  _shouldSetFocus(event) {\n    return event.target === this.inputElement || event.target === this._revealNode;\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to not hide password\n   * when focus moves to the reveal button or back to the input.\n   * @param {Event} event\n   * @return {boolean}\n   * @protected\n   */\n  _shouldRemoveFocus(event) {\n    return !(\n      event.relatedTarget === this._revealNode ||\n      (event.relatedTarget === this.inputElement && event.target === this._revealNode)\n    );\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to toggle password visibility.\n   * @param {boolean} focused\n   * @protected\n   * @override\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this._setPasswordVisible(false);\n    } else {\n      const isButtonFocused = this.getRootNode().activeElement === this._revealNode;\n      // Remove focus-ring from the field when the reveal button gets focused\n      this.toggleAttribute('focus-ring', this._keyboardActive && !isButtonFocused);\n    }\n  }\n\n  /** @private */\n  __updateAriaLabel(i18n) {\n    if (i18n.reveal && this._revealNode) {\n      this._revealNode.setAttribute('aria-label', i18n.reveal);\n    }\n  }\n\n  /** @private */\n  __i18nChanged(i18n) {\n    this.__updateAriaLabel(i18n.base);\n  }\n\n  /** @private */\n  _revealButtonHiddenChanged(hidden) {\n    this._toggleRevealHidden(hidden);\n  }\n\n  /** @private */\n  _togglePasswordVisibility() {\n    this._setPasswordVisible(!this.passwordVisible);\n  }\n\n  /** @private */\n  _onRevealButtonClick() {\n    this._togglePasswordVisibility();\n  }\n\n  /** @private */\n  _onRevealButtonTouchend(e) {\n    // Cancel the following click event\n    e.preventDefault();\n    this._togglePasswordVisibility();\n    // Focus the input to avoid problem with password still visible\n    // when user clicks the reveal button and then clicks outside.\n    this.inputElement.focus();\n  }\n\n  /** @private */\n  _toggleRevealHidden(hidden) {\n    if (this._revealNode) {\n      if (hidden) {\n        this._revealPart.setAttribute('hidden', '');\n        this._revealNode.setAttribute('tabindex', '-1');\n        this._revealNode.setAttribute('aria-hidden', 'true');\n      } else {\n        this._revealPart.removeAttribute('hidden');\n        this._revealNode.setAttribute('tabindex', '0');\n        this._revealNode.removeAttribute('aria-hidden');\n      }\n    }\n  }\n\n  /** @private */\n  _updateToggleState(passwordVisible) {\n    if (this._revealNode) {\n      this._revealNode.setAttribute('aria-pressed', passwordVisible ? 'true' : 'false');\n    }\n  }\n\n  /** @private */\n  _passwordVisibleChanged(passwordVisible) {\n    this._setType(passwordVisible ? 'text' : 'password');\n\n    this._updateToggleState(passwordVisible);\n  }\n\n  /**\n   * Override method inherited from `DisabledMixin` to synchronize the reveal button\n   * disabled state with the password field disabled state.\n   * @param {boolean} disabled\n   * @param {boolean} oldDisabled\n   * @protected\n   */\n  _disabledChanged(disabled, oldDisabled) {\n    super._disabledChanged(disabled, oldDisabled);\n\n    if (this._revealNode) {\n      this._revealNode.disabled = disabled;\n    }\n  }\n}\n\ncustomElements.define(PasswordField.is, PasswordField);\n"],
  "mappings": "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",
  "names": []
}
