import {
  Details,
  details
} from "./chunk-EQZYXTST.js";
import "./chunk-NEGQSXRC.js";
import "./chunk-26L5GZ27.js";
import {
  FlattenedNodesObserver
} from "./chunk-4V7CPLV2.js";
import "./chunk-IOVQFHDT.js";
import "./chunk-37YVODLE.js";
import "./chunk-PVLUQVE7.js";
import "./chunk-TXOUNVRU.js";
import "./chunk-ZCT3SKJI.js";
import "./chunk-DALKQVZ5.js";
import "./chunk-ZU2IWMPM.js";
import {
  ElementMixin
} from "./chunk-PT6BHIKU.js";
import "./chunk-7OTQVW5F.js";
import "./chunk-D7TE3X7L.js";
import "./chunk-7S7VFRNQ.js";
import "./chunk-ZYZHRUSQ.js";
import "./chunk-2EAS4FPS.js";
import "./chunk-VUWTYCVF.js";
import "./chunk-RTIK5DCO.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-SPVNJBW3.js";
import "./chunk-CQH3N2QY.js";
import {
  css
} from "./chunk-BVJZYYEF.js";
import {
  PolymerElement,
  html
} from "./chunk-ZKSNVHJS.js";
import "./chunk-A5QYNKPK.js";
import "./chunk-NCN7ELFS.js";
import "./chunk-CJPRR7ZF.js";

// node_modules/@vaadin/accordion/theme/lumo/vaadin-accordion-panel-styles.js
var accordionPanel = css`
  :host {
    margin: 0;
    border-bottom: solid 1px var(--lumo-contrast-10pct);
  }

  :host(:last-child) {
    border-bottom: none;
  }

  :host([theme~='filled']) {
    border-bottom: none;
  }

  :host([theme~='filled']:not(:last-child)) {
    margin-bottom: 2px;
  }
`;
registerStyles("vaadin-accordion-panel", [details, accordionPanel], { moduleId: "lumo-accordion-panel" });

// node_modules/@vaadin/accordion/src/vaadin-accordion-panel.js
var AccordionPanel = class extends Details {
  static get is() {
    return "vaadin-accordion-panel";
  }
};
customElements.define(AccordionPanel.is, AccordionPanel);

// node_modules/@vaadin/accordion/src/vaadin-accordion.js
var Accordion = class extends ThemableMixin(ElementMixin(PolymerElement)) {
  static get template() {
    return html`
      <style>
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none !important;
        }
      </style>
      <slot></slot>
    `;
  }
  static get is() {
    return "vaadin-accordion";
  }
  static get properties() {
    return {
      opened: {
        type: Number,
        value: 0,
        notify: true,
        reflectToAttribute: true
      },
      items: {
        type: Array,
        readOnly: true,
        notify: true
      }
    };
  }
  static get observers() {
    return ["_updateItems(items, opened)"];
  }
  constructor() {
    super();
    this._boundUpdateOpened = this._updateOpened.bind(this);
  }
  get focused() {
    return this.getRootNode().activeElement;
  }
  focus() {
    if (this._observer) {
      this._observer.flush();
    }
    if (Array.isArray(this.items)) {
      const idx = this._getAvailableIndex(0);
      if (idx >= 0) {
        this.items[idx].focus();
      }
    }
  }
  ready() {
    super.ready();
    this.addEventListener("keydown", (e) => this._onKeydown(e));
    this._observer = new FlattenedNodesObserver(this, (info) => {
      this._setItems(this._filterItems(Array.from(this.children)));
      this._filterItems(info.addedNodes).forEach((el) => {
        el.addEventListener("opened-changed", this._boundUpdateOpened);
      });
    });
  }
  _filterItems(array) {
    return array.filter((el) => el instanceof AccordionPanel);
  }
  _updateItems(items, opened) {
    if (items) {
      const itemToOpen = items[opened];
      items.forEach((item) => {
        item.opened = item === itemToOpen;
      });
    }
  }
  _onKeydown(event) {
    const item = event.composedPath()[0];
    if (!this.items.some((el) => el.focusElement === item)) {
      return;
    }
    const currentIdx = this.items.indexOf(this.focused);
    let idx;
    let increment;
    switch (event.key) {
      case "ArrowUp":
        increment = -1;
        idx = currentIdx - 1;
        break;
      case "ArrowDown":
        increment = 1;
        idx = currentIdx + 1;
        break;
      case "Home":
        increment = 1;
        idx = 0;
        break;
      case "End":
        increment = -1;
        idx = this.items.length - 1;
        break;
      default:
    }
    idx = this._getAvailableIndex(idx, increment);
    if (idx >= 0) {
      this.items[idx].focus();
      this.items[idx].setAttribute("focus-ring", "");
      event.preventDefault();
    }
  }
  _getAvailableIndex(index, increment) {
    const totalItems = this.items.length;
    let idx = index;
    for (let i = 0; typeof idx === "number" && i < totalItems; i++, idx += increment || 1) {
      if (idx < 0) {
        idx = totalItems - 1;
      } else if (idx >= totalItems) {
        idx = 0;
      }
      const item = this.items[idx];
      if (!item.disabled) {
        return idx;
      }
    }
    return -1;
  }
  _updateOpened(e) {
    const target = this._filterItems(e.composedPath())[0];
    const idx = this.items.indexOf(target);
    if (e.detail.value) {
      if (target.disabled || idx === -1) {
        return;
      }
      this.opened = idx;
    } else if (!this.items.some((item) => item.opened)) {
      this.opened = null;
    }
  }
};
customElements.define(Accordion.is, Accordion);
/**
 * @license
 * Copyright (c) 2019 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=@vaadin_accordion_theme_lumo_vaadin-accordion__js.js.map
