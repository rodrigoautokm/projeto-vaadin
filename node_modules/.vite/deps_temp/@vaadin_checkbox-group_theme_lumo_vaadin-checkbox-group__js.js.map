{
  "version": 3,
  "sources": ["../../@vaadin/checkbox-group/theme/lumo/vaadin-checkbox-group-styles.js", "../../@vaadin/checkbox-group/src/vaadin-checkbox-group.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { helper } from '@vaadin/vaadin-lumo-styles/mixins/helper.js';\nimport { requiredField } from '@vaadin/vaadin-lumo-styles/mixins/required-field.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst checkboxGroup = css`\n  :host {\n    color: var(--lumo-body-text-color);\n    font-size: var(--lumo-font-size-m);\n    font-family: var(--lumo-font-family);\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-tap-highlight-color: transparent;\n    padding: var(--lumo-space-xs) 0;\n  }\n\n  :host::before {\n    /* Effective height of vaadin-checkbox */\n    height: var(--lumo-size-s);\n    box-sizing: border-box;\n    display: inline-flex;\n    align-items: center;\n  }\n\n  :host([theme~='vertical']) [part='group-field'] {\n    display: flex;\n    flex-direction: column;\n  }\n\n  :host([disabled]) [part='label'] {\n    color: var(--lumo-disabled-text-color);\n    -webkit-text-fill-color: var(--lumo-disabled-text-color);\n  }\n\n  :host([focused]:not([disabled])) [part='label'] {\n    color: var(--lumo-primary-text-color);\n  }\n\n  :host(:hover:not([disabled]):not([focused])) [part='label'],\n  :host(:hover:not([disabled]):not([focused])) [part='helper-text'] {\n    color: var(--lumo-body-text-color);\n  }\n\n  /* Touch device adjustment */\n  @media (pointer: coarse) {\n    :host(:hover:not([disabled]):not([focused])) [part='label'] {\n      color: var(--lumo-secondary-text-color);\n    }\n  }\n`;\n\nregisterStyles('vaadin-checkbox-group', [requiredField, helper, checkboxGroup], {\n  moduleId: 'lumo-checkbox-group',\n});\n", "/**\n * @license\n * Copyright (c) 2018 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { Checkbox } from '@vaadin/checkbox/src/vaadin-checkbox.js';\nimport { DisabledMixin } from '@vaadin/component-base/src/disabled-mixin.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { FocusMixin } from '@vaadin/component-base/src/focus-mixin.js';\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * `<vaadin-checkbox-group>` is a web component that allows the user to choose several items from a group of binary choices.\n *\n * ```html\n * <vaadin-checkbox-group label=\"Preferred language of contact:\">\n *   <vaadin-checkbox value=\"en\" label=\"English\"></vaadin-checkbox>\n *   <vaadin-checkbox value=\"fr\" label=\"Fran\u00E7ais\"></vaadin-checkbox>\n *   <vaadin-checkbox value=\"de\" label=\"Deutsch\"></vaadin-checkbox>\n * </vaadin-checkbox-group>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name            | Description\n * ---------------------|----------------\n * `label`              | The slotted label element wrapper\n * `group-field`        | The checkbox elements wrapper\n * `helper-text`        | The slotted helper text element wrapper\n * `error-message`      | The slotted error message element wrapper\n * `required-indicator` | The `required` state indicator element\n *\n * The following state attributes are available for styling:\n *\n * Attribute           | Description                               | Part name\n * --------------------|-------------------------------------------|------------\n * `disabled`          | Set when the element is disabled          | :host\n * `invalid`           | Set when the element is invalid           | :host\n * `focused`           | Set when the element is focused           | :host\n * `has-label`         | Set when the element has a label          | :host\n * `has-value`         | Set when the element has a value          | :host\n * `has-helper`        | Set when the element has helper text      | :host\n * `has-error-message` | Set when the element has an error message | :host\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes ThemableMixin\n * @mixes DisabledMixin\n * @mixes ElementMixin\n * @mixes FocusMixin\n * @mixes FieldMixin\n */\nclass CheckboxGroup extends FieldMixin(FocusMixin(DisabledMixin(ElementMixin(ThemableMixin(PolymerElement))))) {\n  static get is() {\n    return 'vaadin-checkbox-group';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n        }\n\n        :host::before {\n          content: '\\\\2003';\n          width: 0;\n          display: inline-block;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        .vaadin-group-field-container {\n          display: flex;\n          flex-direction: column;\n          width: 100%;\n        }\n\n        :host(:not([has-label])) [part='label'] {\n          display: none;\n        }\n      </style>\n\n      <div class=\"vaadin-group-field-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\n        </div>\n\n        <div part=\"group-field\">\n          <slot></slot>\n        </div>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * An array containing values of the currently checked checkboxes.\n       *\n       * The array is immutable so toggling checkboxes always results in\n       * creating a new array.\n       *\n       * @type {!Array<!string>}\n       */\n      value: {\n        type: Array,\n        value: () => [],\n        notify: true,\n        observer: '__valueChanged',\n      },\n    };\n  }\n\n  constructor() {\n    super();\n\n    this.__registerCheckbox = this.__registerCheckbox.bind(this);\n    this.__unregisterCheckbox = this.__unregisterCheckbox.bind(this);\n    this.__onCheckboxCheckedChanged = this.__onCheckboxCheckedChanged.bind(this);\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.ariaTarget = this;\n\n    // See https://github.com/vaadin/vaadin-web-components/issues/94\n    this.setAttribute('role', 'group');\n\n    this._observer = new FlattenedNodesObserver(this, ({ addedNodes, removedNodes }) => {\n      const addedCheckboxes = this.__filterCheckboxes(addedNodes);\n      const removedCheckboxes = this.__filterCheckboxes(removedNodes);\n\n      addedCheckboxes.forEach(this.__registerCheckbox);\n      removedCheckboxes.forEach(this.__unregisterCheckbox);\n\n      this.__warnOfCheckboxesWithoutValue(addedCheckboxes);\n    });\n  }\n\n  /**\n   * Override method inherited from `ValidateMixin`\n   * to validate the value array.\n   *\n   * @override\n   * @return {boolean}\n   */\n  checkValidity() {\n    return !this.required || this.value.length > 0;\n  }\n\n  /**\n   * @param {!Array<!Node>} nodes\n   * @return {!Array<!Checkbox>}\n   * @private\n   */\n  __filterCheckboxes(nodes) {\n    return nodes.filter((child) => child instanceof Checkbox);\n  }\n\n  /**\n   * A collection of the checkboxes.\n   *\n   * @return {!Array<!Checkbox>}\n   * @private\n   */\n  get __checkboxes() {\n    return this.__filterCheckboxes([...this.children]);\n  }\n\n  /**\n   * @param {!Array<!Checkbox>} checkboxes\n   * @private\n   */\n  __warnOfCheckboxesWithoutValue(checkboxes) {\n    const hasCheckboxesWithoutValue = checkboxes.some((checkbox) => {\n      const { value } = checkbox;\n\n      return !checkbox.hasAttribute('value') && (!value || value === 'on');\n    });\n\n    if (hasCheckboxesWithoutValue) {\n      console.warn('Please provide the value attribute to all the checkboxes inside the checkbox group.');\n    }\n  }\n\n  /**\n   * Registers the checkbox after adding it to the group.\n   *\n   * @param {!Checkbox} checkbox\n   * @private\n   */\n  __registerCheckbox(checkbox) {\n    checkbox.addEventListener('checked-changed', this.__onCheckboxCheckedChanged);\n\n    if (this.disabled) {\n      checkbox.disabled = true;\n    }\n\n    if (checkbox.checked) {\n      this.__addCheckboxToValue(checkbox.value);\n    } else if (this.value.includes(checkbox.value)) {\n      checkbox.checked = true;\n    }\n  }\n\n  /**\n   * Unregisters the checkbox before removing it from the group.\n   *\n   * @param {!Checkbox} checkbox\n   * @private\n   */\n  __unregisterCheckbox(checkbox) {\n    checkbox.removeEventListener('checked-changed', this.__onCheckboxCheckedChanged);\n\n    if (checkbox.checked) {\n      this.__removeCheckboxFromValue(checkbox.value);\n    }\n  }\n\n  /**\n   * Override method inherited from `DisabledMixin`\n   * to propagate the `disabled` property to the checkboxes.\n   *\n   * @param {boolean} newValue\n   * @param {boolean} oldValue\n   * @override\n   * @protected\n   */\n  _disabledChanged(newValue, oldValue) {\n    super._disabledChanged(newValue, oldValue);\n\n    // Prevent updating the `disabled` property for the checkboxes at initialization.\n    // Otherwise, the checkboxes may end up enabled regardless the `disabled` attribute\n    // intentionally added by the user on some of them.\n    if (!newValue && oldValue === undefined) {\n      return;\n    }\n\n    if (oldValue !== newValue) {\n      this.__checkboxes.forEach((checkbox) => {\n        checkbox.disabled = newValue;\n      });\n    }\n  }\n\n  /**\n   * @param {string} value\n   * @private\n   */\n  __addCheckboxToValue(value) {\n    if (!this.value.includes(value)) {\n      this.value = [...this.value, value];\n    }\n  }\n\n  /**\n   * @param {string} value\n   * @private\n   */\n  __removeCheckboxFromValue(value) {\n    if (this.value.includes(value)) {\n      this.value = this.value.filter((v) => v !== value);\n    }\n  }\n\n  /**\n   * @param {!CustomEvent} event\n   * @private\n   */\n  __onCheckboxCheckedChanged(event) {\n    const checkbox = event.target;\n\n    if (checkbox.checked) {\n      this.__addCheckboxToValue(checkbox.value);\n    } else {\n      this.__removeCheckboxFromValue(checkbox.value);\n    }\n  }\n\n  /**\n   * @param {string | null | undefined} value\n   * @param {string | null | undefined} oldValue\n   * @private\n   */\n  __valueChanged(value, oldValue) {\n    // Setting initial value to empty array, skip validation\n    if (value.length === 0 && oldValue === undefined) {\n      return;\n    }\n\n    this.toggleAttribute('has-value', value.length > 0);\n\n    this.__checkboxes.forEach((checkbox) => {\n      checkbox.checked = value.includes(checkbox.value);\n    });\n\n    if (oldValue !== undefined) {\n      this.validate();\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin`\n   * to prevent removing the `focused` attribute\n   * when focus moves between checkboxes inside the group.\n   *\n   * @param {!FocusEvent} event\n   * @return {boolean}\n   * @protected\n   */\n  _shouldRemoveFocus(event) {\n    return !this.contains(event.relatedTarget);\n  }\n\n  /**\n   * Override method inherited from `FocusMixin`\n   * to run validation when the group loses focus.\n   *\n   * @param {boolean} focused\n   * @override\n   * @protected\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n\n    if (!focused) {\n      this.validate();\n    }\n  }\n}\n\ncustomElements.define(CheckboxGroup.is, CheckboxGroup);\n\nexport { CheckboxGroup };\n"],
  "mappings": "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",
  "names": []
}
