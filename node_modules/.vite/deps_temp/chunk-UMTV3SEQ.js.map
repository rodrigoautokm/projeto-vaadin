{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/render-status.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for scheduling flushable pre-render and post-render tasks.\n *\n * @summary Module for scheduling flushable pre-render and post-render tasks.\n */\n\nimport './boot.js';\n\nlet scheduled = false;\nlet beforeRenderQueue = [];\nlet afterRenderQueue = [];\n\nfunction schedule() {\n  scheduled = true;\n  // before next render\n  requestAnimationFrame(function() {\n    scheduled = false;\n    flushQueue(beforeRenderQueue);\n    // after the render\n    setTimeout(function() {\n      runQueue(afterRenderQueue);\n    });\n  });\n}\n\nfunction flushQueue(queue) {\n  while (queue.length) {\n    callMethod(queue.shift());\n  }\n}\n\nfunction runQueue(queue) {\n  for (let i=0, l=queue.length; i < l; i++) {\n    callMethod(queue.shift());\n  }\n}\n\nfunction callMethod(info) {\n  const context = info[0];\n  const callback = info[1];\n  const args = info[2];\n  try {\n    callback.apply(context, args);\n  } catch(e) {\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n\n/**\n * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`\n * tasks.\n *\n * @return {void}\n */\nexport function flush() {\n  while (beforeRenderQueue.length || afterRenderQueue.length) {\n    flushQueue(beforeRenderQueue);\n    flushQueue(afterRenderQueue);\n  }\n  scheduled = false;\n}\n\n\n/**\n * Enqueues a callback which will be run before the next render, at\n * `requestAnimationFrame` timing.\n *\n * This method is useful for enqueuing work that requires DOM measurement,\n * since measurement may not be reliable in custom element callbacks before\n * the first render, as well as for batching measurement tasks in general.\n *\n * Tasks in this queue may be flushed by calling `flush()`.\n *\n * @param {*} context Context object the callback function will be bound to\n * @param {function(...*):void} callback Callback function\n * @param {!Array=} args An array of arguments to call the callback function with\n * @return {void}\n */\nexport function beforeNextRender(context, callback, args) {\n  if (!scheduled) {\n    schedule();\n  }\n  beforeRenderQueue.push([context, callback, args]);\n}\n\n/**\n * Enqueues a callback which will be run after the next render, equivalent\n * to one task (`setTimeout`) after the next `requestAnimationFrame`.\n *\n * This method is useful for tuning the first-render performance of an\n * element or application by deferring non-critical work until after the\n * first paint.  Typical non-render-critical work may include adding UI\n * event listeners and aria attributes.\n *\n * @param {*} context Context object the callback function will be bound to\n * @param {function(...*):void} callback Callback function\n * @param {!Array=} args An array of arguments to call the callback function with\n * @return {void}\n */\nexport function afterNextRender(context, callback, args) {\n  if (!scheduled) {\n    schedule();\n  }\n  afterRenderQueue.push([context, callback, args]);\n}\n\n"],
  "mappings": ";AAkBA,IAAI,YAAY;AAChB,IAAI,oBAAoB,CAAC;AACzB,IAAI,mBAAmB,CAAC;AAExB,SAAS,WAAW;AAClB,cAAY;AAEZ,wBAAsB,WAAW;AAC/B,gBAAY;AACZ,eAAW,iBAAiB;AAE5B,eAAW,WAAW;AACpB,eAAS,gBAAgB;AAAA,IAC3B,CAAC;AAAA,EACH,CAAC;AACH;AAEA,SAAS,WAAW,OAAO;AACzB,SAAO,MAAM,QAAQ;AACnB,eAAW,MAAM,MAAM,CAAC;AAAA,EAC1B;AACF;AAEA,SAAS,SAAS,OAAO;AACvB,WAAS,IAAE,GAAG,IAAE,MAAM,QAAQ,IAAI,GAAG,KAAK;AACxC,eAAW,MAAM,MAAM,CAAC;AAAA,EAC1B;AACF;AAEA,SAAS,WAAW,MAAM;AACxB,QAAM,UAAU,KAAK;AACrB,QAAM,WAAW,KAAK;AACtB,QAAM,OAAO,KAAK;AAClB,MAAI;AACF,aAAS,MAAM,SAAS,IAAI;AAAA,EAC9B,SAAQ,GAAN;AACA,eAAW,MAAM;AACf,YAAM;AAAA,IACR,CAAC;AAAA,EACH;AACF;AAgCO,SAAS,iBAAiB,SAAS,UAAU,MAAM;AACxD,MAAI,CAAC,WAAW;AACd,aAAS;AAAA,EACX;AACA,oBAAkB,KAAK,CAAC,SAAS,UAAU,IAAI,CAAC;AAClD;AAgBO,SAAS,gBAAgB,SAAS,UAAU,MAAM;AACvD,MAAI,CAAC,WAAW;AACd,aAAS;AAAA,EACX;AACA,mBAAiB,KAAK,CAAC,SAAS,UAAU,IAAI,CAAC;AACjD;",
  "names": []
}
