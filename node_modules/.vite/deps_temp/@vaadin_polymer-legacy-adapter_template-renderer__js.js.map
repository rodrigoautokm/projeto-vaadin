{
  "version": 3,
  "sources": ["../../@vaadin/polymer-legacy-adapter/src/template-renderer-templatizer.js", "../../@vaadin/polymer-legacy-adapter/src/template-renderer-grid-templatizer.js", "../../@vaadin/polymer-legacy-adapter/src/template-renderer.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement } from '@polymer/polymer';\nimport { templatize } from '@polymer/polymer/lib/utils/templatize.js';\n\nexport class Templatizer extends PolymerElement {\n  static create(component, template) {\n    const templatizer = new this();\n    templatizer.__template = template;\n    templatizer.__component = component;\n    return templatizer;\n  }\n\n  static get is() {\n    return 'vaadin-template-renderer-templatizer';\n  }\n\n  constructor() {\n    super();\n\n    this.__template = null;\n    this.__component = null;\n    this.__TemplateClass = null;\n    this.__templateInstances = new Set();\n  }\n\n  /**\n   * If the template instance was created by this templatizer's instance and is still attached to DOM,\n   * it only re-renders the instance with the new properties.\n   * Otherwise, it disposes of the old template instance (if it exists),\n   * creates a new template instance with the given properties and renders the instance's root to the element.\n   */\n  render(element, properties = {}) {\n    let instance = element.__templateInstance;\n\n    if (this.__hasTemplateInstance(instance) && this.__isTemplateInstanceAttachedToDOM(instance)) {\n      this.__updateProperties(instance, properties);\n      return;\n    }\n\n    if (this.__hasTemplateInstance(instance)) {\n      this.__disposeOfTemplateInstance(instance);\n    }\n\n    instance = this.__createTemplateInstance(properties);\n    element.__templateInstance = instance;\n    element.innerHTML = '';\n    element.appendChild(instance.root);\n  }\n\n  /** @private */\n  __updateProperties(instance, properties) {\n    // The Polymer uses `===` to check whether a property is changed and should be re-rendered.\n    // This means, object properties won't be re-rendered when mutated inside.\n    // This workaround forces the `item` property to re-render even\n    // the new item is strictly equal to the old item.\n    if (instance.item === properties.item) {\n      instance._setPendingProperty('item');\n    }\n\n    instance.__properties = properties;\n    instance.setProperties(properties);\n  }\n\n  /** @private */\n  __createTemplateInstance(properties) {\n    this.__createTemplateClass(properties);\n\n    const instance = new this.__TemplateClass(properties);\n    instance.__properties = properties;\n\n    this.__templateInstances.add(instance);\n\n    return instance;\n  }\n\n  /** @private */\n  __disposeOfTemplateInstance(instance) {\n    this.__templateInstances.delete(instance);\n  }\n\n  /** @private */\n  __hasTemplateInstance(instance) {\n    return this.__templateInstances.has(instance);\n  }\n\n  /** @private */\n  __isTemplateInstanceAttachedToDOM(instance) {\n    // The edge-case case when the template is empty\n    if (instance.children.length === 0) {\n      return false;\n    }\n\n    return !!instance.children[0].parentElement;\n  }\n\n  /** @private */\n  __createTemplateClass(properties) {\n    if (this.__TemplateClass) {\n      return;\n    }\n\n    const instanceProps = Object.keys(properties).reduce((accum, key) => {\n      return { ...accum, [key]: true };\n    }, {});\n\n    this.__TemplateClass = templatize(this.__template, this, {\n      // Events handled by declarative event listeners\n      // (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n      // to the template instance that stamped it.\n      parentModel: true,\n      // This property prevents the template instance properties\n      // from passing into the `forwardHostProp` callback\n      instanceProps,\n\n      // When changing a property of the data host component, this callback forwards\n      // the changed property to the template instances so that cause their re-rendering.\n      forwardHostProp(prop, value) {\n        this.__templateInstances.forEach((instance) => {\n          instance.forwardHostProp(prop, value);\n        });\n      },\n\n      notifyInstanceProp(instance, path, value) {\n        let rootProperty;\n\n        // Extracts the root property name from the path\n        rootProperty = path.split('.')[0];\n        // Capitalizes the property name\n        rootProperty = rootProperty[0].toUpperCase() + rootProperty.slice(1);\n\n        const callback = `_on${rootProperty}PropertyChanged`;\n\n        if (this[callback]) {\n          this[callback](instance, path, value);\n        }\n      },\n    });\n  }\n}\n\ncustomElements.define(Templatizer.is, Templatizer);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Templatizer } from './template-renderer-templatizer.js';\n\nexport class GridTemplatizer extends Templatizer {\n  /**\n   * @override\n   */\n  static get is() {\n    return 'vaadin-template-renderer-grid-templatizer';\n  }\n\n  /**\n   * Updates the grid items once an item's nested property is changed.\n   *\n   * Note: The templatizer doesn't support 2-way binding for items provided by custom data provider.\n   * Note: The templatizer doesn't support 2-way binding for the whole item:\n   * <div>{{item}}</div> - not allowed.\n   * <div>{{item.title}}</div> - allowed.\n   *\n   * @protected\n   */\n  _onItemPropertyChanged(instance, path, value) {\n    // Supports 2-way binding only for nested `item` properties.\n    if (path === 'item') {\n      return;\n    }\n\n    // Supports 2-way binding only for items provided by the array data provider.\n    if (!Array.isArray(this.__grid.items)) {\n      return;\n    }\n\n    const index = this.__grid.items.indexOf(instance.item);\n\n    path = path.replace(/^item\\./, '');\n    path = `items.${index}.${path}`;\n\n    this.__grid.notifyPath(path, value);\n  }\n\n  /**\n   * Expands or collapses the item once the `expanded` property is changed.\n   * The listener handles only user-fired changes.\n   *\n   * @protected\n   */\n  _onExpandedPropertyChanged(instance, _path, value) {\n    // Skip if the value is changed by the templatizer.\n    if (instance.__properties.expanded === value) {\n      return;\n    }\n\n    if (value) {\n      this.__grid.expandItem(instance.item);\n    } else {\n      this.__grid.collapseItem(instance.item);\n    }\n  }\n\n  /**\n   * Selects or deselects the item once the `selected` property is changed.\n   * The listener handles only user-fired changes.\n   *\n   * @protected\n   */\n  _onSelectedPropertyChanged(instance, _path, value) {\n    // Skip if the value is changed by the templatizer.\n    if (instance.__properties.selected === value) {\n      return;\n    }\n\n    if (value) {\n      this.__grid.selectItem(instance.item);\n    } else {\n      this.__grid.deselectItem(instance.item);\n    }\n  }\n\n  /**\n   * Opens or closes the details for the item once the `detailsOpened` property is changed.\n   * The listener handles only user-fired changes.\n   *\n   * @protected\n   */\n  _onDetailsOpenedPropertyChanged(instance, _path, value) {\n    // Skip if the value is changed by the templatizer.\n    if (instance.__properties.detailsOpened === value) {\n      return;\n    }\n\n    if (value) {\n      this.__grid.openItemDetails(instance.item);\n    } else {\n      this.__grid.closeItemDetails(instance.item);\n    }\n  }\n\n  /**\n   * Returns a reference to the grid which the templatizer is connected to.\n   *\n   * @private\n   */\n  get __grid() {\n    if (this.__component.__gridElement) {\n      return this.__component;\n    }\n\n    return this.__component._grid;\n  }\n}\n\ncustomElements.define(GridTemplatizer.is, GridTemplatizer);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { GridTemplatizer } from './template-renderer-grid-templatizer.js';\nimport { Templatizer } from './template-renderer-templatizer.js';\n\nfunction createRenderer(component, template, TemplatizerClass = Templatizer) {\n  const templatizer = TemplatizerClass.create(component, template);\n\n  const renderer = (root, _owner, model) => {\n    templatizer.render(root, model);\n  };\n\n  template.__templatizer = templatizer;\n  renderer.__templatized = true;\n\n  return renderer;\n}\n\nfunction assignRenderer(component, rendererName, renderer) {\n  const oldRenderer = component[rendererName];\n\n  if (oldRenderer && !oldRenderer.__templatized) {\n    const tag = component.localName;\n\n    throw new Error(`Cannot use both a template and a renderer for <${tag} />.`);\n  }\n\n  component[rendererName] = renderer;\n}\n\nfunction showTemplateWarning(component) {\n  if (component.__suppressTemplateWarning) {\n    return;\n  }\n\n  if (component.hasAttribute('suppress-template-warning')) {\n    return;\n  }\n\n  console.warn(\n    `WARNING: <template> inside <${component.localName}> is deprecated. Use a renderer function instead (see https://vaad.in/template-renderer)`,\n  );\n\n  component.__suppressTemplateWarning = true;\n}\n\nfunction processGridTemplate(grid, template) {\n  if (template.matches('.row-details')) {\n    const renderer = createRenderer(grid, template, GridTemplatizer);\n    assignRenderer(grid, 'rowDetailsRenderer', renderer);\n  }\n}\n\nfunction processGridColumnTemplate(column, template) {\n  if (template.matches('.header')) {\n    const renderer = createRenderer(column, template);\n    assignRenderer(column, 'headerRenderer', renderer);\n    return;\n  }\n\n  if (template.matches('.footer')) {\n    const renderer = createRenderer(column, template);\n    assignRenderer(column, 'footerRenderer', renderer);\n    return;\n  }\n\n  if (template.matches('.editor')) {\n    const renderer = createRenderer(column, template, GridTemplatizer);\n    assignRenderer(column, 'editModeRenderer', renderer);\n    return;\n  }\n\n  const renderer = createRenderer(column, template, GridTemplatizer);\n  assignRenderer(column, 'renderer', renderer);\n}\n\nfunction processTemplate(component, template) {\n  showTemplateWarning(component);\n\n  if (component.__gridElement) {\n    processGridTemplate(component, template);\n    return;\n  }\n\n  if (component.__gridColumnElement) {\n    processGridColumnTemplate(component, template);\n    return;\n  }\n\n  const renderer = createRenderer(component, template);\n  assignRenderer(component, 'renderer', renderer);\n}\n\nfunction processTemplates(component) {\n  FlattenedNodesObserver.getFlattenedNodes(component)\n    .filter((child) => {\n      return child instanceof HTMLTemplateElement;\n    })\n    .forEach((template) => {\n      // Ignore templates which have been processed earlier\n      if (template.__templatizer) {\n        return;\n      }\n\n      processTemplate(component, template);\n    });\n}\n\nfunction observeTemplates(component) {\n  if (component.__templateObserver) {\n    return;\n  }\n\n  component.__templateObserver = new FlattenedNodesObserver(component, () => {\n    processTemplates(component);\n  });\n}\n\n/**\n * Public API\n */\nwindow.Vaadin = window.Vaadin || {};\nwindow.Vaadin.templateRendererCallback = (component) => {\n  processTemplates(component);\n  observeTemplates(component);\n};\n"],
  "mappings": "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",
  "names": ["renderer"]
}
