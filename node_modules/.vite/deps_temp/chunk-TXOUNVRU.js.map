{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/keyboard-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin that manages keyboard handling.\n * The mixin subscribes to the keyboard events while an actual implementation\n * for the event handlers is left to the client (a component or another mixin).\n *\n * @polymerMixin\n */\nexport const KeyboardMixin = dedupingMixin(\n  (superclass) =>\n    class KeyboardMixinClass extends superclass {\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this.addEventListener('keydown', (event) => {\n          this._onKeyDown(event);\n        });\n\n        this.addEventListener('keyup', (event) => {\n          this._onKeyUp(event);\n        });\n      }\n\n      /**\n       * A handler for the `keydown` event. By default, it calls\n       * separate methods for handling \"Enter\" and \"Escape\" keys.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} event\n       * @protected\n       */\n      _onKeyDown(event) {\n        switch (event.key) {\n          case 'Enter':\n            this._onEnter(event);\n            break;\n          case 'Escape':\n            this._onEscape(event);\n            break;\n          default:\n            break;\n        }\n      }\n\n      /**\n       * A handler for the `keyup` event. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onKeyUp(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Enter\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onEnter(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Escape\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onEscape(_event) {\n        // To be implemented.\n      }\n    },\n);\n"],
  "mappings": ";;;;;AAcO,IAAM,gBAAgB;AAAA,EAC3B,CAAC,eACC,MAAM,2BAA2B,WAAW;AAAA,IAE1C,QAAQ;AACN,YAAM,MAAM;AAEZ,WAAK,iBAAiB,WAAW,CAAC,UAAU;AAC1C,aAAK,WAAW,KAAK;AAAA,MACvB,CAAC;AAED,WAAK,iBAAiB,SAAS,CAAC,UAAU;AACxC,aAAK,SAAS,KAAK;AAAA,MACrB,CAAC;AAAA,IACH;AAAA,IAUA,WAAW,OAAO;AAChB,cAAQ,MAAM,KAAK;AAAA,QACjB,KAAK;AACH,eAAK,SAAS,KAAK;AACnB;AAAA,QACF,KAAK;AACH,eAAK,UAAU,KAAK;AACpB;AAAA,QACF;AACE;AAAA,MACJ;AAAA,IACF;AAAA,IASA,SAAS,QAAQ;AAAA,IAEjB;AAAA,IASA,SAAS,QAAQ;AAAA,IAEjB;AAAA,IASA,UAAU,QAAQ;AAAA,IAElB;AAAA,EACF;AACJ;",
  "names": []
}
