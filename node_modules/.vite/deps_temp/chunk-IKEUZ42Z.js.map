{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../@webcomponents/shadycss/src/css-parse.js", "../../@webcomponents/shadycss/src/unscoped-style-handler.js", "../../@webcomponents/shadycss/src/style-util.js", "../../@webcomponents/shadycss/src/apply-shim.js", "../../@webcomponents/shadycss/src/template-map.js", "../../@webcomponents/shadycss/src/apply-shim-utils.js", "../../@webcomponents/shadycss/entrypoints/apply-shim.js", "../../@polymer/polymer/lib/utils/gestures.js", "../../@polymer/polymer/lib/mixins/gesture-event-listeners.js", "../../@polymer/polymer/lib/mixins/dir-mixin.js", "../../@polymer/polymer/lib/utils/unresolved.js", "../../@polymer/polymer/lib/utils/scope-subtree.js", "../../@polymer/polymer/lib/legacy/legacy-element-mixin.js", "../../@polymer/polymer/lib/legacy/class.js", "../../@polymer/polymer/lib/legacy/polymer-fn.js", "../../@polymer/polymer/lib/legacy/templatizer-behavior.js", "../../@polymer/polymer/lib/legacy/mutable-data-behavior.js", "../../@polymer/polymer/lib/elements/dom-bind.js", "../../@polymer/polymer/lib/elements/array-selector.js", "../../@polymer/polymer/polymer-legacy.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport '../utils/settings.js';\nimport { FlattenedNodesObserver } from '../utils/flattened-nodes-observer.js';\nexport { flush, enqueueDebouncer as addDebouncer } from '../utils/flush.js';\n/* eslint-disable no-unused-vars */\nimport { Debouncer } from '../utils/debounce.js';  // used in type annotations\n/* eslint-enable no-unused-vars */\n\nconst p = Element.prototype;\n/**\n * @const {function(this:Node, string): boolean}\n */\nconst normalizedMatchesSelector = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\n/**\n * Cross-platform `element.matches` shim.\n *\n * @function matchesSelector\n * @param {!Node} node Node to check selector against\n * @param {string} selector Selector to match\n * @return {boolean} True if node matched selector\n */\nexport const matchesSelector = function(node, selector) {\n  return normalizedMatchesSelector.call(node, selector);\n};\n\n/**\n * Node API wrapper class returned from `Polymer.dom.(target)` when\n * `target` is a `Node`.\n * @implements {PolymerDomApi}\n * @unrestricted\n */\nclass DomApiNative {\n\n  /**\n   * @param {!Node} node Node for which to create a Polymer.dom helper object.\n   */\n  constructor(node) {\n    if (window['ShadyDOM'] && window['ShadyDOM']['inUse']) {\n      window['ShadyDOM']['patch'](node);\n    }\n    this.node = node;\n  }\n\n  /**\n   * Returns an instance of `FlattenedNodesObserver` that\n   * listens for node changes on this element.\n   *\n   * @param {function(this:HTMLElement, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Called when direct or distributed children\n   *   of this element changes\n   * @return {!PolymerDomApi.ObserveHandle} Observer instance\n   * @override\n   */\n  observeNodes(callback) {\n    return new FlattenedNodesObserver(\n        /** @type {!HTMLElement} */(this.node), callback);\n  }\n\n  /**\n   * Disconnects an observer previously created via `observeNodes`\n   *\n   * @param {!PolymerDomApi.ObserveHandle} observerHandle Observer instance\n   *   to disconnect.\n   * @return {void}\n   * @override\n   */\n  unobserveNodes(observerHandle) {\n    observerHandle.disconnect();\n  }\n\n  /**\n   * Provided as a backwards-compatible API only.  This method does nothing.\n   * @return {void}\n   */\n  notifyObserver() {}\n\n  /**\n   * Returns true if the provided node is contained with this element's\n   * light-DOM children or shadow root, including any nested shadow roots\n   * of children therein.\n   *\n   * @param {Node} node Node to test\n   * @return {boolean} Returns true if the given `node` is contained within\n   *   this element's light or shadow DOM.\n   * @override\n   */\n  deepContains(node) {\n    if (wrap(this.node).contains(node)) {\n      return true;\n    }\n    let n = node;\n    let doc = node.ownerDocument;\n    // walk from node to `this` or `document`\n    while (n && n !== doc && n !== this.node) {\n      // use logical parentnode, or native ShadowRoot host\n      n = wrap(n).parentNode || wrap(n).host;\n    }\n    return n === this.node;\n  }\n\n  /**\n   * Returns the root node of this node.  Equivalent to `getRootNode()`.\n   *\n   * @return {!Node} Top most element in the dom tree in which the node\n   * exists. If the node is connected to a document this is either a\n   * shadowRoot or the document; otherwise, it may be the node\n   * itself or a node or document fragment containing it.\n   * @override\n   */\n  getOwnerRoot() {\n    return wrap(this.node).getRootNode();\n  }\n\n  /**\n   * For slot elements, returns the nodes assigned to the slot; otherwise\n   * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.\n   *\n   * @return {!Array<!Node>} Array of assigned nodes\n   * @override\n   */\n  getDistributedNodes() {\n    return (this.node.localName === 'slot') ?\n      wrap(this.node).assignedNodes({flatten: true}) :\n      [];\n  }\n\n  /**\n   * Returns an array of all slots this element was distributed to.\n   *\n   * @return {!Array<!HTMLSlotElement>} Description\n   * @override\n   */\n  getDestinationInsertionPoints() {\n    let ip$ = [];\n    let n = wrap(this.node).assignedSlot;\n    while (n) {\n      ip$.push(n);\n      n = wrap(n).assignedSlot;\n    }\n    return ip$;\n  }\n\n  /**\n   * Calls `importNode` on the `ownerDocument` for this node.\n   *\n   * @param {!Node} node Node to import\n   * @param {boolean} deep True if the node should be cloned deeply during\n   *   import\n   * @return {Node} Clone of given node imported to this owner document\n   */\n  importNode(node, deep) {\n    let doc = this.node instanceof Document ? this.node :\n      this.node.ownerDocument;\n    return wrap(doc).importNode(node, deep);\n  }\n\n  /**\n   * @return {!Array<!Node>} Returns a flattened list of all child nodes and\n   * nodes assigned to child slots.\n   * @override\n   */\n  getEffectiveChildNodes() {\n    return FlattenedNodesObserver.getFlattenedNodes(\n        /** @type {!HTMLElement} */ (this.node));\n  }\n\n  /**\n   * Returns a filtered list of flattened child elements for this element based\n   * on the given selector.\n   *\n   * @param {string} selector Selector to filter nodes against\n   * @return {!Array<!HTMLElement>} List of flattened child elements\n   * @override\n   */\n  queryDistributedElements(selector) {\n    let c$ = this.getEffectiveChildNodes();\n    let list = [];\n    for (let i=0, l=c$.length, c; (i<l) && (c=c$[i]); i++) {\n      if ((c.nodeType === Node.ELEMENT_NODE) &&\n          matchesSelector(c, selector)) {\n        list.push(c);\n      }\n    }\n    return list;\n  }\n\n  /**\n   * For shadow roots, returns the currently focused element within this\n   * shadow root.\n   *\n   * return {Node|undefined} Currently focused element\n   * @override\n   */\n  get activeElement() {\n    let node = this.node;\n    return node._activeElement !== undefined ? node._activeElement : node.activeElement;\n  }\n}\n\nfunction forwardMethods(proto, methods) {\n  for (let i=0; i < methods.length; i++) {\n    let method = methods[i];\n    /* eslint-disable valid-jsdoc */\n    proto[method] = /** @this {DomApiNative} */ function() {\n      return this.node[method].apply(this.node, arguments);\n    };\n    /* eslint-enable */\n  }\n}\n\nfunction forwardReadOnlyProperties(proto, properties) {\n  for (let i=0; i < properties.length; i++) {\n    let name = properties[i];\n    Object.defineProperty(proto, name, {\n      get: function() {\n        const domApi = /** @type {DomApiNative} */(this);\n        return domApi.node[name];\n      },\n      configurable: true\n    });\n  }\n}\n\nfunction forwardProperties(proto, properties) {\n  for (let i=0; i < properties.length; i++) {\n    let name = properties[i];\n    Object.defineProperty(proto, name, {\n      /**\n       * @this {DomApiNative}\n       * @return {*} .\n       */\n      get: function() {\n        return this.node[name];\n      },\n      /**\n       * @this {DomApiNative}\n       * @param {*} value .\n       */\n      set: function(value) {\n        this.node[name] = value;\n      },\n      configurable: true\n    });\n  }\n}\n\n\n/**\n * Event API wrapper class returned from `dom.(target)` when\n * `target` is an `Event`.\n */\nexport class EventApi {\n  constructor(event) {\n    this.event = event;\n  }\n\n  /**\n   * Returns the first node on the `composedPath` of this event.\n   *\n   * @return {!EventTarget} The node this event was dispatched to\n   */\n  get rootTarget() {\n    return this.path[0];\n  }\n\n  /**\n   * Returns the local (re-targeted) target for this event.\n   *\n   * @return {!EventTarget} The local (re-targeted) target for this event.\n   */\n  get localTarget() {\n    return this.event.target;\n  }\n\n  /**\n   * Returns the `composedPath` for this event.\n   * @return {!Array<!EventTarget>} The nodes this event propagated through\n   */\n  get path() {\n    return this.event.composedPath();\n  }\n}\n\n/**\n * @function\n * @param {boolean=} deep\n * @return {!Node}\n */\nDomApiNative.prototype.cloneNode;\n/**\n * @function\n * @param {!Node} node\n * @return {!Node}\n */\nDomApiNative.prototype.appendChild;\n/**\n * @function\n * @param {!Node} newChild\n * @param {Node} refChild\n * @return {!Node}\n */\nDomApiNative.prototype.insertBefore;\n/**\n * @function\n * @param {!Node} node\n * @return {!Node}\n */\nDomApiNative.prototype.removeChild;\n/**\n * @function\n * @param {!Node} oldChild\n * @param {!Node} newChild\n * @return {!Node}\n */\nDomApiNative.prototype.replaceChild;\n/**\n * @function\n * @param {string} name\n * @param {string} value\n * @return {void}\n */\nDomApiNative.prototype.setAttribute;\n/**\n * @function\n * @param {string} name\n * @return {void}\n */\nDomApiNative.prototype.removeAttribute;\n/**\n * @function\n * @param {string} selector\n * @return {?Element}\n */\nDomApiNative.prototype.querySelector;\n/**\n * @function\n * @param {string} selector\n * @return {!NodeList<!Element>}\n */\nDomApiNative.prototype.querySelectorAll;\n\n/** @type {?Node} */\nDomApiNative.prototype.parentNode;\n/** @type {?Node} */\nDomApiNative.prototype.firstChild;\n/** @type {?Node} */\nDomApiNative.prototype.lastChild;\n/** @type {?Node} */\nDomApiNative.prototype.nextSibling;\n/** @type {?Node} */\nDomApiNative.prototype.previousSibling;\n/** @type {?HTMLElement} */\nDomApiNative.prototype.firstElementChild;\n/** @type {?HTMLElement} */\nDomApiNative.prototype.lastElementChild;\n/** @type {?HTMLElement} */\nDomApiNative.prototype.nextElementSibling;\n/** @type {?HTMLElement} */\nDomApiNative.prototype.previousElementSibling;\n/** @type {!Array<!Node>} */\nDomApiNative.prototype.childNodes;\n/** @type {!Array<!HTMLElement>} */\nDomApiNative.prototype.children;\n/** @type {?DOMTokenList} */\nDomApiNative.prototype.classList;\n\n/** @type {string} */\nDomApiNative.prototype.textContent;\n/** @type {string} */\nDomApiNative.prototype.innerHTML;\n\nlet DomApiImpl = DomApiNative;\n\nif (window['ShadyDOM'] && window['ShadyDOM']['inUse'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['Wrapper']) {\n\n  /**\n   * @private\n   * @extends {HTMLElement}\n   */\n  class Wrapper extends window['ShadyDOM']['Wrapper'] {}\n\n  // copy bespoke API onto wrapper\n  Object.getOwnPropertyNames(DomApiNative.prototype).forEach((prop) => {\n    if (prop != 'activeElement') {\n      Wrapper.prototype[prop] = DomApiNative.prototype[prop];\n    }\n  });\n\n  // Note, `classList` is here only for legacy compatibility since it does not\n  // trigger distribution in v1 Shadow DOM.\n  forwardReadOnlyProperties(Wrapper.prototype, [\n    'classList'\n  ]);\n\n  DomApiImpl = Wrapper;\n\n  Object.defineProperties(EventApi.prototype, {\n\n    // Returns the \"lowest\" node in the same root as the event's currentTarget.\n    // When in `noPatch` mode, this must be calculated by walking the event's\n    // path.\n    localTarget: {\n      get() {\n        const current = this.event.currentTarget;\n        const currentRoot = current && dom(current).getOwnerRoot();\n        const p$ = this.path;\n        for (let i = 0; i < p$.length; i++) {\n          const e = p$[i];\n          if (dom(e).getOwnerRoot() === currentRoot) {\n            return e;\n          }\n        }\n      },\n      configurable: true\n    },\n\n    path: {\n      get() {\n        return window['ShadyDOM']['composedPath'](this.event);\n      },\n      configurable: true\n    }\n  });\n\n} else {\n\n  // Methods that can provoke distribution or must return the logical, not\n  // composed tree.\n  forwardMethods(DomApiNative.prototype, [\n    'cloneNode', 'appendChild', 'insertBefore', 'removeChild',\n    'replaceChild', 'setAttribute', 'removeAttribute',\n    'querySelector', 'querySelectorAll', 'attachShadow'\n  ]);\n\n  // Properties that should return the logical, not composed tree. Note, `classList`\n  // is here only for legacy compatibility since it does not trigger distribution\n  // in v1 Shadow DOM.\n  forwardReadOnlyProperties(DomApiNative.prototype, [\n    'parentNode', 'firstChild', 'lastChild',\n    'nextSibling', 'previousSibling', 'firstElementChild',\n    'lastElementChild', 'nextElementSibling', 'previousElementSibling',\n    'childNodes', 'children', 'classList', 'shadowRoot'\n  ]);\n\n  forwardProperties(DomApiNative.prototype, [\n    'textContent', 'innerHTML', 'className'\n  ]);\n}\n\nexport const DomApi = DomApiImpl;\n\n/**\n * Legacy DOM and Event manipulation API wrapper factory used to abstract\n * differences between native Shadow DOM and \"Shady DOM\" when polyfilling on\n * older browsers.\n *\n * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and\n * in the majority of cases simply facades directly to the standard native\n * API.\n *\n * @summary Legacy DOM and Event manipulation API wrapper factory used to\n * abstract differences between native Shadow DOM and \"Shady DOM.\"\n * @param {(Node|Event|DomApiNative|EventApi)=} obj Node or event to operate on\n * @return {!DomApiNative|!EventApi} Wrapper providing either node API or event API\n */\nexport const dom = function(obj) {\n  obj = obj || document;\n  if (obj instanceof DomApiImpl) {\n    return /** @type {!DomApi} */(obj);\n  }\n  if (obj instanceof EventApi) {\n    return /** @type {!EventApi} */(obj);\n  }\n  let helper = obj['__domApi'];\n  if (!helper) {\n    if (obj instanceof Event) {\n      helper = new EventApi(obj);\n    } else {\n      helper = new DomApiImpl(/** @type {Node} */(obj));\n    }\n    obj['__domApi'] = helper;\n  }\n  return helper;\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/*\nExtremely simple css parser. Intended to be not more than what we need\nand definitely not necessarily correct =).\n*/\n\n'use strict';\n\n/** @unrestricted */\nclass StyleNode {\n  constructor() {\n    /** @type {number} */\n    this['start'] = 0;\n    /** @type {number} */\n    this['end'] = 0;\n    /** @type {StyleNode} */\n    this['previous'] = null;\n    /** @type {StyleNode} */\n    this['parent'] = null;\n    /** @type {Array<StyleNode>} */\n    this['rules'] = null;\n    /** @type {string} */\n    this['parsedCssText'] = '';\n    /** @type {string} */\n    this['cssText'] = '';\n    /** @type {boolean} */\n    this['atRule'] = false;\n    /** @type {number} */\n    this['type'] = 0;\n    /** @type {string} */\n    this['keyframesName'] = '';\n    /** @type {string} */\n    this['selector'] = '';\n    /** @type {string} */\n    this['parsedSelector'] = '';\n  }\n}\n\nexport {StyleNode};\n\n// given a string of css, return a simple rule tree\n/**\n * @param {string} text\n * @return {StyleNode}\n */\nexport function parse(text) {\n  text = clean(text);\n  return parseCss(lex(text), text);\n}\n\n// remove stuff we don't care about that may hinder parsing\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction clean(cssText) {\n  return cssText.replace(RX.comments, '').replace(RX.port, '');\n}\n\n// super simple {...} lexer that returns a node tree\n/**\n * @param {string} text\n * @return {!StyleNode}\n */\nfunction lex(text) {\n  let root = new StyleNode();\n  root['start'] = 0;\n  root['end'] = text.length;\n  let n = root;\n  for (let i = 0, l = text.length; i < l; i++) {\n    if (text[i] === OPEN_BRACE) {\n      if (!n['rules']) {\n        n['rules'] = [];\n      }\n      let p = n;\n      let previous = p['rules'][p['rules'].length - 1] || null;\n      n = new StyleNode();\n      n['start'] = i + 1;\n      n['parent'] = p;\n      n['previous'] = previous;\n      p['rules'].push(n);\n    } else if (text[i] === CLOSE_BRACE) {\n      n['end'] = i + 1;\n      n = n['parent'] || root;\n    }\n  }\n  return root;\n}\n\n// add selectors/cssText to node tree\n/**\n * @param {StyleNode} node\n * @param {string} text\n * @return {!StyleNode}\n */\nfunction parseCss(node, text) {\n  let t = text.substring(node['start'], node['end'] - 1);\n  node['parsedCssText'] = node['cssText'] = t.trim();\n  if (node['parent']) {\n    let ss = node['previous']\n      ? node['previous']['end']\n      : node['parent']['start'];\n    t = text.substring(ss, node['start'] - 1);\n    t = _expandUnicodeEscapes(t);\n    t = t.replace(RX.multipleSpaces, ' ');\n    // TODO(sorvell): ad hoc; make selector include only after last ;\n    // helps with mixin syntax\n    t = t.substring(t.lastIndexOf(';') + 1);\n    let s = (node['parsedSelector'] = node['selector'] = t.trim());\n    node['atRule'] = s.indexOf(AT_START) === 0;\n    // note, support a subset of rule types...\n    if (node['atRule']) {\n      if (s.indexOf(MEDIA_START) === 0) {\n        node['type'] = types.MEDIA_RULE;\n      } else if (s.match(RX.keyframesRule)) {\n        node['type'] = types.KEYFRAMES_RULE;\n        node['keyframesName'] = node['selector'].split(RX.multipleSpaces).pop();\n      }\n    } else {\n      if (s.indexOf(VAR_START) === 0) {\n        node['type'] = types.MIXIN_RULE;\n      } else {\n        node['type'] = types.STYLE_RULE;\n      }\n    }\n  }\n  let r$ = node['rules'];\n  if (r$) {\n    for (let i = 0, l = r$.length, r; i < l && (r = r$[i]); i++) {\n      parseCss(r, text);\n    }\n  }\n  return node;\n}\n\n/**\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n * expanded form that doesn't require trailing space `\\000033`\n * @param {string} s\n * @return {string}\n */\nfunction _expandUnicodeEscapes(s) {\n  return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function () {\n    let code = arguments[1],\n      repeat = 6 - code.length;\n    while (repeat--) {\n      code = '0' + code;\n    }\n    return '\\\\' + code;\n  });\n}\n\n/**\n * stringify parsed css.\n * @param {StyleNode} node\n * @param {boolean=} preserveProperties\n * @param {string=} text\n * @return {string}\n */\nexport function stringify(node, preserveProperties, text = '') {\n  // calc rule cssText\n  let cssText = '';\n  if (node['cssText'] || node['rules']) {\n    let r$ = node['rules'];\n    if (r$ && !_hasMixinRules(r$)) {\n      for (let i = 0, l = r$.length, r; i < l && (r = r$[i]); i++) {\n        cssText = stringify(r, preserveProperties, cssText);\n      }\n    } else {\n      cssText = preserveProperties\n        ? node['cssText']\n        : removeCustomProps(node['cssText']);\n      cssText = cssText.trim();\n      if (cssText) {\n        cssText = '  ' + cssText + '\\n';\n      }\n    }\n  }\n  // emit rule if there is cssText\n  if (cssText) {\n    if (node['selector']) {\n      text += node['selector'] + ' ' + OPEN_BRACE + '\\n';\n    }\n    text += cssText;\n    if (node['selector']) {\n      text += CLOSE_BRACE + '\\n\\n';\n    }\n  }\n  return text;\n}\n\n/**\n * @param {Array<StyleNode>} rules\n * @return {boolean}\n */\nfunction _hasMixinRules(rules) {\n  let r = rules[0];\n  return (\n    Boolean(r) &&\n    Boolean(r['selector']) &&\n    r['selector'].indexOf(VAR_START) === 0\n  );\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomProps(cssText) {\n  cssText = removeCustomPropAssignment(cssText);\n  return removeCustomPropApply(cssText);\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nexport function removeCustomPropAssignment(cssText) {\n  return cssText.replace(RX.customProp, '').replace(RX.mixinProp, '');\n}\n\n/**\n * @param {string} cssText\n * @return {string}\n */\nfunction removeCustomPropApply(cssText) {\n  return cssText.replace(RX.mixinApply, '').replace(RX.varApply, '');\n}\n\n/** @enum {number} */\nexport const types = {\n  STYLE_RULE: 1,\n  KEYFRAMES_RULE: 7,\n  MEDIA_RULE: 4,\n  MIXIN_RULE: 1000,\n};\n\nconst OPEN_BRACE = '{';\nconst CLOSE_BRACE = '}';\n\n// helper regexp's\nconst RX = {\n  comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n  port: /@import[^;]*;/gim,\n  customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n  mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n  mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n  varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n  keyframesRule: /^@[^\\s]*keyframes/,\n  multipleSpaces: /\\s+/g,\n};\n\nconst VAR_START = '--';\nconst MEDIA_START = '@media';\nconst AT_START = '@';\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/** @type {!Set<string>} */\nconst styleTextSet = new Set();\n\nexport const scopingAttribute = 'shady-unscoped';\n\n/**\n * Add a specifically-marked style to the document directly, and only one copy of that style.\n *\n * @param {!HTMLStyleElement} style\n * @return {undefined}\n */\nexport function processUnscopedStyle(style) {\n  const text = style.textContent;\n  if (!styleTextSet.has(text)) {\n    styleTextSet.add(text);\n    const newStyle = document.createElement('style');\n    newStyle.setAttribute('shady-unscoped', '');\n    newStyle.textContent = text;\n    document.head.appendChild(newStyle);\n  }\n}\n\n/**\n * Check if a style is supposed to be unscoped\n * @param {!HTMLStyleElement} style\n * @return {boolean} true if the style has the unscoping attribute\n */\nexport function isUnscopedStyle(style) {\n  return style.hasAttribute(scopingAttribute);\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {nativeShadow, nativeCssVariables, cssBuild} from './style-settings.js';\nimport {parse, stringify, types, StyleNode} from './css-parse.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport {MEDIA_MATCH} from './common-regex.js';\n// prettier-ignore\nimport {processUnscopedStyle, isUnscopedStyle} from './unscoped-style-handler.js';\n\n/**\n * @param {string|StyleNode} rules\n * @param {function(StyleNode)=} callback\n * @return {string}\n */\nexport function toCssText(rules, callback) {\n  if (!rules) {\n    return '';\n  }\n  if (typeof rules === 'string') {\n    rules = parse(rules);\n  }\n  if (callback) {\n    forEachRule(rules, callback);\n  }\n  return stringify(rules, nativeCssVariables);\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @return {StyleNode}\n */\nexport function rulesForStyle(style) {\n  if (!style['__cssRules'] && style.textContent) {\n    style['__cssRules'] = parse(style.textContent);\n  }\n  return style['__cssRules'] || null;\n}\n\n// Tests if a rule is a keyframes selector, which looks almost exactly\n// like a normal selector but is not (it has nothing to do with scoping\n// for example).\n/**\n * @param {StyleNode} rule\n * @return {boolean}\n */\nexport function isKeyframesSelector(rule) {\n  return (\n    Boolean(rule['parent']) && rule['parent']['type'] === types.KEYFRAMES_RULE\n  );\n}\n\n/**\n * @param {StyleNode} node\n * @param {Function=} styleRuleCallback\n * @param {Function=} keyframesRuleCallback\n * @param {boolean=} onlyActiveRules\n */\nexport function forEachRule(\n  node,\n  styleRuleCallback,\n  keyframesRuleCallback,\n  onlyActiveRules\n) {\n  if (!node) {\n    return;\n  }\n  let skipRules = false;\n  let type = node['type'];\n  if (onlyActiveRules) {\n    if (type === types.MEDIA_RULE) {\n      let matchMedia = node['selector'].match(MEDIA_MATCH);\n      if (matchMedia) {\n        // if rule is a non matching @media rule, skip subrules\n        if (!window.matchMedia(matchMedia[1]).matches) {\n          skipRules = true;\n        }\n      }\n    }\n  }\n  if (type === types.STYLE_RULE) {\n    styleRuleCallback(node);\n  } else if (keyframesRuleCallback && type === types.KEYFRAMES_RULE) {\n    keyframesRuleCallback(node);\n  } else if (type === types.MIXIN_RULE) {\n    skipRules = true;\n  }\n  let r$ = node['rules'];\n  if (r$ && !skipRules) {\n    for (let i = 0, l = r$.length, r; i < l && (r = r$[i]); i++) {\n      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n    }\n  }\n}\n\n// add a string of cssText to the document.\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @param {Node} target\n * @param {Node} contextNode\n * @return {HTMLStyleElement}\n */\nexport function applyCss(cssText, moniker, target, contextNode) {\n  let style = createScopeStyle(cssText, moniker);\n  applyStyle(style, target, contextNode);\n  return style;\n}\n\n/**\n * @param {string} cssText\n * @param {string} moniker\n * @return {!HTMLStyleElement}\n */\nexport function createScopeStyle(cssText, moniker) {\n  let style = /** @type {HTMLStyleElement} */ (document.createElement('style'));\n  if (moniker) {\n    style.setAttribute('scope', moniker);\n  }\n  style.textContent = cssText;\n  return style;\n}\n\n/**\n * Track the position of the last added style for placing placeholders\n * @type {Node}\n */\nlet lastHeadApplyNode = null;\n\n// insert a comment node as a styling position placeholder.\n/**\n * @param {string} moniker\n * @return {!Comment}\n */\nexport function applyStylePlaceHolder(moniker) {\n  let placeHolder = document.createComment(\n    ' Shady DOM styles for ' + moniker + ' '\n  );\n  let after = lastHeadApplyNode ? lastHeadApplyNode['nextSibling'] : null;\n  let scope = document.head;\n  scope.insertBefore(placeHolder, after || scope.firstChild);\n  lastHeadApplyNode = placeHolder;\n  return placeHolder;\n}\n\n/**\n * @param {HTMLStyleElement} style\n * @param {?Node} target\n * @param {?Node} contextNode\n */\nexport function applyStyle(style, target, contextNode) {\n  target = target || document.head;\n  let after = (contextNode && contextNode.nextSibling) || target.firstChild;\n  target.insertBefore(style, after);\n  if (!lastHeadApplyNode) {\n    lastHeadApplyNode = style;\n  } else {\n    // only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode\n    let position = style.compareDocumentPosition(lastHeadApplyNode);\n    if (position === Node.DOCUMENT_POSITION_PRECEDING) {\n      lastHeadApplyNode = style;\n    }\n  }\n}\n\n/**\n * @param {string} buildType\n * @return {boolean}\n */\nexport function isTargetedBuild(buildType) {\n  return nativeShadow ? buildType === 'shadow' : buildType === 'shady';\n}\n\n/**\n * Walk from text[start] matching parens and\n * returns position of the outer end paren\n * @param {string} text\n * @param {number} start\n * @return {number}\n */\nexport function findMatchingParen(text, start) {\n  let level = 0;\n  for (let i = start, l = text.length; i < l; i++) {\n    if (text[i] === '(') {\n      level++;\n    } else if (text[i] === ')') {\n      if (--level === 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n/**\n * @param {string} str\n * @param {function(string, string, string, string)} callback\n */\nexport function processVariableAndFallback(str, callback) {\n  // find 'var('\n  let start = str.indexOf('var(');\n  if (start === -1) {\n    // no var?, everything is prefix\n    return callback(str, '', '', '');\n  }\n  //${prefix}var(${inner})${suffix}\n  let end = findMatchingParen(str, start + 3);\n  let inner = str.substring(start + 4, end);\n  let prefix = str.substring(0, start);\n  // suffix may have other variables\n  let suffix = processVariableAndFallback(str.substring(end + 1), callback);\n  let comma = inner.indexOf(',');\n  // value and fallback args should be trimmed to match in property lookup\n  if (comma === -1) {\n    // variable, no fallback\n    return callback(prefix, inner.trim(), '', suffix);\n  }\n  // var(${value},${fallback})\n  let value = inner.substring(0, comma).trim();\n  let fallback = inner.substring(comma + 1).trim();\n  return callback(prefix, value, fallback, suffix);\n}\n\n/**\n * @param {Element} element\n * @param {string} value\n */\nexport function setElementClassRaw(element, value) {\n  // use native setAttribute provided by ShadyDOM when setAttribute is patched\n  if (nativeShadow) {\n    element.setAttribute('class', value);\n  } else {\n    window['ShadyDOM']['nativeMethods']['setAttribute'].call(\n      element,\n      'class',\n      value\n    );\n  }\n}\n\n/**\n * @type {function(*):*}\n */\nexport const wrap =\n  (window['ShadyDOM'] && window['ShadyDOM']['wrap']) || ((node) => node);\n\n/**\n * @param {Element | {is: string, extends: string}} element\n * @return {{is: string, typeExtension: string}}\n */\nexport function getIsExtends(element) {\n  let localName = element['localName'];\n  let is = '',\n    typeExtension = '';\n  /*\n  NOTE: technically, this can be wrong for certain svg elements\n  with `-` in the name like `<font-face>`\n  */\n  if (localName) {\n    if (localName.indexOf('-') > -1) {\n      is = localName;\n    } else {\n      typeExtension = localName;\n      is = (element.getAttribute && element.getAttribute('is')) || '';\n    }\n  } else {\n    is = /** @type {?} */ (element).is;\n    typeExtension = /** @type {?} */ (element).extends;\n  }\n  return {is, typeExtension};\n}\n\n/**\n * @param {Element|DocumentFragment} element\n * @return {string}\n */\nexport function gatherStyleText(element) {\n  /** @type {!Array<string>} */\n  const styleTextParts = [];\n  const styles = /** @type {!NodeList<!HTMLStyleElement>} */ (element.querySelectorAll(\n    'style'\n  ));\n  for (let i = 0; i < styles.length; i++) {\n    const style = styles[i];\n    if (isUnscopedStyle(style)) {\n      if (!nativeShadow) {\n        processUnscopedStyle(style);\n        style.parentNode.removeChild(style);\n      }\n    } else {\n      styleTextParts.push(style.textContent);\n      style.parentNode.removeChild(style);\n    }\n  }\n  return styleTextParts.join('').trim();\n}\n\n/**\n * Split a selector separated by commas into an array in a smart way\n * @param {string} selector\n * @return {!Array<string>}\n */\nexport function splitSelectorList(selector) {\n  const parts = [];\n  let part = '';\n  for (let i = 0; i >= 0 && i < selector.length; i++) {\n    // A selector with parentheses will be one complete part\n    if (selector[i] === '(') {\n      // find the matching paren\n      const end = findMatchingParen(selector, i);\n      // push the paren block into the part\n      part += selector.slice(i, end + 1);\n      // move the index to after the paren block\n      i = end;\n    } else if (selector[i] === ',') {\n      parts.push(part);\n      part = '';\n    } else {\n      part += selector[i];\n    }\n  }\n  // catch any pieces after the last comma\n  if (part) {\n    parts.push(part);\n  }\n  return parts;\n}\n\nconst CSS_BUILD_ATTR = 'css-build';\n\n/**\n * Return the polymer-css-build \"build type\" applied to this element\n *\n * @param {!HTMLElement} element\n * @return {string} Can be \"\", \"shady\", or \"shadow\"\n */\nexport function getCssBuild(element) {\n  if (cssBuild !== undefined) {\n    return /** @type {string} */ (cssBuild);\n  }\n  if (element.__cssBuild === undefined) {\n    // try attribute first, as it is the common case\n    const attrValue = element.getAttribute(CSS_BUILD_ATTR);\n    if (attrValue) {\n      element.__cssBuild = attrValue;\n    } else {\n      const buildComment = getBuildComment(element);\n      if (buildComment !== '') {\n        // remove build comment so it is not needlessly copied into every element instance\n        removeBuildComment(element);\n      }\n      element.__cssBuild = buildComment;\n    }\n  }\n  return element.__cssBuild || '';\n}\n\n/**\n * Check if the given element, either a <template> or <style>, has been processed\n * by polymer-css-build.\n *\n * If so, then we can make a number of optimizations:\n * - polymer-css-build will decompose mixins into individual CSS Custom Properties,\n * so the ApplyShim can be skipped entirely.\n * - Under native ShadowDOM, the style text can just be copied into each instance\n * without modification\n * - If the build is \"shady\" and ShadyDOM is in use, the styling does not need\n * scoping beyond the shimming of CSS Custom Properties\n *\n * @param {!HTMLElement} element\n * @return {boolean}\n */\nexport function elementHasBuiltCss(element) {\n  return getCssBuild(element) !== '';\n}\n\n/**\n * For templates made with tagged template literals, polymer-css-build will\n * insert a comment of the form `<!--css-build:shadow-->`\n *\n * @param {!HTMLElement} element\n * @return {string}\n */\nexport function getBuildComment(element) {\n  const buildComment =\n    element.localName === 'template'\n      ? /** @type {!HTMLTemplateElement} */ (element).content.firstChild\n      : element.firstChild;\n  if (buildComment instanceof Comment) {\n    const commentParts = buildComment.textContent.trim().split(':');\n    if (commentParts[0] === CSS_BUILD_ATTR) {\n      return commentParts[1];\n    }\n  }\n  return '';\n}\n\n/**\n * Check if the css build status is optimal, and do no unneeded work.\n *\n * @param {string=} cssBuild CSS build status\n * @return {boolean} css build is optimal or not\n */\nexport function isOptimalCssBuild(cssBuild = '') {\n  // CSS custom property shim always requires work\n  if (cssBuild === '' || !nativeCssVariables) {\n    return false;\n  }\n  return nativeShadow ? cssBuild === 'shadow' : cssBuild === 'shady';\n}\n\n/**\n * @param {!HTMLElement} element\n */\nfunction removeBuildComment(element) {\n  const buildComment =\n    element.localName === 'template'\n      ? /** @type {!HTMLTemplateElement} */ (element).content.firstChild\n      : element.firstChild;\n  buildComment.parentNode.removeChild(buildComment);\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    `@apply` --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\n\n'use strict';\n\n// prettier-ignore\nimport {forEachRule, processVariableAndFallback, rulesForStyle, toCssText, gatherStyleText} from './style-util.js';\nimport {MIXIN_MATCH, VAR_ASSIGN} from './common-regex.js';\nimport {detectMixin} from './common-utils.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nconst APPLY_NAME_CLEAN = /;\\s*/m;\nconst INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\nconst IMPORTANT = /\\s*!important/;\n\n// separator used between mixin-name and mixin-property-name when producing properties\n// NOTE: plain '-' may cause collisions in user styles\nconst MIXIN_VAR_SEP = '_-_';\n\n/**\n * @typedef {!Object<string, string>}\n */\nlet PropertyEntry; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n/**\n * @typedef {!Object<string, boolean>}\n */\nlet DependantsEntry; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n/** @typedef {{\n *    properties: PropertyEntry,\n *    dependants: DependantsEntry\n * }}\n */\nlet MixinMapEntry; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n// map of mixin to property names\n// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\nclass MixinMap {\n  constructor() {\n    /** @type {!Object<string, !MixinMapEntry>} */\n    this._map = {};\n  }\n  /**\n   * @param {string} name\n   * @param {!PropertyEntry} props\n   */\n  set(name, props) {\n    name = name.trim();\n    this._map[name] = {\n      properties: props,\n      dependants: {},\n    };\n  }\n  /**\n   * @param {string} name\n   * @return {MixinMapEntry}\n   */\n  get(name) {\n    name = name.trim();\n    return this._map[name] || null;\n  }\n}\n\n/**\n * Callback for when an element is marked invalid\n * @type {?function(string)}\n */\nlet invalidCallback = null;\n\n/** @unrestricted */\nclass ApplyShim {\n  constructor() {\n    /** @type {?string} */\n    this._currentElement = null;\n    /** @type {HTMLMetaElement} */\n    this._measureElement = null;\n    this._map = new MixinMap();\n  }\n  /**\n   * return true if `cssText` contains a mixin definition or consumption\n   * @param {string} cssText\n   * @return {boolean}\n   */\n  detectMixin(cssText) {\n    return detectMixin(cssText);\n  }\n\n  /**\n   * Gather styles into one style for easier processing\n   * @param {!HTMLTemplateElement} template\n   * @return {HTMLStyleElement}\n   */\n  gatherStyles(template) {\n    const styleText = gatherStyleText(template.content);\n    if (styleText) {\n      const style = /** @type {!HTMLStyleElement} */ (document.createElement(\n        'style'\n      ));\n      style.textContent = styleText;\n      template.content.insertBefore(style, template.content.firstChild);\n      return style;\n    }\n    return null;\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformTemplate(template, elementName) {\n    if (template._gatheredStyle === undefined) {\n      template._gatheredStyle = this.gatherStyles(template);\n    }\n    /** @type {HTMLStyleElement} */\n    const style = template._gatheredStyle;\n    return style ? this.transformStyle(style, elementName) : null;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @param {string} elementName\n   * @return {StyleNode}\n   */\n  transformStyle(style, elementName = '') {\n    let ast = rulesForStyle(style);\n    this.transformRules(ast, elementName);\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {!HTMLStyleElement} style\n   * @return {StyleNode}\n   */\n  transformCustomStyle(style) {\n    let ast = rulesForStyle(style);\n    forEachRule(ast, (rule) => {\n      if (rule['selector'] === ':root') {\n        rule['selector'] = 'html';\n      }\n      this.transformRule(rule);\n    });\n    style.textContent = toCssText(ast);\n    return ast;\n  }\n  /**\n   * @param {StyleNode} rules\n   * @param {string} elementName\n   */\n  transformRules(rules, elementName) {\n    this._currentElement = elementName;\n    forEachRule(rules, (r) => {\n      this.transformRule(r);\n    });\n    this._currentElement = null;\n  }\n  /**\n   * @param {!StyleNode} rule\n   */\n  transformRule(rule) {\n    rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);\n    // :root was only used for variable assignment in property shim,\n    // but generates invalid selectors with real properties.\n    // replace with `:host > *`, which serves the same effect\n    if (rule['selector'] === ':root') {\n      rule['selector'] = ':host > *';\n    }\n  }\n  /**\n   * @param {string} cssText\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  transformCssText(cssText, rule) {\n    // produce variables\n    cssText = cssText.replace(\n      VAR_ASSIGN,\n      (matchText, propertyName, valueProperty, valueMixin) =>\n        this._produceCssProperties(\n          matchText,\n          propertyName,\n          valueProperty,\n          valueMixin,\n          rule\n        )\n    );\n    // consume mixins\n    return this._consumeCssProperties(cssText, rule);\n  }\n  /**\n   * @param {string} property\n   * @return {string}\n   */\n  _getInitialValueForProperty(property) {\n    if (!this._measureElement) {\n      this._measureElement = /** @type {HTMLMetaElement} */ (document.createElement(\n        'meta'\n      ));\n      this._measureElement.setAttribute('apply-shim-measure', '');\n      this._measureElement.style.all = 'initial';\n      document.head.appendChild(this._measureElement);\n    }\n    return window\n      .getComputedStyle(this._measureElement)\n      .getPropertyValue(property);\n  }\n  /**\n   * Walk over all rules before this rule to find fallbacks for mixins\n   *\n   * @param {!StyleNode} startRule\n   * @return {!Object}\n   */\n  _fallbacksFromPreviousRules(startRule) {\n    // find the \"top\" rule\n    let topRule = startRule;\n    while (topRule['parent']) {\n      topRule = topRule['parent'];\n    }\n    const fallbacks = {};\n    let seenStartRule = false;\n    forEachRule(topRule, (r) => {\n      // stop when we hit the input rule\n      seenStartRule = seenStartRule || r === startRule;\n      if (seenStartRule) {\n        return;\n      }\n      // NOTE: Only matching selectors are \"safe\" for this fallback processing\n      // It would be prohibitive to run `matchesSelector()` on each selector,\n      // so we cheat and only check if the same selector string is used, which\n      // guarantees things like specificity matching\n      if (r['selector'] === startRule['selector']) {\n        Object.assign(fallbacks, this._cssTextToMap(r['parsedCssText']));\n      }\n    });\n    return fallbacks;\n  }\n  /**\n   * replace mixin consumption with variable consumption\n   * @param {string} text\n   * @param {!StyleNode=} rule\n   * @return {string}\n   */\n  _consumeCssProperties(text, rule) {\n    /** @type {Array} */\n    let m = null;\n    // loop over text until all mixins with defintions have been applied\n    while ((m = MIXIN_MATCH.exec(text))) {\n      let matchText = m[0];\n      let mixinName = m[1];\n      let idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      let applyPos = idx + matchText.indexOf('@apply');\n      let afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      let textBeforeApply = text.slice(0, applyPos);\n      let textAfterApply = text.slice(afterApplyPos);\n      let defaults = rule ? this._fallbacksFromPreviousRules(rule) : {};\n      Object.assign(defaults, this._cssTextToMap(textBeforeApply));\n      let replacement = this._atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = `${textBeforeApply}${replacement}${textAfterApply}`;\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n  /**\n   * produce variable consumption at the site of mixin consumption\n   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n   * Example:\n   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n   *\n   * @param {string} mixinName\n   * @param {Object} fallbacks\n   * @return {string}\n   */\n  _atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    let vars = [];\n    let mixinEntry = this._map.get(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      this._map.set(mixinName, {});\n      mixinEntry = this._map.get(mixinName);\n    }\n    if (mixinEntry) {\n      if (this._currentElement) {\n        mixinEntry.dependants[this._currentElement] = true;\n      }\n      let p, parts, f;\n      const properties = mixinEntry.properties;\n      for (p in properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f.replace(IMPORTANT, ''));\n        }\n        parts.push(')');\n        if (IMPORTANT.test(properties[p])) {\n          parts.push(' !important');\n        }\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  /**\n   * @param {string} property\n   * @param {string} value\n   * @return {string}\n   */\n  _replaceInitialOrInherit(property, value) {\n    let match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = this._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  /**\n   * \"parse\" a mixin definition into a map of properties and values\n   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n   * @param {string} text\n   * @param {boolean=} replaceInitialOrInherit\n   * @return {!Object<string, string>}\n   */\n  _cssTextToMap(text, replaceInitialOrInherit = false) {\n    let props = text.split(';');\n    let property, value;\n    let out = {};\n    for (let i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = sp.slice(1).join(':');\n          if (replaceInitialOrInherit) {\n            value = this._replaceInitialOrInherit(property, value);\n          }\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * @param {MixinMapEntry} mixinEntry\n   */\n  _invalidateMixinEntry(mixinEntry) {\n    if (!invalidCallback) {\n      return;\n    }\n    for (let elementName in mixinEntry.dependants) {\n      if (elementName !== this._currentElement) {\n        invalidCallback(elementName);\n      }\n    }\n  }\n\n  /**\n   * @param {string} matchText\n   * @param {string} propertyName\n   * @param {?string} valueProperty\n   * @param {?string} valueMixin\n   * @param {!StyleNode} rule\n   * @return {string}\n   */\n  _produceCssProperties(\n    matchText,\n    propertyName,\n    valueProperty,\n    valueMixin,\n    rule\n  ) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      processVariableAndFallback(valueProperty, (prefix, value) => {\n        if (value && this._map.get(value)) {\n          valueMixin = `@apply ${value};`;\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    let mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule);\n    let prefix = matchText.slice(0, matchText.indexOf('--'));\n    // `initial` and `inherit` as properties in a map should be replaced because\n    // these keywords are eagerly evaluated when the mixin becomes CSS Custom Properties,\n    // and would set the variable value, rather than carry the keyword to the `var()` usage.\n    let mixinValues = this._cssTextToMap(mixinAsProperties, true);\n    let combinedProps = mixinValues;\n    let mixinEntry = this._map.get(propertyName);\n    let oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.assign(Object.create(oldProps), mixinValues);\n    } else {\n      this._map.set(propertyName, combinedProps);\n    }\n    let out = [];\n    let p, v;\n    // set variables defined by current mixin\n    let needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);\n    }\n    if (needToInvalidate) {\n      this._invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = `${matchText};${prefix}`;\n    }\n    return `${prefix}${out.join('; ')};`;\n  }\n}\n\n/* exports */\n/* eslint-disable no-self-assign */\nApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;\nApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;\nApplyShim.prototype['transformCustomStyle'] =\n  ApplyShim.prototype.transformCustomStyle;\nApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;\nApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;\nApplyShim.prototype['transformTemplate'] =\n  ApplyShim.prototype.transformTemplate;\nApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;\n/* eslint-enable no-self-assign */\nObject.defineProperty(ApplyShim.prototype, 'invalidCallback', {\n  /** @return {?function(string)} */\n  get() {\n    return invalidCallback;\n  },\n  /** @param {?function(string)} cb */\n  set(cb) {\n    invalidCallback = cb;\n  },\n});\n\nexport default ApplyShim;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n/**\n * @const {!Object<string, !HTMLTemplateElement>}\n */\nconst templateMap = {};\nexport default templateMap;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\nimport templateMap from './template-map.js';\nimport {StyleNode} from './css-parse.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\n/*\n * Utilities for handling invalidating apply-shim mixins for a given template.\n *\n * The invalidation strategy involves keeping track of the \"current\" version of a template's mixins, and updating that count when a mixin is invalidated.\n * The template\n */\n\n/** @const {string} */\nconst CURRENT_VERSION = '_applyShimCurrentVersion';\n\n/** @const {string} */\nconst NEXT_VERSION = '_applyShimNextVersion';\n\n/** @const {string} */\nconst VALIDATING_VERSION = '_applyShimValidatingVersion';\n\n/**\n * @const {Promise<void>}\n */\nconst promise = Promise.resolve();\n\n/**\n * @param {string} elementName\n */\nexport function invalidate(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    invalidateTemplate(template);\n  }\n}\n\n/**\n * This function can be called multiple times to mark a template invalid\n * and signal that the style inside must be regenerated.\n *\n * Use `startValidatingTemplate` to begin an asynchronous validation cycle.\n * During that cycle, call `templateIsValidating` to see if the template must\n * be revalidated\n * @param {HTMLTemplateElement} template\n */\nexport function invalidateTemplate(template) {\n  // default the current version to 0\n  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;\n  // ensure the \"validating for\" flag exists\n  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;\n  // increment the next version\n  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValid(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValid(template);\n  }\n  return true;\n}\n\n/**\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValid(template) {\n  return template[CURRENT_VERSION] === template[NEXT_VERSION];\n}\n\n/**\n * @param {string} elementName\n * @return {boolean}\n */\nexport function isValidating(elementName) {\n  let template = templateMap[elementName];\n  if (template) {\n    return templateIsValidating(template);\n  }\n  return false;\n}\n\n/**\n * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.\n * If false, the template must be validated.\n * @param {HTMLTemplateElement} template\n * @return {boolean}\n */\nexport function templateIsValidating(template) {\n  return (\n    !templateIsValid(template) &&\n    template[VALIDATING_VERSION] === template[NEXT_VERSION]\n  );\n}\n\n/**\n * the template is marked as `validating` for one microtask so that all instances\n * found in the tree crawl of `applyStyle` will update themselves,\n * but the template will only be updated once.\n * @param {string} elementName\n */\nexport function startValidating(elementName) {\n  let template = templateMap[elementName];\n  startValidatingTemplate(template);\n}\n\n/**\n * Begin an asynchronous invalidation cycle.\n * This should be called after every validation of a template\n *\n * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`\n * @param {HTMLTemplateElement} template\n */\nexport function startValidatingTemplate(template) {\n  // remember that the current \"next version\" is the reason for this validation cycle\n  template[VALIDATING_VERSION] = template[NEXT_VERSION];\n  // however, there only needs to be one async task to clear the counters\n  if (!template._validating) {\n    template._validating = true;\n    promise.then(function () {\n      // sync the current version to let future invalidations cause a refresh cycle\n      template[CURRENT_VERSION] = template[NEXT_VERSION];\n      template._validating = false;\n    });\n  }\n}\n\n/**\n * @return {boolean}\n */\nexport function elementsAreInvalid() {\n  for (let elementName in templateMap) {\n    let template = templateMap[elementName];\n    if (!templateIsValid(template)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport ApplyShim from '../src/apply-shim.js';\nimport templateMap from '../src/template-map.js';\n// prettier-ignore\nimport {getIsExtends, toCssText, elementHasBuiltCss} from '../src/style-util.js';\nimport * as ApplyShimUtils from '../src/apply-shim-utils.js';\n// prettier-ignore\nimport {getComputedStyleValue, updateNativeProperties} from '../src/common-utils.js';\nimport {CustomStyleInterfaceInterface} from '../src/custom-style-interface.js'; // eslint-disable-line @typescript-eslint/no-unused-vars\n// prettier-ignore\nimport {nativeCssVariables, nativeShadow, cssBuild, disableRuntime} from '../src/style-settings.js';\n\n/** @const {ApplyShim} */\nconst applyShim = new ApplyShim();\n\nclass ApplyShimInterface {\n  constructor() {\n    /** @type {?CustomStyleInterfaceInterface} */\n    this.customStyleInterface = null;\n    applyShim['invalidCallback'] = ApplyShimUtils.invalidate;\n  }\n  ensure() {\n    if (this.customStyleInterface) {\n      return;\n    }\n    if (window.ShadyCSS.CustomStyleInterface) {\n      this.customStyleInterface = /** @type {!CustomStyleInterfaceInterface} */ (window\n        .ShadyCSS.CustomStyleInterface);\n      this.customStyleInterface['transformCallback'] = (style) => {\n        applyShim.transformCustomStyle(style);\n      };\n      this.customStyleInterface['validateCallback'] = () => {\n        requestAnimationFrame(() => {\n          if (this.customStyleInterface['enqueued']) {\n            this.flushCustomStyles();\n          }\n        });\n      };\n    }\n  }\n  /**\n   * @param {!HTMLTemplateElement} template\n   * @param {string} elementName\n   */\n  prepareTemplate(template, elementName) {\n    this.ensure();\n    if (elementHasBuiltCss(template)) {\n      return;\n    }\n    templateMap[elementName] = template;\n    let ast = applyShim.transformTemplate(template, elementName);\n    // save original style ast to use for revalidating instances\n    template['_styleAst'] = ast;\n  }\n  flushCustomStyles() {\n    this.ensure();\n    if (!this.customStyleInterface) {\n      return;\n    }\n    let styles = this.customStyleInterface['processStyles']();\n    if (!this.customStyleInterface['enqueued']) {\n      return;\n    }\n    for (let i = 0; i < styles.length; i++) {\n      let cs = styles[i];\n      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);\n      if (style) {\n        applyShim.transformCustomStyle(style);\n      }\n    }\n    this.customStyleInterface['enqueued'] = false;\n  }\n  /**\n   * @param {HTMLElement} element\n   * @param {Object=} properties\n   */\n  styleSubtree(element, properties) {\n    this.ensure();\n    if (properties) {\n      updateNativeProperties(element, properties);\n    }\n    if (element.shadowRoot) {\n      this.styleElement(element);\n      let shadowChildren =\n        /** @type {!ParentNode} */ (element.shadowRoot).children ||\n        element.shadowRoot.childNodes;\n      for (let i = 0; i < shadowChildren.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */ (shadowChildren[i]));\n      }\n    } else {\n      let children = element.children || element.childNodes;\n      for (let i = 0; i < children.length; i++) {\n        this.styleSubtree(/** @type {HTMLElement} */ (children[i]));\n      }\n    }\n  }\n  /**\n   * @param {HTMLElement} element\n   */\n  styleElement(element) {\n    this.ensure();\n    let {is} = getIsExtends(element);\n    let template = templateMap[is];\n    if (template && elementHasBuiltCss(template)) {\n      return;\n    }\n    if (template && !ApplyShimUtils.templateIsValid(template)) {\n      // only revalidate template once\n      if (!ApplyShimUtils.templateIsValidating(template)) {\n        this.prepareTemplate(template, is);\n        ApplyShimUtils.startValidatingTemplate(template);\n      }\n      // update this element instance\n      let root = element.shadowRoot;\n      if (root) {\n        let style = /** @type {HTMLStyleElement} */ (root.querySelector(\n          'style'\n        ));\n        if (style) {\n          // reuse the template's style ast, it has all the original css text\n          style['__cssRules'] = template['_styleAst'];\n          style.textContent = toCssText(template['_styleAst']);\n        }\n      }\n    }\n  }\n  /**\n   * @param {Object=} properties\n   */\n  styleDocument(properties) {\n    this.ensure();\n    this.styleSubtree(document.body, properties);\n  }\n}\n\nif (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {\n  const applyShimInterface = new ApplyShimInterface();\n  let CustomStyleInterface =\n    window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\n\n  /** @suppress {duplicate} */\n  window.ShadyCSS = {\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prepareTemplate(template, elementName, elementExtends) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.prepareTemplate(template, elementName);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     * @param {string=} elementExtends\n     */\n    prepareTemplateStyles(template, elementName, elementExtends) {\n      window.ShadyCSS.prepareTemplate(template, elementName, elementExtends);\n    },\n\n    /**\n     * @param {!HTMLTemplateElement} template\n     * @param {string} elementName\n     */\n    prepareTemplateDom(template, elementName) {}, // eslint-disable-line @typescript-eslint/no-unused-vars\n\n    /**\n     * @param {!HTMLElement} element\n     * @param {Object=} properties\n     */\n    styleSubtree(element, properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleSubtree(element, properties);\n    },\n\n    /**\n     * @param {!HTMLElement} element\n     */\n    styleElement(element) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleElement(element);\n    },\n\n    /**\n     * @param {Object=} properties\n     */\n    styleDocument(properties) {\n      applyShimInterface.flushCustomStyles();\n      applyShimInterface.styleDocument(properties);\n    },\n\n    /**\n     * @param {Element} element\n     * @param {string} property\n     * @return {string}\n     */\n    getComputedStyleValue(element, property) {\n      return getComputedStyleValue(element, property);\n    },\n\n    flushCustomStyles() {\n      applyShimInterface.flushCustomStyles();\n    },\n\n    nativeCss: nativeCssVariables,\n    nativeShadow: nativeShadow,\n    cssBuild: cssBuild,\n    disableRuntime: disableRuntime,\n  };\n\n  if (CustomStyleInterface) {\n    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface;\n  }\n}\n\nwindow.ShadyCSS.ApplyShim = applyShim;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * Module for adding listeners to a node for the following normalized\n * cross-platform \"gesture\" events:\n * - `down` - mouse or touch went down\n * - `up` - mouse or touch went up\n * - `tap` - mouse click or finger tap\n * - `track` - mouse drag or touch move\n *\n * @summary Module for adding cross-platform gesture event listeners.\n */\n\nimport './boot.js';\n\nimport { timeOut, microTask } from './async.js';\nimport { Debouncer } from './debounce.js';\nimport { passiveTouchGestures, cancelSyntheticClickEvents } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// detect native touch action support\nlet HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string';\nlet GESTURE_KEY = '__polymerGestures';\nlet HANDLED_OBJ = '__polymerGesturesHandled';\nlet TOUCH_ACTION = '__polymerGesturesTouchAction';\n// radius for tap and track\nlet TAP_DISTANCE = 25;\nlet TRACK_DISTANCE = 5;\n// number of last N track positions to keep\nlet TRACK_LENGTH = 2;\n\n// Disabling \"mouse\" handlers for 2500ms is enough\nlet MOUSE_TIMEOUT = 2500;\nlet MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];\n// an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons\nlet MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2];\nlet MOUSE_HAS_BUTTONS = (function() {\n  try {\n    return new MouseEvent('test', {buttons: 1}).buttons === 1;\n  } catch (e) {\n    return false;\n  }\n})();\n\n/**\n * @param {string} name Possible mouse event name\n * @return {boolean} true if mouse event, false if not\n */\nfunction isMouseEvent(name) {\n  return MOUSE_EVENTS.indexOf(name) > -1;\n}\n\n/* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n// check for passive event listeners\nlet supportsPassive = false;\n(function() {\n  try {\n    let opts = Object.defineProperty({}, 'passive', {get() {supportsPassive = true;}});\n    window.addEventListener('test', null, opts);\n    window.removeEventListener('test', null, opts);\n  } catch(e) {}\n})();\n\n/**\n * Generate settings for event listeners, dependant on `passiveTouchGestures`\n *\n * @param {string} eventName Event name to determine if `{passive}` option is\n *   needed\n * @return {{passive: boolean} | undefined} Options to use for addEventListener\n *   and removeEventListener\n */\nfunction PASSIVE_TOUCH(eventName) {\n  if (isMouseEvent(eventName) || eventName === 'touchend') {\n    return;\n  }\n  if (HAS_NATIVE_TA && supportsPassive && passiveTouchGestures) {\n    return {passive: true};\n  } else {\n    return;\n  }\n}\n\n// Check for touch-only devices\nlet IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);\n\n// keep track of any labels hit by the mouseCanceller\n/** @type {!Array<!HTMLLabelElement>} */\nconst clickedLabels = [];\n\n/** @type {!Object<boolean>} */\nconst labellable = {\n  'button': true,\n  'input': true,\n  'keygen': true,\n  'meter': true,\n  'output': true,\n  'textarea': true,\n  'progress': true,\n  'select': true\n};\n\n// Defined at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls:-the-disabled-attribute\n/** @type {!Object<boolean>} */\nconst canBeDisabled = {\n  'button': true,\n  'command': true,\n  'fieldset': true,\n  'input': true,\n  'keygen': true,\n  'optgroup': true,\n  'option': true,\n  'select': true,\n  'textarea': true\n};\n\n/**\n * @param {HTMLElement} el Element to check labelling status\n * @return {boolean} element can have labels\n */\nfunction canBeLabelled(el) {\n  return labellable[el.localName] || false;\n}\n\n/**\n * @param {HTMLElement} el Element that may be labelled.\n * @return {!Array<!HTMLLabelElement>} Relevant label for `el`\n */\nfunction matchingLabels(el) {\n  let labels = Array.prototype.slice.call(/** @type {HTMLInputElement} */(el).labels || []);\n  // IE doesn't have `labels` and Safari doesn't populate `labels`\n  // if element is in a shadowroot.\n  // In this instance, finding the non-ancestor labels is enough,\n  // as the mouseCancellor code will handle ancstor labels\n  if (!labels.length) {\n    labels = [];\n    try {\n      let root = el.getRootNode();\n      // if there is an id on `el`, check for all labels with a matching `for` attribute\n      if (el.id) {\n        let matching = root.querySelectorAll(`label[for = '${el.id}']`);\n        for (let i = 0; i < matching.length; i++) {\n          labels.push(/** @type {!HTMLLabelElement} */(matching[i]));\n        }\n      }\n    } catch (e) {\n      // Either:\n      // 1. el.getRootNode() failed.\n      // 2. el.id cannot be used in `querySelectorAll`\n      // In both cases, do nothing.\n    }\n  }\n  return labels;\n}\n\n// touch will make synthetic mouse events\n// `preventDefault` on touchend will cancel them,\n// but this breaks `<input>` focus and link clicks\n// disable mouse handlers for MOUSE_TIMEOUT ms after\n// a touchend to ignore synthetic mouse events\nlet mouseCanceller = function(mouseEvent) {\n  // Check for sourceCapabilities, used to distinguish synthetic events\n  // if mouseEvent did not come from a device that fires touch events,\n  // it was made by a real mouse and should be counted\n  // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents\n  let sc = mouseEvent.sourceCapabilities;\n  if (sc && !sc.firesTouchEvents) {\n    return;\n  }\n  // skip synthetic mouse events\n  mouseEvent[HANDLED_OBJ] = {skip: true};\n  // disable \"ghost clicks\"\n  if (mouseEvent.type === 'click') {\n    let clickFromLabel = false;\n    let path = getComposedPath(mouseEvent);\n    for (let i = 0; i < path.length; i++) {\n      if (path[i].nodeType === Node.ELEMENT_NODE) {\n        if (path[i].localName === 'label') {\n          clickedLabels.push(/** @type {!HTMLLabelElement} */ (path[i]));\n        } else if (canBeLabelled(/** @type {!HTMLElement} */ (path[i]))) {\n          let ownerLabels =\n              matchingLabels(/** @type {!HTMLElement} */ (path[i]));\n          // check if one of the clicked labels is labelling this element\n          for (let j = 0; j < ownerLabels.length; j++) {\n            clickFromLabel = clickFromLabel || clickedLabels.indexOf(ownerLabels[j]) > -1;\n          }\n        }\n      }\n      if (path[i] === POINTERSTATE.mouse.target) {\n        return;\n      }\n    }\n    // if one of the clicked labels was labelling the target element,\n    // this is not a ghost click\n    if (clickFromLabel) {\n      return;\n    }\n    mouseEvent.preventDefault();\n    mouseEvent.stopPropagation();\n  }\n};\n\n/**\n * @param {boolean=} setup True to add, false to remove.\n * @return {void}\n */\nfunction setupTeardownMouseCanceller(setup) {\n  let events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS;\n  for (let i = 0, en; i < events.length; i++) {\n    en = events[i];\n    if (setup) {\n      // reset clickLabels array\n      clickedLabels.length = 0;\n      document.addEventListener(en, mouseCanceller, true);\n    } else {\n      document.removeEventListener(en, mouseCanceller, true);\n    }\n  }\n}\n\nfunction ignoreMouse(e) {\n  if (!cancelSyntheticClickEvents) {\n    return;\n  }\n  if (!POINTERSTATE.mouse.mouseIgnoreJob) {\n    setupTeardownMouseCanceller(true);\n  }\n  let unset = function() {\n    setupTeardownMouseCanceller();\n    POINTERSTATE.mouse.target = null;\n    POINTERSTATE.mouse.mouseIgnoreJob = null;\n  };\n  POINTERSTATE.mouse.target = getComposedPath(e)[0];\n  POINTERSTATE.mouse.mouseIgnoreJob = Debouncer.debounce(\n        POINTERSTATE.mouse.mouseIgnoreJob\n      , timeOut.after(MOUSE_TIMEOUT)\n      , unset);\n}\n\n/**\n * @param {MouseEvent} ev event to test for left mouse button down\n * @return {boolean} has left mouse button down\n */\nfunction hasLeftMouseButton(ev) {\n  let type = ev.type;\n  // exit early if the event is not a mouse event\n  if (!isMouseEvent(type)) {\n    return false;\n  }\n  // ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)\n  // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)\n  if (type === 'mousemove') {\n    // allow undefined for testing events\n    let buttons = ev.buttons === undefined ? 1 : ev.buttons;\n    if ((ev instanceof window.MouseEvent) && !MOUSE_HAS_BUTTONS) {\n      buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0;\n    }\n    // buttons is a bitmask, check that the left button bit is set (1)\n    return Boolean(buttons & 1);\n  } else {\n    // allow undefined for testing events\n    let button = ev.button === undefined ? 0 : ev.button;\n    // ev.button is 0 in mousedown/mouseup/click for left button activation\n    return button === 0;\n  }\n}\n\nfunction isSyntheticClick(ev) {\n  if (ev.type === 'click') {\n    // ev.detail is 0 for HTMLElement.click in most browsers\n    if (ev.detail === 0) {\n      return true;\n    }\n    // in the worst case, check that the x/y position of the click is within\n    // the bounding box of the target of the event\n    // Thanks IE 10 >:(\n    let t = _findOriginalTarget(ev);\n    // make sure the target of the event is an element so we can use getBoundingClientRect,\n    // if not, just assume it is a synthetic click\n    if (!t.nodeType || /** @type {Element} */(t).nodeType !== Node.ELEMENT_NODE) {\n      return true;\n    }\n    let bcr = /** @type {Element} */(t).getBoundingClientRect();\n    // use page x/y to account for scrolling\n    let x = ev.pageX, y = ev.pageY;\n    // ev is a synthetic click if the position is outside the bounding box of the target\n    return !((x >= bcr.left && x <= bcr.right) && (y >= bcr.top && y <= bcr.bottom));\n  }\n  return false;\n}\n\nlet POINTERSTATE = {\n  mouse: {\n    target: null,\n    mouseIgnoreJob: null\n  },\n  touch: {\n    x: 0,\n    y: 0,\n    id: -1,\n    scrollDecided: false\n  }\n};\n\nfunction firstTouchAction(ev) {\n  let ta = 'auto';\n  let path = getComposedPath(ev);\n  for (let i = 0, n; i < path.length; i++) {\n    n = path[i];\n    if (n[TOUCH_ACTION]) {\n      ta = n[TOUCH_ACTION];\n      break;\n    }\n  }\n  return ta;\n}\n\nfunction trackDocument(stateObj, movefn, upfn) {\n  stateObj.movefn = movefn;\n  stateObj.upfn = upfn;\n  document.addEventListener('mousemove', movefn);\n  document.addEventListener('mouseup', upfn);\n}\n\nfunction untrackDocument(stateObj) {\n  document.removeEventListener('mousemove', stateObj.movefn);\n  document.removeEventListener('mouseup', stateObj.upfn);\n  stateObj.movefn = null;\n  stateObj.upfn = null;\n}\n\nif (cancelSyntheticClickEvents) {\n  // use a document-wide touchend listener to start the ghost-click prevention mechanism\n  // Use passive event listeners, if supported, to not affect scrolling performance\n  document.addEventListener('touchend', ignoreMouse, supportsPassive ? {passive: true} : false);\n}\n\n/**\n * Returns the composedPath for the given event.\n * @param {Event} event to process\n * @return {!Array<!EventTarget>} Path of the event\n */\nconst getComposedPath = window.ShadyDOM && window.ShadyDOM.noPatch ?\n  window.ShadyDOM.composedPath :\n  (event) => event.composedPath && event.composedPath() || [];\n\n/** @type {!Object<string, !GestureRecognizer>} */\nexport const gestures = {};\n\n/** @type {!Array<!GestureRecognizer>} */\nexport const recognizers = [];\n\n/**\n * Finds the element rendered on the screen at the provided coordinates.\n *\n * Similar to `document.elementFromPoint`, but pierces through\n * shadow roots.\n *\n * @param {number} x Horizontal pixel coordinate\n * @param {number} y Vertical pixel coordinate\n * @return {Element} Returns the deepest shadowRoot inclusive element\n * found at the screen position given.\n */\nexport function deepTargetFind(x, y) {\n  let node = document.elementFromPoint(x, y);\n  let next = node;\n  // this code path is only taken when native ShadowDOM is used\n  // if there is a shadowroot, it may have a node at x/y\n  // if there is not a shadowroot, exit the loop\n  while (next && next.shadowRoot && !window.ShadyDOM) {\n    // if there is a node at x/y in the shadowroot, look deeper\n    let oldNext = next;\n    next = next.shadowRoot.elementFromPoint(x, y);\n    // on Safari, elementFromPoint may return the shadowRoot host\n    if (oldNext === next) {\n      break;\n    }\n    if (next) {\n      node = next;\n    }\n  }\n  return node;\n}\n\n/**\n * a cheaper check than ev.composedPath()[0];\n *\n * @private\n * @param {Event|Touch} ev Event.\n * @return {EventTarget} Returns the event target.\n */\nfunction _findOriginalTarget(ev) {\n  const path = getComposedPath(/** @type {?Event} */ (ev));\n  // It shouldn't be, but sometimes path is empty (window on Safari).\n  return path.length > 0 ? path[0] : ev.target;\n}\n\n/**\n * @private\n * @param {Event} ev Event.\n * @return {void}\n */\nfunction _handleNative(ev) {\n  let handled;\n  let type = ev.type;\n  let node = ev.currentTarget;\n  let gobj = node[GESTURE_KEY];\n  if (!gobj) {\n    return;\n  }\n  let gs = gobj[type];\n  if (!gs) {\n    return;\n  }\n  if (!ev[HANDLED_OBJ]) {\n    ev[HANDLED_OBJ] = {};\n    if (type.slice(0, 5) === 'touch') {\n      ev = /** @type {TouchEvent} */(ev); // eslint-disable-line no-self-assign\n      let t = ev.changedTouches[0];\n      if (type === 'touchstart') {\n        // only handle the first finger\n        if (ev.touches.length === 1) {\n          POINTERSTATE.touch.id = t.identifier;\n        }\n      }\n      if (POINTERSTATE.touch.id !== t.identifier) {\n        return;\n      }\n      if (!HAS_NATIVE_TA) {\n        if (type === 'touchstart' || type === 'touchmove') {\n          _handleTouchAction(ev);\n        }\n      }\n    }\n  }\n  handled = ev[HANDLED_OBJ];\n  // used to ignore synthetic mouse events\n  if (handled.skip) {\n    return;\n  }\n  // reset recognizer state\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    if (gs[r.name] && !handled[r.name]) {\n      if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) {\n        r.reset();\n      }\n    }\n  }\n  // enforce gesture recognizer order\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    if (gs[r.name] && !handled[r.name]) {\n      handled[r.name] = true;\n      r[type](ev);\n    }\n  }\n}\n\n/**\n * @private\n * @param {TouchEvent} ev Event.\n * @return {void}\n */\nfunction _handleTouchAction(ev) {\n  let t = ev.changedTouches[0];\n  let type = ev.type;\n  if (type === 'touchstart') {\n    POINTERSTATE.touch.x = t.clientX;\n    POINTERSTATE.touch.y = t.clientY;\n    POINTERSTATE.touch.scrollDecided = false;\n  } else if (type === 'touchmove') {\n    if (POINTERSTATE.touch.scrollDecided) {\n      return;\n    }\n    POINTERSTATE.touch.scrollDecided = true;\n    let ta = firstTouchAction(ev);\n    let shouldPrevent = false;\n    let dx = Math.abs(POINTERSTATE.touch.x - t.clientX);\n    let dy = Math.abs(POINTERSTATE.touch.y - t.clientY);\n    if (!ev.cancelable) {\n      // scrolling is happening\n    } else if (ta === 'none') {\n      shouldPrevent = true;\n    } else if (ta === 'pan-x') {\n      shouldPrevent = dy > dx;\n    } else if (ta === 'pan-y') {\n      shouldPrevent = dx > dy;\n    }\n    if (shouldPrevent) {\n      ev.preventDefault();\n    } else {\n      prevent('track');\n    }\n  }\n}\n\n/**\n * Adds an event listener to a node for the given gesture type.\n *\n * @param {!EventTarget} node Node to add listener on\n * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n * @param {!function(!Event):void} handler Event listener function to call\n * @return {boolean} Returns true if a gesture event listener was added.\n */\nexport function addListener(node, evType, handler) {\n  if (gestures[evType]) {\n    _add(node, evType, handler);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Removes an event listener from a node for the given gesture type.\n *\n * @param {!EventTarget} node Node to remove listener from\n * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`\n * @param {!function(!Event):void} handler Event listener function previously passed to\n *  `addListener`.\n * @return {boolean} Returns true if a gesture event listener was removed.\n */\nexport function removeListener(node, evType, handler) {\n  if (gestures[evType]) {\n    _remove(node, evType, handler);\n    return true;\n  }\n  return false;\n}\n\n/**\n * automate the event listeners for the native events\n *\n * @private\n * @param {!EventTarget} node Node on which to add the event.\n * @param {string} evType Event type to add.\n * @param {function(!Event)} handler Event handler function.\n * @return {void}\n */\nfunction _add(node, evType, handler) {\n  let recognizer = gestures[evType];\n  let deps = recognizer.deps;\n  let name = recognizer.name;\n  let gobj = node[GESTURE_KEY];\n  if (!gobj) {\n    node[GESTURE_KEY] = gobj = {};\n  }\n  for (let i = 0, dep, gd; i < deps.length; i++) {\n    dep = deps[i];\n    // don't add mouse handlers on iOS because they cause gray selection overlays\n    if (IS_TOUCH_ONLY && isMouseEvent(dep) && dep !== 'click') {\n      continue;\n    }\n    gd = gobj[dep];\n    if (!gd) {\n      gobj[dep] = gd = {_count: 0};\n    }\n    if (gd._count === 0) {\n      node.addEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));\n    }\n    gd[name] = (gd[name] || 0) + 1;\n    gd._count = (gd._count || 0) + 1;\n  }\n  node.addEventListener(evType, handler);\n  if (recognizer.touchAction) {\n    setTouchAction(node, recognizer.touchAction);\n  }\n}\n\n/**\n * automate event listener removal for native events\n *\n * @private\n * @param {!EventTarget} node Node on which to remove the event.\n * @param {string} evType Event type to remove.\n * @param {function(!Event): void} handler Event handler function.\n * @return {void}\n */\nfunction _remove(node, evType, handler) {\n  let recognizer = gestures[evType];\n  let deps = recognizer.deps;\n  let name = recognizer.name;\n  let gobj = node[GESTURE_KEY];\n  if (gobj) {\n    for (let i = 0, dep, gd; i < deps.length; i++) {\n      dep = deps[i];\n      gd = gobj[dep];\n      if (gd && gd[name]) {\n        gd[name] = (gd[name] || 1) - 1;\n        gd._count = (gd._count || 1) - 1;\n        if (gd._count === 0) {\n          node.removeEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));\n        }\n      }\n    }\n  }\n  node.removeEventListener(evType, handler);\n}\n\n/**\n * Registers a new gesture event recognizer for adding new custom\n * gesture event types.\n *\n * @param {!GestureRecognizer} recog Gesture recognizer descriptor\n * @return {void}\n */\nexport function register(recog) {\n  recognizers.push(recog);\n  for (let i = 0; i < recog.emits.length; i++) {\n    gestures[recog.emits[i]] = recog;\n  }\n}\n\n/**\n * @private\n * @param {string} evName Event name.\n * @return {Object} Returns the gesture for the given event name.\n */\nfunction _findRecognizerByEvent(evName) {\n  for (let i = 0, r; i < recognizers.length; i++) {\n    r = recognizers[i];\n    for (let j = 0, n; j < r.emits.length; j++) {\n      n = r.emits[j];\n      if (n === evName) {\n        return r;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Sets scrolling direction on node.\n *\n * This value is checked on first move, thus it should be called prior to\n * adding event listeners.\n *\n * @param {!EventTarget} node Node to set touch action setting on\n * @param {string} value Touch action value\n * @return {void}\n */\nexport function setTouchAction(node, value) {\n  if (HAS_NATIVE_TA && node instanceof HTMLElement) {\n    // NOTE: add touchAction async so that events can be added in\n    // custom element constructors. Otherwise we run afoul of custom\n    // elements restriction against settings attributes (style) in the\n    // constructor.\n    microTask.run(() => {\n      node.style.touchAction = value;\n    });\n  }\n  node[TOUCH_ACTION] = value;\n}\n\n/**\n * Dispatches an event on the `target` element of `type` with the given\n * `detail`.\n * @private\n * @param {!EventTarget} target The element on which to fire an event.\n * @param {string} type The type of event to fire.\n * @param {!Object=} detail The detail object to populate on the event.\n * @return {void}\n */\nfunction _fire(target, type, detail) {\n  let ev = new Event(type, { bubbles: true, cancelable: true, composed: true });\n  ev.detail = detail;\n  wrap(/** @type {!Node} */(target)).dispatchEvent(ev);\n  // forward `preventDefault` in a clean way\n  if (ev.defaultPrevented) {\n    let preventer = detail.preventer || detail.sourceEvent;\n    if (preventer && preventer.preventDefault) {\n      preventer.preventDefault();\n    }\n  }\n}\n\n/**\n * Prevents the dispatch and default action of the given event name.\n *\n * @param {string} evName Event name.\n * @return {void}\n */\nexport function prevent(evName) {\n  let recognizer = _findRecognizerByEvent(evName);\n  if (recognizer.info) {\n    recognizer.info.prevent = true;\n  }\n}\n\n/**\n * Reset the 2500ms timeout on processing mouse input after detecting touch input.\n *\n * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.\n * This method should only be called during testing with simulated touch inputs.\n * Calling this method in production may cause duplicate taps or other Gestures.\n *\n * @return {void}\n */\nexport function resetMouseCanceller() {\n  if (POINTERSTATE.mouse.mouseIgnoreJob) {\n    POINTERSTATE.mouse.mouseIgnoreJob.flush();\n  }\n}\n\n/* eslint-disable valid-jsdoc */\n\nregister({\n  name: 'downup',\n  deps: ['mousedown', 'touchstart', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['mouseup', 'touchend']\n  },\n  emits: ['down', 'up'],\n\n  info: {\n    movefn: null,\n    upfn: null\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    untrackDocument(this.info);\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (!hasLeftMouseButton(e)) {\n      return;\n    }\n    let t = _findOriginalTarget(e);\n    let self = this;\n    let movefn = function movefn(e) {\n      if (!hasLeftMouseButton(e)) {\n        downupFire('up', t, e);\n        untrackDocument(self.info);\n      }\n    };\n    let upfn = function upfn(e) {\n      if (hasLeftMouseButton(e)) {\n        downupFire('up', t, e);\n      }\n      untrackDocument(self.info);\n    };\n    trackDocument(this.info, movefn, upfn);\n    downupFire('down', t, e);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    downupFire('down', _findOriginalTarget(e), e.changedTouches[0], e);\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    downupFire('up', _findOriginalTarget(e), e.changedTouches[0], e);\n  }\n});\n\n/**\n * @param {string} type\n * @param {EventTarget} target\n * @param {Event|Touch} event\n * @param {Event=} preventer\n * @return {void}\n */\nfunction downupFire(type, target, event, preventer) {\n  if (!target) {\n    return;\n  }\n  _fire(target, type, {\n    x: event.clientX,\n    y: event.clientY,\n    sourceEvent: event,\n    preventer: preventer,\n    prevent: function(e) {\n      return prevent(e);\n    }\n  });\n}\n\nregister({\n  name: 'track',\n  touchAction: 'none',\n  deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['mouseup', 'touchend']\n  },\n  emits: ['track'],\n\n  info: {\n    x: 0,\n    y: 0,\n    state: 'start',\n    started: false,\n    moves: [],\n    /** @this {GestureInfo} */\n    addMove: function(move) {\n      if (this.moves.length > TRACK_LENGTH) {\n        this.moves.shift();\n      }\n      this.moves.push(move);\n    },\n    movefn: null,\n    upfn: null,\n    prevent: false\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    this.info.state = 'start';\n    this.info.started = false;\n    this.info.moves = [];\n    this.info.x = 0;\n    this.info.y = 0;\n    this.info.prevent = false;\n    untrackDocument(this.info);\n  },\n\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (!hasLeftMouseButton(e)) {\n      return;\n    }\n    let t = _findOriginalTarget(e);\n    let self = this;\n    let movefn = function movefn(e) {\n      let x = e.clientX, y = e.clientY;\n      if (trackHasMovedEnough(self.info, x, y)) {\n        // first move is 'start', subsequent moves are 'move', mouseup is 'end'\n        self.info.state = self.info.started ? (e.type === 'mouseup' ? 'end' : 'track') : 'start';\n        if (self.info.state === 'start') {\n          // if and only if tracking, always prevent tap\n          prevent('tap');\n        }\n        self.info.addMove({x: x, y: y});\n        if (!hasLeftMouseButton(e)) {\n          // always fire \"end\"\n          self.info.state = 'end';\n          untrackDocument(self.info);\n        }\n        if (t) {\n          trackFire(self.info, t, e);\n        }\n        self.info.started = true;\n      }\n    };\n    let upfn = function upfn(e) {\n      if (self.info.started) {\n        movefn(e);\n      }\n\n      // remove the temporary listeners\n      untrackDocument(self.info);\n    };\n    // add temporary document listeners as mouse retargets\n    trackDocument(this.info, movefn, upfn);\n    this.info.x = e.clientX;\n    this.info.y = e.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    let ct = e.changedTouches[0];\n    this.info.x = ct.clientX;\n    this.info.y = ct.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchmove: function(e) {\n    let t = _findOriginalTarget(e);\n    let ct = e.changedTouches[0];\n    let x = ct.clientX, y = ct.clientY;\n    if (trackHasMovedEnough(this.info, x, y)) {\n      if (this.info.state === 'start') {\n        // if and only if tracking, always prevent tap\n        prevent('tap');\n      }\n      this.info.addMove({x: x, y: y});\n      trackFire(this.info, t, ct);\n      this.info.state = 'track';\n      this.info.started = true;\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    let t = _findOriginalTarget(e);\n    let ct = e.changedTouches[0];\n    // only trackend if track was started and not aborted\n    if (this.info.started) {\n      // reset started state on up\n      this.info.state = 'end';\n      this.info.addMove({x: ct.clientX, y: ct.clientY});\n      trackFire(this.info, t, ct);\n    }\n  }\n});\n\n/**\n * @param {!GestureInfo} info\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n */\nfunction trackHasMovedEnough(info, x, y) {\n  if (info.prevent) {\n    return false;\n  }\n  if (info.started) {\n    return true;\n  }\n  let dx = Math.abs(info.x - x);\n  let dy = Math.abs(info.y - y);\n  return (dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE);\n}\n\n/**\n * @param {!GestureInfo} info\n * @param {?EventTarget} target\n * @param {Touch} touch\n * @return {void}\n */\nfunction trackFire(info, target, touch) {\n  if (!target) {\n    return;\n  }\n  let secondlast = info.moves[info.moves.length - 2];\n  let lastmove = info.moves[info.moves.length - 1];\n  let dx = lastmove.x - info.x;\n  let dy = lastmove.y - info.y;\n  let ddx, ddy = 0;\n  if (secondlast) {\n    ddx = lastmove.x - secondlast.x;\n    ddy = lastmove.y - secondlast.y;\n  }\n  _fire(target, 'track', {\n    state: info.state,\n    x: touch.clientX,\n    y: touch.clientY,\n    dx: dx,\n    dy: dy,\n    ddx: ddx,\n    ddy: ddy,\n    sourceEvent: touch,\n    hover: function() {\n      return deepTargetFind(touch.clientX, touch.clientY);\n    }\n  });\n}\n\nregister({\n  name: 'tap',\n  deps: ['mousedown', 'click', 'touchstart', 'touchend'],\n  flow: {\n    start: ['mousedown', 'touchstart'],\n    end: ['click', 'touchend']\n  },\n  emits: ['tap'],\n  info: {\n    x: NaN,\n    y: NaN,\n    prevent: false\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @return {void}\n   */\n  reset: function() {\n    this.info.x = NaN;\n    this.info.y = NaN;\n    this.info.prevent = false;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  mousedown: function(e) {\n    if (hasLeftMouseButton(e)) {\n      this.info.x = e.clientX;\n      this.info.y = e.clientY;\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {MouseEvent} e\n   * @return {void}\n   */\n  click: function(e) {\n    if (hasLeftMouseButton(e)) {\n      trackForward(this.info, e);\n    }\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchstart: function(e) {\n    const touch = e.changedTouches[0];\n    this.info.x = touch.clientX;\n    this.info.y = touch.clientY;\n  },\n  /**\n   * @this {GestureRecognizer}\n   * @param {TouchEvent} e\n   * @return {void}\n   */\n  touchend: function(e) {\n    trackForward(this.info, e.changedTouches[0], e);\n  }\n});\n\n/**\n * @param {!GestureInfo} info\n * @param {Event | Touch} e\n * @param {Event=} preventer\n * @return {void}\n */\nfunction trackForward(info, e, preventer) {\n  let dx = Math.abs(e.clientX - info.x);\n  let dy = Math.abs(e.clientY - info.y);\n  // find original target from `preventer` for TouchEvents, or `e` for MouseEvents\n  let t = _findOriginalTarget((preventer || e));\n  if (!t || (canBeDisabled[/** @type {!HTMLElement} */(t).localName] && t.hasAttribute('disabled'))) {\n    return;\n  }\n  // dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`\n  if (isNaN(dx) || isNaN(dy) || (dx <= TAP_DISTANCE && dy <= TAP_DISTANCE) || isSyntheticClick(e)) {\n    // prevent taps from being generated if an event has canceled them\n    if (!info.prevent) {\n      _fire(t, 'tap', {\n        x: e.clientX,\n        y: e.clientY,\n        sourceEvent: e,\n        preventer: preventer\n      });\n    }\n  }\n}\n\n/* eslint-enable valid-jsdoc */\n\n/** @deprecated */\nexport const findOriginalTarget = _findOriginalTarget;\n\n/** @deprecated */\nexport const add = addListener;\n\n/** @deprecated */\nexport const remove = removeListener;\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { addListener, removeListener } from '../utils/gestures.js';\n\n/**\n * Element class mixin that provides API for adding Polymer's cross-platform\n * gesture events to nodes.\n *\n * The API is designed to be compatible with override points implemented\n * in `TemplateStamp` such that declarative event listeners in\n * templates will support gesture events when this mixin is applied along with\n * `TemplateStamp`.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides API for adding Polymer's\n *   cross-platform gesture events to nodes\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const GestureEventListeners = dedupingMixin((superClass) => {\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_GestureEventListeners}\n   */\n  class GestureEventListeners extends superClass {\n    /**\n     * Add the event listener to the node if it is a gestures event.\n     *\n     * @param {!EventTarget} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      if (!addListener(node, eventName, handler)) {\n        super._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n\n    /**\n     * Remove the event listener to the node if it is a gestures event.\n     *\n     * @param {!EventTarget} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     * @override\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      if (!removeListener(node, eventName, handler)) {\n        super._removeEventListenerFromNode(node, eventName, handler);\n      }\n    }\n  }\n\n  return GestureEventListeners;\n});\n", "/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport { PropertyAccessors } from './property-accessors.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\nconst HOST_DIR = /:host\\(:dir\\((ltr|rtl)\\)\\)/g;\nconst HOST_DIR_REPLACMENT = ':host([dir=\"$1\"])';\n\nconst EL_DIR = /([\\s\\w-#\\.\\[\\]\\*]*):dir\\((ltr|rtl)\\)/g;\nconst EL_DIR_REPLACMENT = ':host([dir=\"$2\"]) $1';\n\nconst DIR_CHECK = /:dir\\((?:ltr|rtl)\\)/;\n\nconst SHIM_SHADOW = Boolean(window['ShadyDOM'] && window['ShadyDOM']['inUse']);\n\n/**\n * @type {!Array<!Polymer_DirMixin>}\n */\nconst DIR_INSTANCES = [];\n\n/** @type {?MutationObserver} */\nlet observer = null;\n\nlet documentDir = '';\n\nfunction getRTL() {\n  documentDir = document.documentElement.getAttribute('dir');\n}\n\n/**\n * @param {!Polymer_DirMixin} instance Instance to set RTL status on\n */\nfunction setRTL(instance) {\n  if (!instance.__autoDirOptOut) {\n    const el = /** @type {!HTMLElement} */(instance);\n    el.setAttribute('dir', documentDir);\n  }\n}\n\nfunction updateDirection() {\n  getRTL();\n  documentDir = document.documentElement.getAttribute('dir');\n  for (let i = 0; i < DIR_INSTANCES.length; i++) {\n    setRTL(DIR_INSTANCES[i]);\n  }\n}\n\nfunction takeRecords() {\n  if (observer && observer.takeRecords().length) {\n    updateDirection();\n  }\n}\n\n/**\n * Element class mixin that allows elements to use the `:dir` CSS Selector to\n * have text direction specific styling.\n *\n * With this mixin, any stylesheet provided in the template will transform\n * `:dir` into `:host([dir])` and sync direction with the page via the\n * element's `dir` attribute.\n *\n * Elements can opt out of the global page text direction by setting the `dir`\n * attribute directly in `ready()` or in HTML.\n *\n * Caveats:\n * - Applications must set `<html dir=\"ltr\">` or `<html dir=\"rtl\">` to sync\n *   direction\n * - Automatic left-to-right or right-to-left styling is sync'd with the\n *   `<html>` element only.\n * - Changing `dir` at runtime is supported.\n * - Opting out of the global direction styling is permanent\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyAccessors\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const DirMixin = dedupingMixin((base) => {\n\n  if (!SHIM_SHADOW) {\n    if (!observer) {\n      getRTL();\n      observer = new MutationObserver(updateDirection);\n      observer.observe(document.documentElement, {attributes: true, attributeFilter: ['dir']});\n    }\n  }\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @private\n   */\n  const elementBase = PropertyAccessors(base);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_DirMixin}\n   */\n  class Dir extends elementBase {\n\n    /**\n     * @param {string} cssText .\n     * @param {string} baseURI .\n     * @return {string} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _processStyleText(cssText, baseURI) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      cssText = elementBase._processStyleText.call(this, cssText, baseURI);\n      if (!SHIM_SHADOW && DIR_CHECK.test(cssText)) {\n        cssText = this._replaceDirInCssText(cssText);\n        this.__activateDir = true;\n      }\n      return cssText;\n    }\n\n    /**\n     * Replace `:dir` in the given CSS text\n     *\n     * @param {string} text CSS text to replace DIR\n     * @return {string} Modified CSS\n     * @nocollapse\n     */\n    static _replaceDirInCssText(text) {\n      let replacedText = text;\n      replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT);\n      replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT);\n      return replacedText;\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__autoDirOptOut = false;\n    }\n\n    /**\n     * @override\n     * @suppress {invalidCasts} Closure doesn't understand that `this` is an\n     *     HTMLElement\n     * @return {void}\n     */\n    ready() {\n      super.ready();\n      this.__autoDirOptOut = /** @type {!HTMLElement} */(this).hasAttribute('dir');\n    }\n\n    /**\n     * @override\n     * @suppress {missingProperties} If it exists on elementBase, it can be\n     *   super'd\n     * @return {void}\n     */\n    connectedCallback() {\n      if (elementBase.prototype.connectedCallback) {\n        super.connectedCallback();\n      }\n      if (this.constructor.__activateDir) {\n        takeRecords();\n        DIR_INSTANCES.push(this);\n        setRTL(this);\n      }\n    }\n\n    /**\n     * @override\n     * @suppress {missingProperties} If it exists on elementBase, it can be\n     *   super'd\n     * @return {void}\n     */\n    disconnectedCallback() {\n      if (elementBase.prototype.disconnectedCallback) {\n        super.disconnectedCallback();\n      }\n      if (this.constructor.__activateDir) {\n        const idx = DIR_INSTANCES.indexOf(this);\n        if (idx > -1) {\n          DIR_INSTANCES.splice(idx, 1);\n        }\n      }\n    }\n  }\n\n  Dir.__activateDir = false;\n\n  return Dir;\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nfunction resolve() {\n  document.body.removeAttribute('unresolved');\n}\n\nif (document.readyState === 'interactive' || document.readyState === 'complete') {\n  resolve();\n} else {\n  window.addEventListener('DOMContentLoaded', resolve);\n}\n\nexport {};\n", "/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport './boot.js';\nimport {wrap} from './wrap.js';\n\nconst ShadyDOM = window.ShadyDOM;\nconst ShadyCSS = window.ShadyCSS;\n\n/**\n * Return true if node scope is correct.\n *\n * @param {!Element} node Node to check scope\n * @param {!Node} scope Scope reference\n * @return {boolean} True if node is in scope\n */\nfunction sameScope(node, scope) {\n  return wrap(node).getRootNode() === scope;\n}\n\n/**\n * Ensure that elements in a ShadowDOM container are scoped correctly.\n * This function is only needed when ShadyDOM is used and unpatched DOM APIs are used in third party code.\n * This can happen in noPatch mode or when specialized APIs like ranges or tables are used to mutate DOM.\n *\n * @param  {!Element} container Container element to scope\n * @param  {boolean=} shouldObserve if true, start a mutation observer for added nodes to the container\n * @return {?MutationObserver} Returns a new MutationObserver on `container` if `shouldObserve` is true.\n */\nexport function scopeSubtree(container, shouldObserve = false) {\n  // If using native ShadowDOM, abort\n  if (!ShadyDOM || !ShadyCSS) {\n    return null;\n  }\n  // ShadyCSS handles DOM mutations when ShadyDOM does not handle scoping itself\n  if (!ShadyDOM['handlesDynamicScoping']) {\n    return null;\n  }\n  const ScopingShim = ShadyCSS['ScopingShim'];\n  // if ScopingShim is not available, abort\n  if (!ScopingShim) {\n    return null;\n  }\n  // capture correct scope for container\n  const containerScope = ScopingShim['scopeForNode'](container);\n  const root = wrap(container).getRootNode();\n\n  const scopify = (node) => {\n    if (!sameScope(node, root)) {\n      return;\n    }\n    // NOTE: native qSA does not honor scoped DOM, but it is faster, and the same behavior as Polymer v1\n    const elements = Array.from(ShadyDOM['nativeMethods']['querySelectorAll'].call(node, '*'));\n    elements.push(node);\n    for (let i = 0; i < elements.length; i++) {\n      const el = elements[i];\n      if (!sameScope(el, root)) {\n        continue;\n      }\n      const currentScope = ScopingShim['currentScopeForNode'](el);\n      if (currentScope !== containerScope) {\n        if (currentScope !== '') {\n          ScopingShim['unscopeNode'](el, currentScope);\n        }\n        ScopingShim['scopeNode'](el, containerScope);\n      }\n    }\n  };\n\n  // scope everything in container\n  scopify(container);\n\n  if (shouldObserve) {\n    const mo = new MutationObserver((mxns) => {\n      for (let i = 0; i < mxns.length; i++) {\n        const mxn = mxns[i];\n        for (let j = 0; j < mxn.addedNodes.length; j++) {\n          const addedNode = mxn.addedNodes[j];\n          if (addedNode.nodeType === Node.ELEMENT_NODE) {\n            scopify(addedNode);\n          }\n        }\n      }\n    });\n    mo.observe(container, {childList: true, subtree: true});\n    return mo;\n  } else {\n    return null;\n  }\n}", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '@webcomponents/shadycss/entrypoints/apply-shim.js';\nimport { ElementMixin, builtCSS } from '../mixins/element-mixin.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { DirMixin } from '../mixins/dir-mixin.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport '../utils/render-status.js';\nimport '../utils/unresolved.js';\nimport { dom, matchesSelector } from './polymer.dom.js';\nimport { setTouchAction } from '../utils/gestures.js';\nimport { Debouncer } from '../utils/debounce.js';\nimport { timeOut, microTask } from '../utils/async.js';\nimport { get } from '../utils/path.js';\nimport { wrap } from '../utils/wrap.js';\nimport { scopeSubtree } from '../utils/scope-subtree.js';\nimport { legacyOptimizations, legacyNoObservedAttributes } from '../utils/settings.js';\nimport { findObservedAttributesGetter } from '../mixins/disable-upgrade-mixin.js';\nimport { register } from '../utils/telemetry.js';\n\nconst DISABLED_ATTR = 'disable-upgrade';\n\nlet styleInterface = window.ShadyCSS;\n\n/**\n * Element class mixin that provides Polymer's \"legacy\" API intended to be\n * backward-compatible to the greatest extent possible with the API\n * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements\n * defined using the `Polymer({...})` function.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin ElementMixin\n * @appliesMixin GestureEventListeners\n * @appliesMixin DirMixin\n * @property isAttached {boolean} Set to `true` in this element's\n *   `connectedCallback` and `false` in `disconnectedCallback`\n * @summary Element class mixin that provides Polymer's \"legacy\" API\n */\nexport const LegacyElementMixin = dedupingMixin((base) => {\n\n  // TODO(kschaaf): Note, the `@implements {Polymer_DirMixin}` is required here\n  // (rather than on legacyElementBase) for unknown reasons.\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @implements {Polymer_GestureEventListeners}\n   * @implements {Polymer_DirMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const GesturesElement = GestureEventListeners(ElementMixin(base));\n\n  // Note, the DirMixin does nothing if css is built so avoid including it\n  // in that case.\n\n  /**\n   * @constructor\n   * @extends {GesturesElement}\n   * @private\n   */\n  const legacyElementBase = builtCSS ? GesturesElement :\n    DirMixin(GesturesElement);\n\n  const observedAttributesGetter = findObservedAttributesGetter(legacyElementBase);\n\n  /**\n   * Map of simple names to touch action names\n   * @dict\n   */\n  const DIRECTION_MAP = {\n    'x': 'pan-x',\n    'y': 'pan-y',\n    'none': 'none',\n    'all': 'auto'\n  };\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {legacyElementBase}\n   * @implements {Polymer_LegacyElementMixin}\n   * @unrestricted\n   */\n  class LegacyElement extends legacyElementBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.isAttached;\n      /** @type {?WeakMap<!Element, !Object<string, !Function>>} */\n      this.__boundListeners;\n      /** @type {?Object<string, ?Function>} */\n      this._debouncers;\n      // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n      /** @type {boolean|undefined} */\n      this.__isUpgradeDisabled;\n      /** @type {boolean|undefined} */\n      this.__needsAttributesAtConnected;\n      /** @type {boolean|undefined} */\n      this._legacyForceObservedAttributes;\n    }\n\n    /**\n     * Forwards `importMeta` from the prototype (i.e. from the info object\n     * passed to `Polymer({...})`) to the static API.\n     *\n     * @return {!Object} The `import.meta` object set on the prototype\n     * @suppress {missingProperties} `this` is always in the instance in\n     *  closure for some reason even in a static method, rather than the class\n     * @nocollapse\n     */\n    static get importMeta() {\n      return this.prototype.importMeta;\n    }\n\n    /**\n     * Legacy callback called during the `constructor`, for overriding\n     * by the user.\n     * @override\n     * @return {void}\n     */\n    created() {}\n\n    /**\n     * Processes an attribute reaction when the `legacyNoObservedAttributes`\n     * setting is in use.\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @return {void}\n     */\n    __attributeReaction(name, old, value) {\n      if ((this.__dataAttributes && this.__dataAttributes[name]) || name === DISABLED_ATTR) {\n        this.attributeChangedCallback(name, old, value, null);\n      }\n    }\n\n    /**\n     * Sets the value of an attribute.\n     * @override\n     */\n    setAttribute(name, value) {\n      if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) {\n        const oldValue = this.getAttribute(name);\n        super.setAttribute(name, value);\n        // value coerced to String for closure's benefit\n        this.__attributeReaction(name, oldValue, String(value));\n      } else {\n        super.setAttribute(name, value);\n      }\n    }\n\n    /**\n     * Removes an attribute.\n     * @override\n     */\n    removeAttribute(name) {\n      if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) {\n        const oldValue = this.getAttribute(name);\n        super.removeAttribute(name);\n        this.__attributeReaction(name, oldValue, null);\n      } else {\n        super.removeAttribute(name);\n      }\n    }\n\n    // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n    static get observedAttributes() {\n      if (legacyNoObservedAttributes && !this.prototype._legacyForceObservedAttributes) {\n        // Ensure this element is property registered with the telemetry system.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n          this.__observedAttributes = [];\n          register(this.prototype);\n        }\n        return this.__observedAttributes;\n      } else {\n        return observedAttributesGetter.call(this).concat(DISABLED_ATTR);\n      }\n    }\n\n    // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n    // Prevent element from enabling properties when it's upgrade disabled.\n    // Normally overriding connectedCallback would be enough, but dom-* elements\n    /** @override */\n    _enableProperties() {\n      if (!this.__isUpgradeDisabled) {\n        super._enableProperties();\n      }\n    }\n\n    // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n    // If the element starts upgrade-disabled and a property is set for\n    // which an accessor exists, the default should not be applied.\n    // This additional check is needed because defaults are applied via\n    // `_initializeProperties` which is called after initial properties\n    // have been set when the element starts upgrade-disabled.\n    /** @override */\n    _canApplyPropertyDefault(property) {\n      return super._canApplyPropertyDefault(property) &&\n        !(this.__isUpgradeDisabled && this._isPropertyPending(property));\n    }\n\n    /**\n     * Provides an implementation of `connectedCallback`\n     * which adds Polymer legacy API's `attached` method.\n     * @return {void}\n     * @override\n     */\n    connectedCallback() {\n      if (this.__needsAttributesAtConnected) {\n        this._takeAttributes();\n      }\n      // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n      if (!this.__isUpgradeDisabled) {\n        super.connectedCallback();\n        this.isAttached = true;\n        this.attached();\n      }\n    }\n\n    /**\n     * Legacy callback called during `connectedCallback`, for overriding\n     * by the user.\n     * @override\n     * @return {void}\n     */\n    attached() {}\n\n    /**\n     * Provides an implementation of `disconnectedCallback`\n     * which adds Polymer legacy API's `detached` method.\n     * @return {void}\n     * @override\n     */\n    disconnectedCallback() {\n      // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n      if (!this.__isUpgradeDisabled) {\n        super.disconnectedCallback();\n        this.isAttached = false;\n        this.detached();\n      }\n    }\n\n    /**\n     * Legacy callback called during `disconnectedCallback`, for overriding\n     * by the user.\n     * @override\n     * @return {void}\n     */\n    detached() {}\n\n    /**\n     * Provides an override implementation of `attributeChangedCallback`\n     * which adds the Polymer legacy API's `attributeChanged` method.\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @override\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n        if (name == DISABLED_ATTR) {\n          // When disable-upgrade is removed, intialize properties and\n          // provoke connectedCallback if the element is already connected.\n          if (this.__isUpgradeDisabled && value == null) {\n            this._initializeProperties();\n            this.__isUpgradeDisabled = false;\n            if (wrap(this).isConnected) {\n              this.connectedCallback();\n            }\n          }\n        } else {\n          super.attributeChangedCallback(name, old, value, namespace);\n          this.attributeChanged(name, old, value);\n        }\n      }\n    }\n\n    /**\n     * Legacy callback called during `attributeChangedChallback`, for overriding\n     * by the user.\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @return {void}\n     * @override\n     */\n    attributeChanged(name, old, value) {} // eslint-disable-line no-unused-vars\n\n    /**\n     * Overrides the default `Polymer.PropertyEffects` implementation to\n     * add support for class initialization via the `_registered` callback.\n     * This is called only when the first instance of the element is created.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      // NOTE: Inlined for perf from version of DisableUpgradeMixin.\n      // Only auto-use disable-upgrade if legacyOptimizations is set.\n      if (legacyOptimizations && this.hasAttribute(DISABLED_ATTR)) {\n        this.__isUpgradeDisabled = true;\n      } else {\n        let proto = Object.getPrototypeOf(this);\n        if (!proto.hasOwnProperty(JSCompiler_renameProperty('__hasRegisterFinished', proto))) {\n          this._registered();\n          // backstop in case the `_registered` implementation does not set this\n          proto.__hasRegisterFinished = true;\n        }\n        super._initializeProperties();\n        this.root = /** @type {HTMLElement} */(this);\n        this.created();\n        // Pull all attribute values 1x if `legacyNoObservedAttributes` is set.\n        if (legacyNoObservedAttributes && !this._legacyForceObservedAttributes) {\n          if (this.hasAttributes()) {\n            this._takeAttributes();\n          // Element created from scratch or parser generated\n          } else if (!this.parentNode) {\n            this.__needsAttributesAtConnected = true;\n          }\n        }\n        // Ensure listeners are applied immediately so that they are\n        // added before declarative event listeners. This allows an element to\n        // decorate itself via an event prior to any declarative listeners\n        // seeing the event. Note, this ensures compatibility with 1.x ordering.\n        this._applyListeners();\n      }\n    }\n\n    _takeAttributes() {\n      const a = this.attributes;\n      for (let i=0, l=a.length; i < l; i++) {\n        const attr = a[i];\n        this.__attributeReaction(attr.name, null, attr.value);\n      }\n    }\n\n    /**\n     * Called automatically when an element is initializing.\n     * Users may override this method to perform class registration time\n     * work. The implementation should ensure the work is performed\n     * only once for the class.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _registered() {}\n\n    /**\n     * Overrides the default `Polymer.PropertyEffects` implementation to\n     * add support for installing `hostAttributes` and `listeners`.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      this._ensureAttributes();\n      super.ready();\n    }\n\n    /**\n     * Ensures an element has required attributes. Called when the element\n     * is being readied via `ready`. Users should override to set the\n     * element's required attributes. The implementation should be sure\n     * to check and not override existing attributes added by\n     * the user of the element. Typically, setting attributes should be left\n     * to the element user and not done here; reasonable exceptions include\n     * setting aria roles and focusability.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _ensureAttributes() {}\n\n    /**\n     * Adds element event listeners. Called when the element\n     * is being readied via `ready`. Users should override to\n     * add any required element event listeners.\n     * In performance critical elements, the work done here should be kept\n     * to a minimum since it is done before the element is rendered. In\n     * these elements, consider adding listeners asynchronously so as not to\n     * block render.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _applyListeners() {}\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features. To customize\n     * how properties are serialized to attributes for attribute bindings and\n     * `reflectToAttribute: true` properties as well as this method, override\n     * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.\n     *\n     * @param {*} value Value to deserialize\n     * @return {string | undefined} Serialized value\n     * @override\n     */\n    serialize(value) {\n      return this._serializeValue(value);\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features.  To customize\n     * how attributes are deserialized to properties for in\n     * `attributeChangedCallback`, override `_deserializeValue` method\n     * provided by `Polymer.PropertyAccessors`.\n     *\n     * @param {string} value String to deserialize\n     * @param {*} type Type to deserialize the string to\n     * @return {*} Returns the deserialized value in the `type` given.\n     * @override\n     */\n    deserialize(value, type) {\n      return this._deserializeValue(value, type);\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect.\n     * @param {*=} value Property value to reflect.\n     * @return {void}\n     * @override\n     */\n    reflectPropertyToAttribute(property, attribute, value) {\n      this._propertyToAttribute(property, attribute, value);\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features.\n     *\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @param {Element} node Element to set attribute to.\n     * @return {void}\n     * @override\n     */\n    serializeValueToAttribute(value, attribute, node) {\n      this._valueToNodeAttribute(/** @type {Element} */ (node || this), value, attribute);\n    }\n\n    /**\n     * Copies own properties (including accessor descriptors) from a source\n     * object to a target object.\n     *\n     * @param {Object} prototype Target object to copy properties to.\n     * @param {Object} api Source object to copy properties from.\n     * @return {Object} prototype object that was passed as first argument.\n     * @override\n     */\n    extend(prototype, api) {\n      if (!(prototype && api)) {\n        return prototype || api;\n      }\n      let n$ = Object.getOwnPropertyNames(api);\n      for (let i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n        let pd = Object.getOwnPropertyDescriptor(api, n);\n        if (pd) {\n          Object.defineProperty(prototype, n, pd);\n        }\n      }\n      return prototype;\n    }\n\n    /**\n     * Copies props from a source object to a target object.\n     *\n     * Note, this method uses a simple `for...in` strategy for enumerating\n     * properties.  To ensure only `ownProperties` are copied from source\n     * to target and that accessor implementations are copied, use `extend`.\n     *\n     * @param {!Object} target Target object to copy properties to.\n     * @param {!Object} source Source object to copy properties from.\n     * @return {!Object} Target object that was passed as first argument.\n     * @override\n     */\n    mixin(target, source) {\n      for (let i in source) {\n        target[i] = source[i];\n      }\n      return target;\n    }\n\n    /**\n     * Sets the prototype of an object.\n     *\n     * Note this method is provided as backward-compatible legacy API\n     * only.  It is not directly called by any Polymer features.\n     * @param {Object} object The object on which to set the prototype.\n     * @param {Object} prototype The prototype that will be set on the given\n     * `object`.\n     * @return {Object} Returns the given `object` with its prototype set\n     * to the given `prototype` object.\n     * @override\n     */\n    chainObject(object, prototype) {\n      if (object && prototype && object !== prototype) {\n        object.__proto__ = prototype;\n      }\n      return object;\n    }\n\n    /* **** Begin Template **** */\n\n    /**\n     * Calls `importNode` on the `content` of the `template` specified and\n     * returns a document fragment containing the imported content.\n     *\n     * @param {HTMLTemplateElement} template HTML template element to instance.\n     * @return {!DocumentFragment} Document fragment containing the imported\n     *   template content.\n     * @override\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    instanceTemplate(template) {\n      let content = this.constructor._contentForTemplate(template);\n      let dom = /** @type {!DocumentFragment} */\n        (document.importNode(content, true));\n      return dom;\n    }\n\n    /* **** Begin Events **** */\n\n\n\n    /**\n     * Dispatches a custom event with an optional detail value.\n     *\n     * @param {string} type Name of event type.\n     * @param {*=} detail Detail value containing event-specific\n     *   payload.\n     * @param {{ bubbles: (boolean|undefined), cancelable: (boolean|undefined),\n     *     composed: (boolean|undefined) }=}\n     *  options Object specifying options.  These may include:\n     *  `bubbles` (boolean, defaults to `true`),\n     *  `cancelable` (boolean, defaults to false), and\n     *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n     * @return {!Event} The new event that was fired.\n     * @override\n     */\n    fire(type, detail, options) {\n      options = options || {};\n      detail = (detail === null || detail === undefined) ? {} : detail;\n      let event = new Event(type, {\n        bubbles: options.bubbles === undefined ? true : options.bubbles,\n        cancelable: Boolean(options.cancelable),\n        composed: options.composed === undefined ? true: options.composed\n      });\n      event.detail = detail;\n      let node = options.node || this;\n      wrap(node).dispatchEvent(event);\n      return event;\n    }\n\n    /**\n     * Convenience method to add an event listener on a given element,\n     * late bound to a named method on this element.\n     *\n     * @param {?EventTarget} node Element to add event listener to.\n     * @param {string} eventName Name of event to listen for.\n     * @param {string} methodName Name of handler method on `this` to call.\n     * @return {void}\n     * @override\n     */\n    listen(node, eventName, methodName) {\n      node = /** @type {!EventTarget} */ (node || this);\n      let hbl = this.__boundListeners ||\n        (this.__boundListeners = new WeakMap());\n      let bl = hbl.get(node);\n      if (!bl) {\n        bl = {};\n        hbl.set(node, bl);\n      }\n      let key = eventName + methodName;\n      if (!bl[key]) {\n        bl[key] = this._addMethodEventListenerToNode(\n            /** @type {!Node} */ (node), eventName, methodName, this);\n      }\n    }\n\n    /**\n     * Convenience method to remove an event listener from a given element,\n     * late bound to a named method on this element.\n     *\n     * @param {?EventTarget} node Element to remove event listener from.\n     * @param {string} eventName Name of event to stop listening to.\n     * @param {string} methodName Name of handler method on `this` to not call\n     anymore.\n     * @return {void}\n     * @override\n     */\n    unlisten(node, eventName, methodName) {\n      node = /** @type {!EventTarget} */ (node || this);\n      let bl = this.__boundListeners &&\n          this.__boundListeners.get(/** @type {!Element} */ (node));\n      let key = eventName + methodName;\n      let handler = bl && bl[key];\n      if (handler) {\n        this._removeEventListenerFromNode(\n            /** @type {!Node} */ (node), eventName, handler);\n        bl[key] = /** @type {?} */ (null);\n      }\n    }\n\n    /**\n     * Override scrolling behavior to all direction, one direction, or none.\n     *\n     * Valid scroll directions:\n     *   - 'all': scroll in any direction\n     *   - 'x': scroll only in the 'x' direction\n     *   - 'y': scroll only in the 'y' direction\n     *   - 'none': disable scrolling for this node\n     *\n     * @param {string=} direction Direction to allow scrolling\n     * Defaults to `all`.\n     * @param {Element=} node Element to apply scroll direction setting.\n     * Defaults to `this`.\n     * @return {void}\n     * @override\n     */\n    setScrollDirection(direction, node) {\n      setTouchAction(\n          /** @type {!Element} */ (node || this),\n          DIRECTION_MAP[direction] || 'auto');\n    }\n    /* **** End Events **** */\n\n    /**\n     * Convenience method to run `querySelector` on this local DOM scope.\n     *\n     * This function calls `Polymer.dom(this.root).querySelector(slctr)`.\n     *\n     * @param {string} slctr Selector to run on this local DOM scope\n     * @return {Element} Element found by the selector, or null if not found.\n     * @override\n     */\n    $$(slctr) {\n      // Note, no need to `wrap` this because root is always patched\n      return this.root.querySelector(slctr);\n    }\n\n    /**\n     * Return the element whose local dom within which this element\n     * is contained. This is a shorthand for\n     * `this.getRootNode().host`.\n     * @this {Element}\n     * @return {?Node} The element whose local dom within which this element is\n     * contained.\n     * @override\n     */\n    get domHost() {\n      let root = wrap(this).getRootNode();\n      return (root instanceof DocumentFragment) ? /** @type {ShadowRoot} */ (root).host : root;\n    }\n\n    /**\n     * Force this element to distribute its children to its local dom.\n     * This should not be necessary as of Polymer 2.0.2 and is provided only\n     * for backwards compatibility.\n     * @return {void}\n     * @override\n     */\n    distributeContent() {\n      const thisEl = /** @type {Element} */ (this);\n      const domApi = /** @type {PolymerDomApi} */(dom(thisEl));\n      if (window.ShadyDOM && domApi.shadowRoot) {\n        ShadyDOM.flush();\n      }\n    }\n\n    /**\n     * Returns a list of nodes that are the effective childNodes. The effective\n     * childNodes list is the same as the element's childNodes except that\n     * any `<content>` elements are replaced with the list of nodes distributed\n     * to the `<content>`, the result of its `getDistributedNodes` method.\n     * @return {!Array<!Node>} List of effective child nodes.\n     * @suppress {invalidCasts} LegacyElementMixin must be applied to an\n     *     HTMLElement\n     * @override\n     */\n    getEffectiveChildNodes() {\n      const thisEl = /** @type {Element} */ (this);\n      const domApi = /** @type {PolymerDomApi} */ (dom(thisEl));\n      return domApi.getEffectiveChildNodes();\n    }\n\n    /**\n     * Returns a list of nodes distributed within this element that match\n     * `selector`. These can be dom children or elements distributed to\n     * children that are insertion points.\n     * @param {string} selector Selector to run.\n     * @return {!Array<!Node>} List of distributed elements that match selector.\n     * @suppress {invalidCasts} LegacyElementMixin must be applied to an\n     * HTMLElement\n     * @override\n     */\n    queryDistributedElements(selector) {\n      const thisEl = /** @type {Element} */ (this);\n      const domApi = /** @type {PolymerDomApi} */ (dom(thisEl));\n      return domApi.queryDistributedElements(selector);\n    }\n\n    /**\n     * Returns a list of elements that are the effective children. The effective\n     * children list is the same as the element's children except that\n     * any `<content>` elements are replaced with the list of elements\n     * distributed to the `<content>`.\n     *\n     * @return {!Array<!Node>} List of effective children.\n     * @override\n     */\n    getEffectiveChildren() {\n      let list = this.getEffectiveChildNodes();\n      return list.filter(function(/** @type {!Node} */ n) {\n        return (n.nodeType === Node.ELEMENT_NODE);\n      });\n    }\n\n    /**\n     * Returns a string of text content that is the concatenation of the\n     * text content's of the element's effective childNodes (the elements\n     * returned by <a href=\"#getEffectiveChildNodes>getEffectiveChildNodes</a>.\n     *\n     * @return {string} List of effective children.\n     * @override\n     */\n    getEffectiveTextContent() {\n      let cn = this.getEffectiveChildNodes();\n      let tc = [];\n      for (let i=0, c; (c = cn[i]); i++) {\n        if (c.nodeType !== Node.COMMENT_NODE) {\n          tc.push(c.textContent);\n        }\n      }\n      return tc.join('');\n    }\n\n    /**\n     * Returns the first effective childNode within this element that\n     * match `selector`. These can be dom child nodes or elements distributed\n     * to children that are insertion points.\n     * @param {string} selector Selector to run.\n     * @return {Node} First effective child node that matches selector.\n     * @override\n     */\n    queryEffectiveChildren(selector) {\n      let e$ = this.queryDistributedElements(selector);\n      return e$ && e$[0];\n    }\n\n    /**\n     * Returns a list of effective childNodes within this element that\n     * match `selector`. These can be dom child nodes or elements distributed\n     * to children that are insertion points.\n     * @param {string} selector Selector to run.\n     * @return {!Array<!Node>} List of effective child nodes that match\n     *     selector.\n     * @override\n     */\n    queryAllEffectiveChildren(selector) {\n      return this.queryDistributedElements(selector);\n    }\n\n    /**\n     * Returns a list of nodes distributed to this element's `<slot>`.\n     *\n     * If this element contains more than one `<slot>` in its local DOM,\n     * an optional selector may be passed to choose the desired content.\n     *\n     * @param {string=} slctr CSS selector to choose the desired\n     *   `<slot>`.  Defaults to `content`.\n     * @return {!Array<!Node>} List of distributed nodes for the `<slot>`.\n     * @override\n     */\n    getContentChildNodes(slctr) {\n      // Note, no need to `wrap` this because root is always\n      let content = this.root.querySelector(slctr || 'slot');\n      return content ?\n          /** @type {PolymerDomApi} */ (dom(content)).getDistributedNodes() :\n          [];\n    }\n\n    /**\n     * Returns a list of element children distributed to this element's\n     * `<slot>`.\n     *\n     * If this element contains more than one `<slot>` in its\n     * local DOM, an optional selector may be passed to choose the desired\n     * content.  This method differs from `getContentChildNodes` in that only\n     * elements are returned.\n     *\n     * @param {string=} slctr CSS selector to choose the desired\n     *   `<content>`.  Defaults to `content`.\n     * @return {!Array<!HTMLElement>} List of distributed nodes for the\n     *   `<slot>`.\n     * @suppress {invalidCasts}\n     * @override\n     */\n    getContentChildren(slctr) {\n      let children = /** @type {!Array<!HTMLElement>} */(this.getContentChildNodes(slctr).filter(function(n) {\n        return (n.nodeType === Node.ELEMENT_NODE);\n      }));\n      return children;\n    }\n\n    /**\n     * Checks whether an element is in this element's light DOM tree.\n     *\n     * @param {?Node} node The element to be checked.\n     * @return {boolean} true if node is in this element's light DOM tree.\n     * @suppress {invalidCasts} LegacyElementMixin must be applied to an\n     * HTMLElement\n     * @override\n     */\n    isLightDescendant(node) {\n      const thisNode = /** @type {Node} */ (this);\n      return thisNode !== node && wrap(thisNode).contains(node) &&\n        wrap(thisNode).getRootNode() === wrap(node).getRootNode();\n    }\n\n    /**\n     * Checks whether an element is in this element's local DOM tree.\n     *\n     * @param {!Element} node The element to be checked.\n     * @return {boolean} true if node is in this element's local DOM tree.\n     * @override\n     */\n    isLocalDescendant(node) {\n      return this.root === wrap(node).getRootNode();\n    }\n\n    /**\n     * No-op for backwards compatibility. This should now be handled by\n     * ShadyCss library.\n     * @param  {!Element} container Container element to scope\n     * @param  {boolean=} shouldObserve if true, start a mutation observer for added nodes to the container\n     * @return {?MutationObserver} Returns a new MutationObserver on `container` if `shouldObserve` is true.\n     * @override\n     */\n    scopeSubtree(container, shouldObserve = false) {\n      return scopeSubtree(container, shouldObserve);\n    }\n\n    /**\n     * Returns the computed style value for the given property.\n     * @param {string} property The css property name.\n     * @return {string} Returns the computed css property value for the given\n     * `property`.\n     * @suppress {invalidCasts} LegacyElementMixin must be applied to an\n     *     HTMLElement\n     * @override\n     */\n    getComputedStyleValue(property) {\n      return styleInterface.getComputedStyleValue(/** @type {!Element} */(this), property);\n    }\n\n    // debounce\n\n    /**\n     * Call `debounce` to collapse multiple requests for a named task into\n     * one invocation which is made after the wait time has elapsed with\n     * no new request.  If no wait time is given, the callback will be called\n     * at microtask timing (guaranteed before paint).\n     *\n     *     debouncedClickAction(e) {\n     *       // will not call `processClick` more than once per 100ms\n     *       this.debounce('click', function() {\n     *        this.processClick();\n     *       } 100);\n     *     }\n     *\n     * @param {string} jobName String to identify the debounce job.\n     * @param {function():void} callback Function that is called (with `this`\n     *   context) when the wait time elapses.\n     * @param {number=} wait Optional wait time in milliseconds (ms) after the\n     *   last signal that must elapse before invoking `callback`\n     * @return {!Object} Returns a debouncer object on which exists the\n     * following methods: `isActive()` returns true if the debouncer is\n     * active; `cancel()` cancels the debouncer if it is active;\n     * `flush()` immediately invokes the debounced callback if the debouncer\n     * is active.\n     * @override\n     */\n    debounce(jobName, callback, wait) {\n      this._debouncers = this._debouncers || {};\n      return this._debouncers[jobName] = Debouncer.debounce(\n            this._debouncers[jobName]\n          , wait > 0 ? timeOut.after(wait) : microTask\n          , callback.bind(this));\n    }\n\n    /**\n     * Returns whether a named debouncer is active.\n     *\n     * @param {string} jobName The name of the debouncer started with `debounce`\n     * @return {boolean} Whether the debouncer is active (has not yet fired).\n     * @override\n     */\n    isDebouncerActive(jobName) {\n      this._debouncers = this._debouncers || {};\n      let debouncer = this._debouncers[jobName];\n      return !!(debouncer && debouncer.isActive());\n    }\n\n    /**\n     * Immediately calls the debouncer `callback` and inactivates it.\n     *\n     * @param {string} jobName The name of the debouncer started with `debounce`\n     * @return {void}\n     * @override\n     */\n    flushDebouncer(jobName) {\n      this._debouncers = this._debouncers || {};\n      let debouncer = this._debouncers[jobName];\n      if (debouncer) {\n        debouncer.flush();\n      }\n    }\n\n    /**\n     * Cancels an active debouncer.  The `callback` will not be called.\n     *\n     * @param {string} jobName The name of the debouncer started with `debounce`\n     * @return {void}\n     * @override\n     */\n    cancelDebouncer(jobName) {\n      this._debouncers = this._debouncers || {};\n      let debouncer = this._debouncers[jobName];\n      if (debouncer) {\n        debouncer.cancel();\n      }\n    }\n\n    /**\n     * Runs a callback function asynchronously.\n     *\n     * By default (if no waitTime is specified), async callbacks are run at\n     * microtask timing, which will occur before paint.\n     *\n     * @param {!Function} callback The callback function to run, bound to\n     *     `this`.\n     * @param {number=} waitTime Time to wait before calling the\n     *   `callback`.  If unspecified or 0, the callback will be run at microtask\n     *   timing (before paint).\n     * @return {number} Handle that may be used to cancel the async job.\n     * @override\n     */\n    async(callback, waitTime) {\n      return waitTime > 0 ? timeOut.run(callback.bind(this), waitTime) :\n          ~microTask.run(callback.bind(this));\n    }\n\n    /**\n     * Cancels an async operation started with `async`.\n     *\n     * @param {number} handle Handle returned from original `async` call to\n     *   cancel.\n     * @return {void}\n     * @override\n     */\n    cancelAsync(handle) {\n      handle < 0 ? microTask.cancel(~handle) :\n          timeOut.cancel(handle);\n    }\n\n    // other\n\n    /**\n     * Convenience method for creating an element and configuring it.\n     *\n     * @param {string} tag HTML element tag to create.\n     * @param {Object=} props Object of properties to configure on the\n     *    instance.\n     * @return {!Element} Newly created and configured element.\n     * @override\n     */\n    create(tag, props) {\n      let elt = document.createElement(tag);\n      if (props) {\n        if (elt.setProperties) {\n          elt.setProperties(props);\n        } else {\n          for (let n in props) {\n            elt[n] = props[n];\n          }\n        }\n      }\n      return elt;\n    }\n\n    /**\n     * Polyfill for Element.prototype.matches, which is sometimes still\n     * prefixed.\n     *\n     * @param {string} selector Selector to test.\n     * @param {!Element=} node Element to test the selector against.\n     * @return {boolean} Whether the element matches the selector.\n     * @override\n     */\n    elementMatches(selector, node) {\n      return matchesSelector( (node || this), selector);\n    }\n\n    /**\n     * Toggles an HTML attribute on or off.\n     *\n     * @param {string} name HTML attribute name\n     * @param {boolean=} bool Boolean to force the attribute on or off.\n     *    When unspecified, the state of the attribute will be reversed.\n     * @return {boolean} true if the attribute now exists\n     * @override\n     */\n    toggleAttribute(name, bool) {\n      let node = /** @type {Element} */(this);\n      if (arguments.length === 3) {\n        node = /** @type {Element} */(arguments[2]);\n      }\n      if (arguments.length == 1) {\n        bool = !node.hasAttribute(name);\n      }\n      if (bool) {\n        wrap(node).setAttribute(name, '');\n        return true;\n      } else {\n        wrap(node).removeAttribute(name);\n        return false;\n      }\n    }\n\n\n    /**\n     * Toggles a CSS class on or off.\n     *\n     * @param {string} name CSS class name\n     * @param {boolean=} bool Boolean to force the class on or off.\n     *    When unspecified, the state of the class will be reversed.\n     * @param {Element=} node Node to target.  Defaults to `this`.\n     * @return {void}\n     * @override\n     */\n    toggleClass(name, bool, node) {\n      node = /** @type {Element} */ (node || this);\n      if (arguments.length == 1) {\n        bool = !node.classList.contains(name);\n      }\n      if (bool) {\n        node.classList.add(name);\n      } else {\n        node.classList.remove(name);\n      }\n    }\n\n    /**\n     * Cross-platform helper for setting an element's CSS `transform` property.\n     *\n     * @param {string} transformText Transform setting.\n     * @param {Element=} node Element to apply the transform to.\n     * Defaults to `this`\n     * @return {void}\n     * @override\n     */\n    transform(transformText, node) {\n      node = /** @type {Element} */ (node || this);\n      node.style.webkitTransform = transformText;\n      node.style.transform = transformText;\n    }\n\n    /**\n     * Cross-platform helper for setting an element's CSS `translate3d`\n     * property.\n     *\n     * @param {number|string} x X offset.\n     * @param {number|string} y Y offset.\n     * @param {number|string} z Z offset.\n     * @param {Element=} node Element to apply the transform to.\n     * Defaults to `this`.\n     * @return {void}\n     * @override\n     */\n    translate3d(x, y, z, node) {\n      node = /** @type {Element} */ (node || this);\n      this.transform('translate3d(' + x + ',' + y + ',' + z + ')', node);\n    }\n\n    /**\n     * Removes an item from an array, if it exists.\n     *\n     * If the array is specified by path, a change notification is\n     * generated, so that observers, data bindings and computed\n     * properties watching that path can update.\n     *\n     * If the array is passed directly, **no change\n     * notification is generated**.\n     *\n     * @param {string | !Array<number|string>} arrayOrPath Path to array from\n     *     which to remove the item\n     *   (or the array itself).\n     * @param {*} item Item to remove.\n     * @return {Array} Array containing item removed.\n     * @override\n     */\n    arrayDelete(arrayOrPath, item) {\n      let index;\n      if (Array.isArray(arrayOrPath)) {\n        index = arrayOrPath.indexOf(item);\n        if (index >= 0) {\n          return arrayOrPath.splice(index, 1);\n        }\n      } else {\n        let arr = get(this, arrayOrPath);\n        index = arr.indexOf(item);\n        if (index >= 0) {\n          return this.splice(arrayOrPath, index, 1);\n        }\n      }\n      return null;\n    }\n\n    // logging\n\n    /**\n     * Facades `console.log`/`warn`/`error` as override point.\n     *\n     * @param {string} level One of 'log', 'warn', 'error'\n     * @param {Array} args Array of strings or objects to log\n     * @return {void}\n     * @override\n     */\n    _logger(level, args) {\n      // accept ['foo', 'bar'] and [['foo', 'bar']]\n      if (Array.isArray(args) && args.length === 1 && Array.isArray(args[0])) {\n        args = args[0];\n      }\n      switch(level) {\n        case 'log':\n        case 'warn':\n        case 'error':\n          console[level](...args);\n      }\n    }\n\n    /**\n     * Facades `console.log` as an override point.\n     *\n     * @param {...*} args Array of strings or objects to log\n     * @return {void}\n     * @override\n     */\n    _log(...args) {\n      this._logger('log', args);\n    }\n\n    /**\n     * Facades `console.warn` as an override point.\n     *\n     * @param {...*} args Array of strings or objects to log\n     * @return {void}\n     * @override\n     */\n    _warn(...args) {\n      this._logger('warn', args);\n    }\n\n    /**\n     * Facades `console.error` as an override point.\n     *\n     * @param {...*} args Array of strings or objects to log\n     * @return {void}\n     * @override\n     */\n    _error(...args) {\n      this._logger('error', args);\n    }\n\n    /**\n     * Formats a message using the element type an a method name.\n     *\n     * @param {string} methodName Method name to associate with message\n     * @param {...*} args Array of strings or objects to log\n     * @return {!Array} Array with formatting information for `console`\n     *   logging.\n     * @override\n     */\n    _logf(methodName, ...args) {\n      return ['[%s::%s]', this.is, methodName, ...args];\n    }\n\n  }\n\n  LegacyElement.prototype.is = '';\n\n  return LegacyElement;\n});\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { LegacyElementMixin } from './legacy-element-mixin.js';\nimport { legacyOptimizations } from '../utils/settings.js';\n\nconst lifecycleProps = {\n  attached: true,\n  detached: true,\n  ready: true,\n  created: true,\n  beforeRegister: true,\n  registered: true,\n  attributeChanged: true,\n  listeners: true,\n  hostAttributes: true\n};\n\nconst excludeOnInfo = {\n  attached: true,\n  detached: true,\n  ready: true,\n  created: true,\n  beforeRegister: true,\n  registered: true,\n  attributeChanged: true,\n  behaviors: true,\n  _noAccessors: true\n};\n\nconst excludeOnBehaviors = Object.assign({\n  listeners: true,\n  hostAttributes: true,\n  properties: true,\n  observers: true,\n}, excludeOnInfo);\n\nfunction copyProperties(source, target, excludeProps) {\n  const noAccessors = source._noAccessors;\n  const propertyNames = Object.getOwnPropertyNames(source);\n  for (let i = 0; i < propertyNames.length; i++) {\n    let p = propertyNames[i];\n    if (p in excludeProps) {\n      continue;\n    }\n    if (noAccessors) {\n      target[p] = source[p];\n    } else {\n      let pd = Object.getOwnPropertyDescriptor(source, p);\n      if (pd) {\n        // ensure property is configurable so that a later behavior can\n        // re-configure it.\n        pd.configurable = true;\n        Object.defineProperty(target, p, pd);\n      }\n    }\n  }\n}\n\n/**\n * Applies a \"legacy\" behavior or array of behaviors to the provided class.\n *\n * Note: this method will automatically also apply the `LegacyElementMixin`\n * to ensure that any legacy behaviors can rely on legacy Polymer API on\n * the underlying element.\n *\n * @function\n * @template T\n * @param {!Object|!Array<!Object>} behaviors Behavior object or array of behaviors.\n * @param {function(new:T)} klass Element class.\n * @return {?} Returns a new Element class extended by the\n * passed in `behaviors` and also by `LegacyElementMixin`.\n * @suppress {invalidCasts, checkTypes}\n */\nexport function mixinBehaviors(behaviors, klass) {\n  return GenerateClassFromInfo({}, LegacyElementMixin(klass), behaviors);\n}\n\n// NOTE:\n// 1.x\n// Behaviors were mixed in *in reverse order* and de-duped on the fly.\n// The rule was that behavior properties were copied onto the element\n// prototype if and only if the property did not already exist.\n// Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:\n// (1), B, (2), A, (3) C. This means prototype properties win over\n// B properties win over A win over C. This mirrors what would happen\n// with inheritance if element extended B extended A extended C.\n//\n// Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting\n// `behaviors` array was [C, A, B].\n// Behavior lifecycle methods were called in behavior array order\n// followed by the element, e.g. (1) C.created, (2) A.created,\n// (3) B.created, (4) element.created. There was no support for\n// super, and \"super-behavior\" methods were callable only by name).\n//\n// 2.x\n// Behaviors are made into proper mixins which live in the\n// element's prototype chain. Behaviors are placed in the element prototype\n// eldest to youngest and de-duped youngest to oldest:\n// So, first [A, B, C, A, B] becomes [C, A, B] then,\n// the element prototype becomes (oldest) (1) PolymerElement, (2) class(C),\n// (3) class(A), (4) class(B), (5) class(Polymer({...})).\n// Result:\n// This means element properties win over B properties win over A win\n// over C. (same as 1.x)\n// If lifecycle is called (super then me), order is\n// (1) C.created, (2) A.created, (3) B.created, (4) element.created\n// (again same as 1.x)\nfunction applyBehaviors(proto, behaviors, lifecycle) {\n  for (let i=0; i<behaviors.length; i++) {\n    applyInfo(proto, behaviors[i], lifecycle, excludeOnBehaviors);\n  }\n}\n\nfunction applyInfo(proto, info, lifecycle, excludeProps) {\n  copyProperties(info, proto, excludeProps);\n  for (let p in lifecycleProps) {\n    if (info[p]) {\n      lifecycle[p] = lifecycle[p] || [];\n      lifecycle[p].push(info[p]);\n    }\n  }\n}\n\n/**\n * @param {Array} behaviors List of behaviors to flatten.\n * @param {Array=} list Target list to flatten behaviors into.\n * @param {Array=} exclude List of behaviors to exclude from the list.\n * @return {!Array} Returns the list of flattened behaviors.\n */\nfunction flattenBehaviors(behaviors, list, exclude) {\n  list = list || [];\n  for (let i=behaviors.length-1; i >= 0; i--) {\n    let b = behaviors[i];\n    if (b) {\n      if (Array.isArray(b)) {\n        flattenBehaviors(b, list);\n      } else {\n        // dedup\n        if (list.indexOf(b) < 0 && (!exclude || exclude.indexOf(b) < 0)) {\n          list.unshift(b);\n        }\n      }\n    } else {\n      console.warn('behavior is null, check for missing or 404 import');\n    }\n  }\n  return list;\n}\n\n/**\n * Copies property descriptors from source to target, overwriting all fields\n * of any previous descriptor for a property *except* for `value`, which is\n * merged in from the target if it does not exist on the source.\n *\n * @param {*} target Target properties object\n * @param {*} source Source properties object\n */\nfunction mergeProperties(target, source) {\n  for (const p in source) {\n    const targetInfo = target[p];\n    const sourceInfo = source[p];\n    if (!('value' in sourceInfo) && targetInfo && ('value' in targetInfo)) {\n      target[p] = Object.assign({value: targetInfo.value}, sourceInfo);\n    } else {\n      target[p] = sourceInfo;\n    }\n  }\n}\n\nconst LegacyElement = LegacyElementMixin(HTMLElement);\n\n/* Note about construction and extension of legacy classes.\n  [Changed in Q4 2018 to optimize performance.]\n\n  When calling `Polymer` or `mixinBehaviors`, the generated class below is\n  made. The list of behaviors was previously made into one generated class per\n  behavior, but this is no longer the case as behaviors are now called\n  manually. Note, there may *still* be multiple generated classes in the\n  element's prototype chain if extension is used with `mixinBehaviors`.\n\n  The generated class is directly tied to the info object and behaviors\n  used to create it. That list of behaviors is filtered so it's only the\n  behaviors not active on the superclass. In order to call through to the\n  entire list of lifecycle methods, it's important to call `super`.\n\n  The element's `properties` and `observers` are controlled via the finalization\n  mechanism provided by `PropertiesMixin`. `Properties` and `observers` are\n  collected by manually traversing the prototype chain and merging.\n\n  To limit changes, the `_registered` method is called via `_initializeProperties`\n  and not `_finalizeClass`.\n\n*/\n/**\n * @param {!PolymerInit} info Polymer info object\n * @param {function(new:HTMLElement)} Base base class to extend with info object\n * @param {Object=} behaviors behaviors to copy into the element\n * @return {function(new:HTMLElement)} Generated class\n * @suppress {checkTypes}\n * @private\n */\nfunction GenerateClassFromInfo(info, Base, behaviors) {\n\n  // manages behavior and lifecycle processing (filled in after class definition)\n  let behaviorList;\n  const lifecycle = {};\n\n  /** @private */\n  class PolymerGenerated extends Base {\n\n    // explicitly not calling super._finalizeClass\n    /** @nocollapse */\n    static _finalizeClass() {\n      // if calling via a subclass that hasn't been generated, pass through to super\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('generatedFrom', this))) {\n        // TODO(https://github.com/google/closure-compiler/issues/3240):\n        //     Change back to just super.methodCall()\n        Base._finalizeClass.call(this);\n      } else {\n        // interleave properties and observers per behavior and `info`\n        if (behaviorList) {\n          for (let i=0, b; i < behaviorList.length; i++) {\n            b = behaviorList[i];\n            if (b.properties) {\n              this.createProperties(b.properties);\n            }\n            if (b.observers) {\n              this.createObservers(b.observers, b.properties);\n            }\n          }\n        }\n        if (info.properties) {\n          this.createProperties(info.properties);\n        }\n        if (info.observers) {\n          this.createObservers(info.observers, info.properties);\n        }\n        // make sure to prepare the element template\n        this._prepareTemplate();\n      }\n    }\n\n    /** @nocollapse */\n    static get properties() {\n      const properties = {};\n      if (behaviorList) {\n        for (let i=0; i < behaviorList.length; i++) {\n          mergeProperties(properties, behaviorList[i].properties);\n        }\n      }\n      mergeProperties(properties, info.properties);\n      return properties;\n    }\n\n    /** @nocollapse */\n    static get observers() {\n      let observers = [];\n      if (behaviorList) {\n        for (let i=0, b; i < behaviorList.length; i++) {\n          b = behaviorList[i];\n          if (b.observers) {\n            observers = observers.concat(b.observers);\n          }\n        }\n      }\n      if (info.observers) {\n        observers = observers.concat(info.observers);\n      }\n      return observers;\n    }\n\n    /**\n     * @return {void}\n     */\n    created() {\n      super.created();\n      const list = lifecycle.created;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this);\n        }\n      }\n    }\n\n    /**\n     * @return {void}\n     */\n    _registered() {\n      /* NOTE: `beforeRegister` is called here for bc, but the behavior\n        is different than in 1.x. In 1.0, the method was called *after*\n        mixing prototypes together but *before* processing of meta-objects.\n        However, dynamic effects can still be set here and can be done either\n        in `beforeRegister` or `registered`. It is no longer possible to set\n        `is` in `beforeRegister` as you could in 1.x.\n      */\n      // only proceed if the generated class' prototype has not been registered.\n      const generatedProto = PolymerGenerated.prototype;\n      if (!generatedProto.hasOwnProperty(JSCompiler_renameProperty('__hasRegisterFinished', generatedProto))) {\n        generatedProto.__hasRegisterFinished = true;\n        // ensure superclass is registered first.\n        super._registered();\n        // copy properties onto the generated class lazily if we're optimizing,\n        if (legacyOptimizations) {\n          copyPropertiesToProto(generatedProto);\n        }\n        // make sure legacy lifecycle is called on the *element*'s prototype\n        // and not the generated class prototype; if the element has been\n        // extended, these are *not* the same.\n        const proto = Object.getPrototypeOf(this);\n        let list = lifecycle.beforeRegister;\n        if (list) {\n          for (let i=0; i < list.length; i++) {\n            list[i].call(proto);\n          }\n        }\n        list = lifecycle.registered;\n        if (list) {\n          for (let i=0; i < list.length; i++) {\n            list[i].call(proto);\n          }\n        }\n      }\n    }\n\n    /**\n     * @return {void}\n     */\n    _applyListeners() {\n      super._applyListeners();\n      const list = lifecycle.listeners;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          const listeners = list[i];\n          if (listeners) {\n            for (let l in listeners) {\n              this._addMethodEventListenerToNode(this, l, listeners[l]);\n            }\n          }\n        }\n      }\n    }\n\n    // note: exception to \"super then me\" rule;\n    // do work before calling super so that super attributes\n    // only apply if not already set.\n    /**\n     * @return {void}\n     */\n    _ensureAttributes() {\n      const list = lifecycle.hostAttributes;\n      if (list) {\n        for (let i=list.length-1; i >= 0; i--) {\n          const hostAttributes = list[i];\n          for (let a in hostAttributes) {\n              this._ensureAttribute(a, hostAttributes[a]);\n            }\n        }\n      }\n      super._ensureAttributes();\n    }\n\n    /**\n     * @return {void}\n     */\n    ready() {\n      super.ready();\n      let list = lifecycle.ready;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this);\n        }\n      }\n    }\n\n    /**\n     * @return {void}\n     */\n    attached() {\n      super.attached();\n      let list = lifecycle.attached;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this);\n        }\n      }\n    }\n\n    /**\n     * @return {void}\n     */\n    detached() {\n      super.detached();\n      let list = lifecycle.detached;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this);\n        }\n      }\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @return {void}\n     */\n    attributeChanged(name, old, value) {\n      super.attributeChanged();\n      let list = lifecycle.attributeChanged;\n      if (list) {\n        for (let i=0; i < list.length; i++) {\n          list[i].call(this, name, old, value);\n        }\n      }\n    }\n  }\n\n  // apply behaviors, note actual copying is done lazily at first instance creation\n  if (behaviors) {\n    // NOTE: ensure the behavior is extending a class with\n    // legacy element api. This is necessary since behaviors expect to be able\n    // to access 1.x legacy api.\n    if (!Array.isArray(behaviors)) {\n      behaviors = [behaviors];\n    }\n    let superBehaviors = Base.prototype.behaviors;\n    // get flattened, deduped list of behaviors *not* already on super class\n    behaviorList = flattenBehaviors(behaviors, null, superBehaviors);\n    PolymerGenerated.prototype.behaviors = superBehaviors ?\n      superBehaviors.concat(behaviors) : behaviorList;\n  }\n\n  const copyPropertiesToProto = (proto) => {\n    if (behaviorList) {\n      applyBehaviors(proto, behaviorList, lifecycle);\n    }\n    applyInfo(proto, info, lifecycle, excludeOnInfo);\n  };\n\n  // copy properties if we're not optimizing\n  if (!legacyOptimizations) {\n    copyPropertiesToProto(PolymerGenerated.prototype);\n  }\n\n  PolymerGenerated.generatedFrom = info;\n\n  return PolymerGenerated;\n}\n\n/**\n * Generates a class that extends `LegacyElement` based on the\n * provided info object.  Metadata objects on the `info` object\n * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used\n * for Polymer's meta-programming systems, and any functions are copied\n * to the generated class.\n *\n * Valid \"metadata\" values are as follows:\n *\n * `is`: String providing the tag name to register the element under. In\n * addition, if a `dom-module` with the same id exists, the first template\n * in that `dom-module` will be stamped into the shadow root of this element,\n * with support for declarative event listeners (`on-...`), Polymer data\n * bindings (`[[...]]` and `{{...}}`), and id-based node finding into\n * `this.$`.\n *\n * `properties`: Object describing property-related metadata used by Polymer\n * features (key: property names, value: object containing property metadata).\n * Valid keys in per-property metadata include:\n * - `type` (String|Number|Object|Array|...): Used by\n *   `attributeChangedCallback` to determine how string-based attributes\n *   are deserialized to JavaScript property values.\n * - `notify` (boolean): Causes a change in the property to fire a\n *   non-bubbling event called `<property>-changed`. Elements that have\n *   enabled two-way binding to the property use this event to observe changes.\n * - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *   To set a read-only property, use the private setter method\n *   `_setProperty(property, value)`.\n * - `observer` (string): Observer method name that will be called when\n *   the property changes. The arguments of the method are\n *   `(value, previousValue)`.\n * - `computed` (string): String describing method and dependent properties\n *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *   Computed properties are read-only by default and can only be changed\n *   via the return value of the computing method.\n *\n * `observers`: Array of strings describing multi-property observer methods\n *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).\n *\n * `listeners`: Object describing event listeners to be added to each\n *  instance of this element (key: event name, value: method name).\n *\n * `behaviors`: Array of additional `info` objects containing metadata\n * and callbacks in the same format as the `info` object here which are\n * merged into this element.\n *\n * `hostAttributes`: Object listing attributes to be applied to the host\n *  once created (key: attribute name, value: attribute value).  Values\n *  are serialized based on the type of the value.  Host attributes should\n *  generally be limited to attributes such as `tabIndex` and `aria-...`.\n *  Attributes in `hostAttributes` are only applied if a user-supplied\n *  attribute is not already present (attributes in markup override\n *  `hostAttributes`).\n *\n * In addition, the following Polymer-specific callbacks may be provided:\n * - `registered`: called after first instance of this element,\n * - `created`: called during `constructor`\n * - `attached`: called during `connectedCallback`\n * - `detached`: called during `disconnectedCallback`\n * - `ready`: called before first `attached`, after all properties of\n *   this element have been propagated to its template and all observers\n *   have run\n *\n * @param {!PolymerInit} info Object containing Polymer metadata and functions\n *   to become class methods.\n * @template T\n * @param {function(T):T} mixin Optional mixin to apply to legacy base class\n *   before extending with Polymer metaprogramming.\n * @return {function(new:HTMLElement)} Generated class\n */\nexport const Class = function(info, mixin) {\n  if (!info) {\n    console.warn('Polymer.Class requires `info` argument');\n  }\n  let klass = mixin ? mixin(LegacyElement) :\n      LegacyElement;\n  klass = GenerateClassFromInfo(info, klass, info.behaviors);\n  // decorate klass with registration info\n  klass.is = klass.prototype.is = info.is;\n  return klass;\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { Class } from './class.js';\n\nimport '../utils/boot.js';\n\n/**\n * Legacy class factory and registration helper for defining Polymer\n * elements.\n *\n * This method is equivalent to\n *\n *     import {Class} from '@polymer/polymer/lib/legacy/class.js';\n *     customElements.define(info.is, Class(info));\n *\n * See `Class` for details on valid legacy metadata format for `info`.\n *\n * @global\n * @override\n * @function\n * @param {!PolymerInit} info Object containing Polymer metadata and functions\n *   to become class methods.\n * @return {function(new: HTMLElement)} Generated class\n * @suppress {duplicate, invalidCasts, checkTypes}\n */\nconst Polymer = function(info) {\n  // if input is a `class` (aka a function with a prototype), use the prototype\n  // remember that the `constructor` will never be called\n  let klass;\n  if (typeof info === 'function') {\n    klass = info;\n  } else {\n    klass = Polymer.Class(info);\n  }\n  // Copy opt out for `legacyNoObservedAttributes` from info object to class.\n  if (info._legacyForceObservedAttributes) {\n    klass.prototype._legacyForceObservedAttributes = info._legacyForceObservedAttributes;\n  }\n  customElements.define(klass.is, /** @type {!HTMLElement} */(klass));\n  return klass;\n};\n\nPolymer.Class = Class;\n\nexport { Polymer };", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n *   _templatizerTemplate: HTMLTemplateElement,\n *   _parentModel: boolean,\n *   _instanceProps: Object,\n *   _forwardHostPropV2: Function,\n *   _notifyInstancePropV2: Function,\n *   ctor: function(new:TemplateInstanceBase, Object=)\n * }}\n */\nlet TemplatizerUser; // eslint-disable-line\n\n/**\n * The `Templatizer` behavior adds methods to generate instances of\n * templates that are each managed by an anonymous `PropertyEffects`\n * instance where data-bindings in the stamped template content are bound to\n * accessors on itself.\n *\n * This behavior is provided in Polymer 2.x-3.x as a hybrid-element convenience\n * only.  For non-hybrid usage, the `Templatize` library\n * should be used instead.\n *\n * Example:\n *\n *     import {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     this.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = this.stamp({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. light DOM\n *     dom(this).appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * Users of `Templatizer` may need to implement the following abstract\n * API's to determine how properties and paths from the host should be\n * forwarded into to instances:\n *\n *     _forwardHostPropV2: function(prop, value)\n *\n * Likewise, users may implement these additional abstract API's to determine\n * how instance-specific properties that change on the instance should be\n * forwarded out to the host, if necessary.\n *\n *     _notifyInstancePropV2: function(inst, prop, value)\n *\n * In order to determine which properties are instance-specific and require\n * custom notification via `_notifyInstanceProp`, define an `_instanceProps`\n * object containing keys for each instance prop, for example:\n *\n *     _instanceProps: {\n *       item: true,\n *       index: true\n *     }\n *\n * Any properties used in the template that are not defined in _instanceProp\n * will be forwarded out to the Templatize `owner` automatically.\n *\n * Users may also implement the following abstract function to show or\n * hide any DOM generated using `stamp`:\n *\n *     _showHideChildren: function(shouldHide)\n *\n * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior\n * as the implementations will need to differ from the callbacks required\n * by the 1.x Templatizer API due to changes in the `TemplateInstance` API\n * between versions 1.x and 2.x.\n *\n * @polymerBehavior\n */\nexport const Templatizer = {\n\n  /**\n   * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\n   * for the provided template.  This method should be called once per\n   * template to prepare an element for stamping the template, followed\n   * by `stamp` to create new instances of the template.\n   *\n   * @param {!HTMLTemplateElement} template Template to prepare\n   * @param {boolean=} mutableData When `true`, the generated class will skip\n   *   strict dirty-checking for objects and arrays (always consider them to\n   *   be \"dirty\"). Defaults to false.\n   * @return {void}\n   * @this {TemplatizerUser}\n   */\n  templatize(template, mutableData) {\n    this._templatizerTemplate = template;\n    this.ctor =\n        templatize(template, /** @type {!Polymer_PropertyEffects} */ (this), {\n          mutableData: Boolean(mutableData),\n          parentModel: this._parentModel,\n          instanceProps: this._instanceProps,\n          forwardHostProp: this._forwardHostPropV2,\n          notifyInstanceProp: this._notifyInstancePropV2\n        });\n  },\n\n  /**\n   * Creates an instance of the template prepared by `templatize`.  The object\n   * returned is an instance of the anonymous class generated by `templatize`\n   * whose `root` property is a document fragment containing newly cloned\n   * template content, and which has property accessors corresponding to\n   * properties referenced in template bindings.\n   *\n   * @param {Object=} model Object containing initial property values to\n   *   populate into the template bindings.\n   * @return {TemplateInstanceBase} Returns the created instance of\n   * the template prepared by `templatize`.\n   * @this {TemplatizerUser}\n   */\n  stamp(model) {\n    return new this.ctor(model);\n  },\n\n  /**\n   * Returns the template \"model\" (`TemplateInstance`) associated with\n   * a given element, which serves as the binding scope for the template\n   * instance the element is contained in.  A template model should be used\n   * to manipulate data associated with this template instance.\n   *\n   * @param {HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   * @this {TemplatizerUser}\n   */\n  modelForElement(el) {\n    return modelForElement(this._templatizerTemplate, el);\n  }\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { MutableData } from '../mixins/mutable-data.js';\n\nlet mutablePropertyChange;\n/** @suppress {missingProperties} */\n(() => {\n  mutablePropertyChange = MutableData._mutablePropertyChange;\n})();\n\n/**\n * Legacy element behavior to skip strict dirty-checking for objects and arrays,\n * (always consider them to be \"dirty\") for use on legacy API Polymer elements.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this behavior or enable the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * In order to make the dirty check strategy configurable, see\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @polymerBehavior\n * @summary Behavior to skip strict dirty-checking for objects and\n *   arrays\n */\nexport const MutableDataBehavior = {\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to provide option for skipping\n   * strict equality checking for Objects and Arrays.\n   *\n   * This method pulls the value to dirty check against from the `__dataTemp`\n   * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, true);\n  }\n};\n\n/**\n * Legacy element behavior to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `Polymer.PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this behavior or apply the\n * `Polymer.OptionalMutableDataBehavior`.\n *\n * While this behavior adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @polymerBehavior\n * @summary Behavior to optionally skip strict dirty-checking for objects and\n *   arrays\n */\nexport const OptionalMutableDataBehavior = {\n\n  properties: {\n    /**\n     * Instance-level flag for configuring the dirty-checking strategy\n     * for this element.  When true, Objects and Arrays will skip dirty\n     * checking, otherwise strict equality checking will be used.\n     */\n    mutableData: Boolean\n  },\n\n  /**\n   * Overrides `Polymer.PropertyEffects` to skip strict equality checking\n   * for Objects and Arrays.\n   *\n   * Pulls the value to dirty check against from the `__dataTemp` cache\n   * (rather than the normal `__data` cache) for Objects.  Since the temp\n   * cache is cleared at the end of a turn, this implementation allows\n   * side-effects of deep object changes to be processed by re-setting the\n   * same object (using the temp cache as an in-turn backstop to prevent\n   * cycles due to 2-way notification).\n   *\n   * @param {string} property Property name\n   * @param {*} value New property value\n   * @param {*} old Previous property value\n   * @return {boolean} Whether the property should be considered a change\n   * @protected\n   * @override\n   */\n  _shouldPropertyChange(property, value, old) {\n    return mutablePropertyChange(this, property, value, old, this.mutableData);\n  }\n};\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\n\n/**\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @implements {Polymer_OptionalMutableData}\n * @implements {Polymer_GestureEventListeners}\n * @private\n */\nconst domBindBase =\n  GestureEventListeners(\n    OptionalMutableData(\n      PropertyEffects(HTMLElement)));\n\n/**\n * Custom element to allow using Polymer's template features (data binding,\n * declarative event listeners, etc.) in the main document without defining\n * a new custom element.\n *\n * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n * element, which will immediately stamp the wrapped template into the main\n * document and bind elements to the `dom-bind` element itself as the\n * binding scope.\n *\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @appliesMixin OptionalMutableData\n * @appliesMixin GestureEventListeners\n * @extends {domBindBase}\n * @summary Custom element to allow using Polymer's template features (data\n *   binding, declarative event listeners, etc.) in the main document.\n */\nexport class DomBind extends domBindBase {\n\n  static get observedAttributes() { return ['mutable-data']; }\n\n  constructor() {\n    super();\n    if (strictTemplatePolicy) {\n      throw new Error(`strictTemplatePolicy: dom-bind not allowed`);\n    }\n    this.root = null;\n    this.$ = null;\n    this.__children = null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @override\n   * @param {string} name Name of attribute that changed\n   * @param {?string} old Old attribute value\n   * @param {?string} value New attribute value\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    // assumes only one observed attribute\n    this.mutableData = true;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    this.render();\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    this.__removeChildren();\n  }\n\n  __insertChildren() {\n    wrap(wrap(this).parentNode).insertBefore(this.root, this);\n  }\n\n  __removeChildren() {\n    if (this.__children) {\n      for (let i=0; i<this.__children.length; i++) {\n        this.root.appendChild(this.__children[i]);\n      }\n    }\n  }\n\n  /**\n   * Forces the element to render its content. This is typically only\n   * necessary to call if HTMLImports with the async attribute are used.\n   * @return {void}\n   */\n  render() {\n    let template;\n    if (!this.__children) {\n      template = /** @type {?HTMLTemplateElement} */(template || this.querySelector('template'));\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));\n          if (template) {\n            observer.disconnect();\n            this.render();\n          } else {\n            throw new Error('dom-bind requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return;\n      }\n      this.root = this._stampTemplate(\n        /** @type {!HTMLTemplateElement} */(template));\n      this.$ = this.root.$;\n      this.__children = [];\n      for (let n=this.root.firstChild; n; n=n.nextSibling) {\n        this.__children[this.__children.length] = n;\n      }\n      this._enableProperties();\n    }\n    this.__insertChildren();\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n}\n\ncustomElements.define('dom-bind', DomBind);\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { calculateSplices } from '../utils/array-splice.js';\nimport { ElementMixin } from '../mixins/element-mixin.js';\n\n/**\n * Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array such that path changes to the\n * master array (at the host) element or elsewhere via data-binding) are\n * correctly propagated to items in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * @polymer\n * @mixinFunction\n * @appliesMixin ElementMixin\n * @summary Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array\n */\nlet ArraySelectorMixin = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @private\n   */\n  let elementBase = ElementMixin(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_ArraySelectorMixin}\n   * @unrestricted\n   */\n  class ArraySelectorMixin extends elementBase {\n\n    static get properties() {\n      return {\n\n        /**\n         * An array containing items from which selection will be made.\n         */\n        items: {\n          type: Array,\n        },\n\n        /**\n         * When `true`, multiple items may be selected at once (in this case,\n         * `selected` is an array of currently selected items).  When `false`,\n         * only one item may be selected at a time.\n         */\n        multi: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When `multi` is true, this is an array that contains any selected.\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object|?Array<!Object>}\n         */\n        selected: {type: Object, notify: true},\n\n        /**\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object}\n         */\n        selectedItem: {type: Object, notify: true},\n\n        /**\n         * When `true`, calling `select` on an item that is already selected\n         * will deselect the item.\n         */\n        toggle: {type: Boolean, value: false}\n\n      };\n    }\n\n    static get observers() {\n      return ['__updateSelection(multi, items.*)'];\n    }\n\n    constructor() {\n      super();\n      this.__lastItems = null;\n      this.__lastMulti = null;\n      this.__selectedMap = null;\n    }\n\n    __updateSelection(multi, itemsInfo) {\n      let path = itemsInfo.path;\n      if (path == JSCompiler_renameProperty('items', this)) {\n        // Case 1 - items array changed, so diff against previous array and\n        // deselect any removed items and adjust selected indices\n        let newItems = itemsInfo.base || [];\n        let lastItems = this.__lastItems;\n        let lastMulti = this.__lastMulti;\n        if (multi !== lastMulti) {\n          this.clearSelection();\n        }\n        if (lastItems) {\n          let splices = calculateSplices(newItems, lastItems);\n          this.__applySplices(splices);\n        }\n        this.__lastItems = newItems;\n        this.__lastMulti = multi;\n      } else if (itemsInfo.path == `${JSCompiler_renameProperty('items', this)}.splices`) {\n        // Case 2 - got specific splice information describing the array mutation:\n        // deselect any removed items and adjust selected indices\n        this.__applySplices(itemsInfo.value.indexSplices);\n      } else {\n        // Case 3 - an array element was changed, so deselect the previous\n        // item for that index if it was previously selected\n        let part = path.slice(`${JSCompiler_renameProperty('items', this)}.`.length);\n        let idx = parseInt(part, 10);\n        if ((part.indexOf('.') < 0) && part == idx) {\n          this.__deselectChangedIdx(idx);\n        }\n      }\n    }\n\n    __applySplices(splices) {\n      let selected = this.__selectedMap;\n      // Adjust selected indices and mark removals\n      for (let i=0; i<splices.length; i++) {\n        let s = splices[i];\n        selected.forEach((idx, item) => {\n          if (idx < s.index) {\n            // no change\n          } else if (idx >= s.index + s.removed.length) {\n            // adjust index\n            selected.set(item, idx + s.addedCount - s.removed.length);\n          } else {\n            // remove index\n            selected.set(item, -1);\n          }\n        });\n        for (let j=0; j<s.addedCount; j++) {\n          let idx = s.index + j;\n          if (selected.has(this.items[idx])) {\n            selected.set(this.items[idx], idx);\n          }\n        }\n      }\n      // Update linked paths\n      this.__updateLinks();\n      // Remove selected items that were removed from the items array\n      let sidx = 0;\n      selected.forEach((idx, item) => {\n        if (idx < 0) {\n          if (this.multi) {\n            this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n          selected.delete(item);\n        } else {\n          sidx++;\n        }\n      });\n    }\n\n    __updateLinks() {\n      this.__dataLinkedPaths = {};\n      if (this.multi) {\n        let sidx = 0;\n        this.__selectedMap.forEach(idx => {\n          if (idx >= 0) {\n            this.linkPaths(\n                `${JSCompiler_renameProperty('items', this)}.${idx}`,\n                `${JSCompiler_renameProperty('selected', this)}.${sidx++}`);\n          }\n        });\n      } else {\n        this.__selectedMap.forEach(idx => {\n          this.linkPaths(\n              JSCompiler_renameProperty('selected', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n          this.linkPaths(\n              JSCompiler_renameProperty('selectedItem', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n        });\n      }\n    }\n\n    /**\n     * Clears the selection state.\n     * @override\n     * @return {void}\n     */\n    clearSelection() {\n      // Unbind previous selection\n      this.__dataLinkedPaths = {};\n      // The selected map stores 3 pieces of information:\n      // key: items array object\n      // value: items array index\n      // order: selected array index\n      this.__selectedMap = new Map();\n      // Initialize selection\n      this.selected = this.multi ? [] : null;\n      this.selectedItem = null;\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isSelected(item) {\n      return this.__selectedMap.has(item);\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isIndexSelected(idx) {\n      return this.isSelected(this.items[idx]);\n    }\n\n    __deselectChangedIdx(idx) {\n      let sidx = this.__selectedIndexForItemIndex(idx);\n      if (sidx >= 0) {\n        let i = 0;\n        this.__selectedMap.forEach((idx, item) => {\n          if (sidx == i++) {\n            this.deselect(item);\n          }\n        });\n      }\n    }\n\n    __selectedIndexForItemIndex(idx) {\n      let selected = this.__dataLinkedPaths[`${JSCompiler_renameProperty('items', this)}.${idx}`];\n      if (selected) {\n        return parseInt(selected.slice(`${JSCompiler_renameProperty('selected', this)}.`.length), 10);\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to deselect\n     * @return {void}\n     */\n    deselect(item) {\n      let idx = this.__selectedMap.get(item);\n      if (idx >= 0) {\n        this.__selectedMap.delete(item);\n        let sidx;\n        if (this.multi) {\n          sidx = this.__selectedIndexForItemIndex(idx);\n        }\n        this.__updateLinks();\n        if (this.multi) {\n          this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n        } else {\n          this.selected = this.selectedItem = null;\n        }\n      }\n    }\n\n    /**\n     * Deselects the given index if it is already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to deselect\n     * @return {void}\n     */\n    deselectIndex(idx) {\n      this.deselect(this.items[idx]);\n    }\n\n    /**\n     * Selects the given item.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to select\n     * @return {void}\n     */\n    select(item) {\n      this.selectIndex(this.items.indexOf(item));\n    }\n\n    /**\n     * Selects the given index.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to select\n     * @return {void}\n     */\n    selectIndex(idx) {\n      let item = this.items[idx];\n      if (!this.isSelected(item)) {\n        if (!this.multi) {\n          this.__selectedMap.clear();\n        }\n        this.__selectedMap.set(item, idx);\n        this.__updateLinks();\n        if (this.multi) {\n          this.push(JSCompiler_renameProperty('selected', this), item);\n        } else {\n          this.selected = this.selectedItem = item;\n        }\n      } else if (this.toggle) {\n        this.deselectIndex(idx);\n      }\n    }\n\n  }\n\n  return ArraySelectorMixin;\n\n});\n\n// export mixin\nexport { ArraySelectorMixin };\n\n/**\n * @constructor\n * @extends {PolymerElement}\n * @implements {Polymer_ArraySelectorMixin}\n * @private\n */\nlet baseArraySelector = ArraySelectorMixin(PolymerElement);\n\n/**\n * Element implementing the `ArraySelector` mixin, which records\n * dynamic associations between item paths in a master `items` array and a\n * `selected` array such that path changes to the master array (at the host)\n * element or elsewhere via data-binding) are correctly propagated to items\n * in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * Example:\n *\n * ```js\n * import {PolymerElement} from '@polymer/polymer';\n * import '@polymer/polymer/lib/elements/array-selector.js';\n *\n * class EmployeeList extends PolymerElement {\n *   static get _template() {\n *     return html`\n *         <div> Employee list: </div>\n *         <dom-repeat id=\"employeeList\" items=\"{{employees}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *               <div>Last name: <span>{{item.last}}</span></div>\n *               <button on-click=\"toggleSelection\">Select</button>\n *           </template>\n *         </dom-repeat>\n *\n *         <array-selector id=\"selector\"\n *                         items=\"{{employees}}\"\n *                         selected=\"{{selected}}\"\n *                         multi toggle></array-selector>\n *\n *         <div> Selected employees: </div>\n *         <dom-repeat items=\"{{selected}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *             <div>Last name: <span>{{item.last}}</span></div>\n *           </template>\n *         </dom-repeat>`;\n *   }\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n *   toggleSelection(e) {\n *     const item = this.$.employeeList.itemForElement(e.target);\n *     this.$.selector.select(item);\n *   }\n * }\n * ```\n *\n * @polymer\n * @customElement\n * @extends {baseArraySelector}\n * @appliesMixin ArraySelectorMixin\n * @summary Custom element that links paths between an input `items` array and\n *   an output `selected` item or array based on calls to its selection API.\n */\nclass ArraySelector extends baseArraySelector {\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'array-selector'; }\n  static get template() { return null; }\n}\ncustomElements.define(ArraySelector.is, ArraySelector);\nexport { ArraySelector };\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { LegacyElementMixin } from './lib/legacy/legacy-element-mixin.js';\nexport { Polymer } from  './lib/legacy/polymer-fn.js';\n/* template elements */\nimport './lib/legacy/templatizer-behavior.js';\nimport './lib/elements/dom-bind.js';\nimport './lib/elements/dom-repeat.js';\nimport './lib/elements/dom-if.js';\nimport './lib/elements/array-selector.js';\n/* custom-style */\nimport './lib/elements/custom-style.js';\n/* bc behaviors */\nimport './lib/legacy/mutable-data-behavior.js';\n/* import html-tag to export html */\nexport { html } from './lib/utils/html-tag.js';\n\n// bc\nexport const Base = LegacyElementMixin(HTMLElement).prototype;\n"],
  "mappings": "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",
  "names": ["p", "wrap", "p", "prefix", "register", "register", "movefn", "e", "upfn", "GestureEventListeners", "ShadyDOM", "LegacyElement", "dom", "p", "p", "Base", "observer", "ArraySelectorMixin", "idx"]
}
