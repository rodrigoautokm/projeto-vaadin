{
  "version": 3,
  "sources": ["../../@vaadin/combo-box/src/vaadin-combo-box-data-provider-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2015 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * @polymerMixin\n */\nexport const ComboBoxDataProviderMixin = (superClass) =>\n  class DataProviderMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Number of items fetched at a time from the dataprovider.\n         * @attr {number} page-size\n         * @type {number}\n         */\n        pageSize: {\n          type: Number,\n          value: 50,\n          observer: '_pageSizeChanged',\n        },\n\n        /**\n         * Total number of items.\n         * @type {number | undefined}\n         */\n        size: {\n          type: Number,\n          observer: '_sizeChanged',\n        },\n\n        /**\n         * Function that provides items lazily. Receives arguments `params`, `callback`\n         *\n         * `params.page` Requested page index\n         *\n         * `params.pageSize` Current page size\n         *\n         * `params.filter` Currently applied filter\n         *\n         * `callback(items, size)` Callback function with arguments:\n         *   - `items` Current page of items\n         *   - `size` Total number of items.\n         * @type {ComboBoxDataProvider | undefined}\n         */\n        dataProvider: {\n          type: Object,\n          observer: '_dataProviderChanged',\n        },\n\n        /** @private */\n        _pendingRequests: {\n          value: () => {\n            return {};\n          },\n        },\n\n        /** @private */\n        __placeHolder: {\n          value: new ComboBoxPlaceholder(),\n        },\n\n        /** @private */\n        __previousDataProviderFilter: {\n          type: String,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '_dataProviderFilterChanged(filter)',\n        '_warnDataProviderValue(dataProvider, value)',\n        '_ensureFirstPage(opened)',\n      ];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this._scroller.addEventListener('index-requested', (e) => {\n        const index = e.detail.index;\n        const currentScrollerPos = e.detail.currentScrollerPos;\n        const allowedIndexRange = Math.floor(this.pageSize * 1.5);\n\n        // Ignores the indexes, which are being re-sent during scrolling reset,\n        // if the corresponding page is around the current scroller position.\n        // Otherwise, there might be a last pages duplicates, which cause the\n        // loading indicator hanging and blank items\n        if (this._shouldSkipIndex(index, allowedIndexRange, currentScrollerPos)) {\n          return;\n        }\n\n        if (index !== undefined) {\n          const page = this._getPageForIndex(index);\n          if (this._shouldLoadPage(page)) {\n            this._loadPage(page);\n          }\n        }\n      });\n    }\n\n    /** @private */\n    _dataProviderFilterChanged(filter) {\n      if (this.__previousDataProviderFilter === undefined && filter === '') {\n        this.__previousDataProviderFilter = filter;\n        return;\n      }\n\n      if (this.__previousDataProviderFilter !== filter) {\n        this.__previousDataProviderFilter = filter;\n\n        this._pendingRequests = {};\n        // Immediately mark as loading if this refresh leads to re-fetching pages\n        // This prevents some issues with the properties below triggering\n        // observers that also rely on the loading state\n        this.loading = this._shouldFetchData();\n        // Reset size and internal loading state\n        this.size = undefined;\n\n        this.clearCache();\n      }\n    }\n\n    /** @private */\n    _shouldFetchData() {\n      if (!this.dataProvider) {\n        return false;\n      }\n\n      return this.opened || (this.filter && this.filter.length);\n    }\n\n    /** @private */\n    _ensureFirstPage(opened) {\n      if (opened && this._shouldLoadPage(0)) {\n        this._loadPage(0);\n      }\n    }\n\n    /** @private */\n    _shouldSkipIndex(index, allowedIndexRange, currentScrollerPos) {\n      return (\n        currentScrollerPos !== 0 &&\n        index >= currentScrollerPos - allowedIndexRange &&\n        index <= currentScrollerPos + allowedIndexRange\n      );\n    }\n\n    /** @private */\n    _shouldLoadPage(page) {\n      if (!this.filteredItems || this._forceNextRequest) {\n        this._forceNextRequest = false;\n        return true;\n      }\n\n      const loadedItem = this.filteredItems[page * this.pageSize];\n      if (loadedItem !== undefined) {\n        return loadedItem instanceof ComboBoxPlaceholder;\n      }\n      return this.size === undefined;\n    }\n\n    /** @private */\n    _loadPage(page) {\n      // Make sure same page isn't requested multiple times.\n      if (this._pendingRequests[page] || !this.dataProvider) {\n        return;\n      }\n\n      const params = {\n        page,\n        pageSize: this.pageSize,\n        filter: this.filter,\n      };\n\n      const callback = (items, size) => {\n        if (this._pendingRequests[page] !== callback) {\n          return;\n        }\n\n        const filteredItems = this.filteredItems ? [...this.filteredItems] : [];\n        filteredItems.splice(params.page * params.pageSize, items.length, ...items);\n        this.filteredItems = filteredItems;\n\n        if (!this.opened && !this._isInputFocused()) {\n          this._commitValue();\n        }\n\n        if (size !== undefined) {\n          this.size = size;\n        }\n\n        delete this._pendingRequests[page];\n\n        if (Object.keys(this._pendingRequests).length === 0) {\n          this.loading = false;\n        }\n      };\n\n      this._pendingRequests[page] = callback;\n      // Set the `loading` flag only after marking the request as pending\n      // to prevent the same page from getting requested multiple times\n      // as a result of `__loadingChanged` in the scroller which requests\n      // a virtualizer update which in turn may trigger a data provider page request.\n      this.loading = true;\n      this.dataProvider(params, callback);\n    }\n\n    /** @private */\n    _getPageForIndex(index) {\n      return Math.floor(index / this.pageSize);\n    }\n\n    /**\n     * Clears the cached pages and reloads data from dataprovider when needed.\n     */\n    clearCache() {\n      if (!this.dataProvider) {\n        return;\n      }\n\n      this._pendingRequests = {};\n      const filteredItems = [];\n      for (let i = 0; i < (this.size || 0); i++) {\n        filteredItems.push(this.__placeHolder);\n      }\n      this.filteredItems = filteredItems;\n\n      if (this._shouldFetchData()) {\n        this._forceNextRequest = false;\n        this._loadPage(0);\n      } else {\n        this._forceNextRequest = true;\n      }\n    }\n\n    /** @private */\n    _sizeChanged(size = 0) {\n      const filteredItems = (this.filteredItems || []).slice(0, size);\n      for (let i = 0; i < size; i++) {\n        filteredItems[i] = filteredItems[i] !== undefined ? filteredItems[i] : this.__placeHolder;\n      }\n      this.filteredItems = filteredItems;\n\n      // Cleans up the redundant pending requests for pages > size\n      // Refers to https://github.com/vaadin/vaadin-flow-components/issues/229\n      this._flushPendingRequests(size);\n    }\n\n    /** @private */\n    _pageSizeChanged(pageSize, oldPageSize) {\n      if (Math.floor(pageSize) !== pageSize || pageSize < 1) {\n        this.pageSize = oldPageSize;\n        throw new Error('`pageSize` value must be an integer > 0');\n      }\n      this.clearCache();\n    }\n\n    /** @private */\n    _dataProviderChanged(dataProvider, oldDataProvider) {\n      this._ensureItemsOrDataProvider(() => {\n        this.dataProvider = oldDataProvider;\n      });\n\n      this.clearCache();\n    }\n\n    /** @private */\n    _ensureItemsOrDataProvider(restoreOldValueCallback) {\n      if (this.items !== undefined && this.dataProvider !== undefined) {\n        restoreOldValueCallback();\n        throw new Error('Using `items` and `dataProvider` together is not supported');\n      } else if (this.dataProvider && !this.filteredItems) {\n        this.filteredItems = [];\n      }\n    }\n\n    /** @private */\n    _warnDataProviderValue(dataProvider, value) {\n      if (dataProvider && value !== '' && (this.selectedItem === undefined || this.selectedItem === null)) {\n        const valueIndex = this.__getItemIndexByValue(this.filteredItems, value);\n        if (valueIndex < 0 || !this._getItemLabel(this.filteredItems[valueIndex])) {\n          console.warn(\n            'Warning: unable to determine the label for the provided `value`. ' +\n              'Nothing to display in the text field. This usually happens when ' +\n              'setting an initial `value` before any items are returned from ' +\n              'the `dataProvider` callback. Consider setting `selectedItem` ' +\n              'instead of `value`',\n          );\n        }\n      }\n    }\n\n    /**\n     * This method cleans up the page callbacks which refers to the\n     * non-existing pages, i.e. which item indexes are greater than the\n     * changed size.\n     * This case is basically happens when:\n     * 1. Users scroll fast to the bottom and combo box generates the\n     * redundant page request/callback\n     * 2. Server side uses undefined size lazy loading and suddenly reaches\n     * the exact size which is on the range edge\n     * (for default page size = 50, it will be 100, 200, 300, ...).\n     * @param size the new size of items\n     * @private\n     */\n    _flushPendingRequests(size) {\n      if (this._pendingRequests) {\n        const lastPage = Math.ceil(size / this.pageSize);\n        const pendingRequestsKeys = Object.keys(this._pendingRequests);\n        for (let reqIdx = 0; reqIdx < pendingRequestsKeys.length; reqIdx++) {\n          const page = parseInt(pendingRequestsKeys[reqIdx]);\n          if (page >= lastPage) {\n            this._pendingRequests[page]([], size);\n          }\n        }\n      }\n    }\n  };\n"],
  "mappings": "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",
  "names": []
}
