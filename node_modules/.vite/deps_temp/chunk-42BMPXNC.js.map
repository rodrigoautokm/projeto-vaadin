{
  "version": 3,
  "sources": ["../../@vaadin/text-area/theme/lumo/vaadin-text-area-styles.js", "../../@vaadin/field-base/src/text-area-controller.js", "../../@vaadin/text-area/src/vaadin-text-area.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { inputFieldShared } from '@vaadin/vaadin-lumo-styles/mixins/input-field-shared.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst textArea = css`\n  [part='input-field'],\n  [part='input-field'] ::slotted(textarea) {\n    height: auto;\n    box-sizing: border-box;\n  }\n\n  [part='input-field'] {\n    /* Equal to the implicit padding in vaadin-text-field */\n    padding-top: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\n    padding-bottom: calc((var(--lumo-text-field-size) - 1em * var(--lumo-line-height-s)) / 2);\n    transition: background-color 0.1s;\n    line-height: var(--lumo-line-height-s);\n  }\n\n  :host(:not([readonly])) [part='input-field']::after {\n    display: none;\n  }\n\n  :host([readonly]) [part='input-field'] {\n    border: 1px dashed var(--lumo-contrast-30pct);\n  }\n\n  :host([readonly]) [part='input-field']::after {\n    border: none;\n  }\n\n  :host(:hover:not([readonly]):not([focused]):not([invalid])) [part='input-field'] {\n    background-color: var(--lumo-contrast-20pct);\n  }\n\n  @media (pointer: coarse) {\n    :host(:hover:not([readonly]):not([focused]):not([invalid])) [part='input-field'] {\n      background-color: var(--lumo-contrast-10pct);\n    }\n\n    :host(:active:not([readonly]):not([focused])) [part='input-field'] {\n      background-color: var(--lumo-contrast-20pct);\n    }\n  }\n\n  [part='input-field'] ::slotted(textarea) {\n    line-height: inherit;\n    --_lumo-text-field-overflow-mask-image: none;\n  }\n\n  /* Vertically align icon prefix/suffix with the first line of text */\n  [part='input-field'] ::slotted(iron-icon),\n  [part='input-field'] ::slotted(vaadin-icon) {\n    margin-top: calc((var(--lumo-icon-size-m) - 1em * var(--lumo-line-height-s)) / -2);\n  }\n`;\n\nregisterStyles('vaadin-text-area', [inputFieldShared, textArea], {\n  moduleId: 'lumo-text-area',\n});\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\n\n/**\n * A controller to create and initialize slotted `<textarea>` element.\n */\nexport class TextAreaController extends SlotController {\n  constructor(host, callback) {\n    super(\n      host,\n      'textarea',\n      () => document.createElement('textarea'),\n      (host, node) => {\n        const value = host.getAttribute('value');\n        if (value) {\n          node.value = value;\n        }\n\n        const name = host.getAttribute('name');\n        if (name) {\n          node.setAttribute('name', name);\n        }\n\n        node.id = this.defaultId;\n\n        if (typeof callback === 'function') {\n          callback(node);\n        }\n      },\n      true,\n    );\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/input-container/src/vaadin-input-container.js';\nimport { html, PolymerElement } from '@polymer/polymer';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\nimport { InputFieldMixin } from '@vaadin/field-base/src/input-field-mixin.js';\nimport { LabelledInputController } from '@vaadin/field-base/src/labelled-input-controller.js';\nimport { PatternMixin } from '@vaadin/field-base/src/pattern-mixin.js';\nimport { inputFieldShared } from '@vaadin/field-base/src/styles/input-field-shared-styles.js';\nimport { TextAreaController } from '@vaadin/field-base/src/text-area-controller.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-text-area', inputFieldShared, { moduleId: 'vaadin-text-area-styles' });\n\n/**\n * `<vaadin-text-area>` is a web component for multi-line text input.\n *\n * ```html\n * <vaadin-text-area label=\"Comment\"></vaadin-text-area>\n * ```\n *\n * ### Prefixes and suffixes\n *\n * These are child elements of a `<vaadin-text-area>` that are displayed\n * inline with the input, before or after.\n * In order for an element to be considered as a prefix, it must have the slot\n * attribute set to `prefix` (and similarly for `suffix`).\n *\n * ```html\n * <vaadin-text-area label=\"Description\">\n *   <div slot=\"prefix\">Details:</div>\n *   <div slot=\"suffix\">The end!</div>\n * </vaadin-text-area>\n * ```\n *\n * ### Styling\n *\n * The following custom properties are available for styling:\n *\n * Custom property                | Description                | Default\n * -------------------------------|----------------------------|---------\n * `--vaadin-field-default-width` | Default width of the field | `12em`\n *\n * `<vaadin-text-area>` provides the same set of shadow DOM parts and state attributes as `<vaadin-text-field>`.\n * See [`<vaadin-text-field>`](#/elements/vaadin-text-field) for the styling documentation.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/custom-theme/styling-components) documentation.\n *\n * @fires {Event} input - Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button.\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @extends HTMLElement\n * @mixes InputFieldMixin\n * @mixes ElementMixin\n * @mixes PatternMixin\n * @mixes ThemableMixin\n * @mixes ResizeMixin\n */\nexport class TextArea extends ResizeMixin(PatternMixin(InputFieldMixin(ThemableMixin(ElementMixin(PolymerElement))))) {\n  static get is() {\n    return 'vaadin-text-area';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          animation: 1ms vaadin-text-area-appear;\n        }\n\n        .vaadin-text-area-container {\n          flex: auto;\n        }\n\n        /* The label, helper text and the error message should neither grow nor shrink. */\n        [part='label'],\n        [part='helper-text'],\n        [part='error-message'] {\n          flex: none;\n        }\n\n        [part='input-field'] {\n          flex: auto;\n          overflow: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        ::slotted(textarea) {\n          -webkit-appearance: none;\n          -moz-appearance: none;\n          flex: auto;\n          overflow: hidden;\n          width: 100%;\n          height: 100%;\n          outline: none;\n          resize: none;\n          margin: 0;\n          padding: 0 0.25em;\n          border: 0;\n          border-radius: 0;\n          min-width: 0;\n          font: inherit;\n          font-size: 1em;\n          line-height: normal;\n          color: inherit;\n          background-color: transparent;\n          /* Disable default invalid style in Firefox */\n          box-shadow: none;\n        }\n\n        /* Override styles from <vaadin-input-container> */\n        [part='input-field'] ::slotted(textarea) {\n          align-self: stretch;\n          white-space: pre-wrap;\n        }\n\n        [part='input-field'] ::slotted(:not(textarea)) {\n          align-self: flex-start;\n        }\n\n        /* Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=1739079 */\n        :host([disabled]) ::slotted(textarea) {\n          user-select: none;\n        }\n\n        @keyframes vaadin-text-area-appear {\n          to {\n            opacity: 1;\n          }\n        }\n      </style>\n\n      <div class=\"vaadin-text-area-container\">\n        <div part=\"label\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\n        </div>\n\n        <vaadin-input-container\n          part=\"input-field\"\n          readonly=\"[[readonly]]\"\n          disabled=\"[[disabled]]\"\n          invalid=\"[[invalid]]\"\n          theme$=\"[[_theme]]\"\n          on-scroll=\"__scrollPositionUpdated\"\n        >\n          <slot name=\"prefix\" slot=\"prefix\"></slot>\n          <slot name=\"textarea\"></slot>\n          <slot name=\"suffix\" slot=\"suffix\"></slot>\n          <div id=\"clearButton\" part=\"clear-button\" slot=\"suffix\" aria-hidden=\"true\"></div>\n        </vaadin-input-container>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Maximum number of characters (in Unicode code points) that the user can enter.\n       */\n      maxlength: {\n        type: Number,\n      },\n\n      /**\n       * Minimum number of characters (in Unicode code points) that the user can enter.\n       */\n      minlength: {\n        type: Number,\n      },\n    };\n  }\n\n  static get delegateAttrs() {\n    return [...super.delegateAttrs, 'maxlength', 'minlength'];\n  }\n\n  static get constraints() {\n    return [...super.constraints, 'maxlength', 'minlength'];\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   */\n  get clearElement() {\n    return this.$.clearButton;\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  _onResize() {\n    this.__scrollPositionUpdated();\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(\n      new TextAreaController(this, (input) => {\n        this._setInputElement(input);\n        this._setFocusElement(input);\n        this.stateTarget = input;\n        this.ariaTarget = input;\n      }),\n    );\n    this.addController(new LabelledInputController(this.inputElement, this._labelController));\n    this.addEventListener('animationend', this._onAnimationEnd);\n\n    this._inputField = this.shadowRoot.querySelector('[part=input-field]');\n\n    // Wheel scrolling results in async scroll events. Preventing the wheel\n    // event, scrolling manually and then synchronously updating the scroll position CSS variable\n    // allows us to avoid some jumpy behavior that would occur on wheel otherwise.\n    this._inputField.addEventListener('wheel', (e) => {\n      const scrollTopBefore = this._inputField.scrollTop;\n      this._inputField.scrollTop += e.deltaY;\n\n      if (scrollTopBefore !== this._inputField.scrollTop) {\n        e.preventDefault();\n        this.__scrollPositionUpdated();\n      }\n    });\n\n    this._updateHeight();\n    this.__scrollPositionUpdated();\n  }\n\n  /** @private */\n  __scrollPositionUpdated() {\n    this._inputField.style.setProperty('--_text-area-vertical-scroll-position', '0px');\n    this._inputField.style.setProperty('--_text-area-vertical-scroll-position', `${this._inputField.scrollTop}px`);\n  }\n\n  /** @private */\n  _onAnimationEnd(e) {\n    if (e.animationName.indexOf('vaadin-text-area-appear') === 0) {\n      this._updateHeight();\n    }\n  }\n\n  /**\n   * @param {unknown} newVal\n   * @param {unknown} oldVal\n   * @protected\n   * @override\n   */\n  _valueChanged(newVal, oldVal) {\n    super._valueChanged(newVal, oldVal);\n\n    this._updateHeight();\n  }\n\n  /** @private */\n  _updateHeight() {\n    const input = this.inputElement;\n    const inputField = this._inputField;\n\n    if (!input || !inputField) {\n      return;\n    }\n\n    const scrollTop = inputField.scrollTop;\n\n    // Only clear the height when the content shortens to minimize scrollbar flickering.\n    const valueLength = this.value ? this.value.length : 0;\n\n    if (this._oldValueLength >= valueLength) {\n      const inputFieldHeight = getComputedStyle(inputField).height;\n      const inputWidth = getComputedStyle(input).width;\n\n      // Temporarily fix the height of the wrapping input field container to prevent changing the browsers scroll\n      // position while resetting the textareas height. If the textarea had a large height, then removing its height\n      // will reset its height to the default of two rows. That might reduce the height of the page, and the\n      // browser might adjust the scroll position before we can restore the measured height of the textarea.\n      inputField.style.display = 'block';\n      inputField.style.height = inputFieldHeight;\n\n      // Fix the input element width so its scroll height isn't affected by host's disappearing scrollbars\n      input.style.maxWidth = inputWidth;\n\n      // Clear the height of the textarea to allow measuring a reduced scroll height\n      input.style.height = 'auto';\n    }\n    this._oldValueLength = valueLength;\n\n    const inputHeight = input.scrollHeight;\n    if (inputHeight > input.clientHeight) {\n      input.style.height = `${inputHeight}px`;\n    }\n\n    // Restore\n    input.style.removeProperty('max-width');\n    inputField.style.removeProperty('display');\n    inputField.style.removeProperty('height');\n    inputField.scrollTop = scrollTop;\n  }\n\n  /**\n   * Returns true if the current textarea value satisfies all constraints (if any).\n   * @return {boolean}\n   */\n  checkValidity() {\n    if (!super.checkValidity()) {\n      return false;\n    }\n\n    // Native <textarea> does not support pattern attribute, so we have a custom logic\n    // according to WHATWG spec for <input>, with tests inspired by web-platform-tests\n    // https://html.spec.whatwg.org/multipage/input.html#the-pattern-attribute\n\n    if (!this.pattern || !this.inputElement.value) {\n      // Mark as valid if there is no pattern, or the value is empty\n      return true;\n    }\n\n    try {\n      const match = this.inputElement.value.match(this.pattern);\n      return match ? match[0] === match.input : false;\n    } catch (_) {\n      // If the pattern can not be compiled, then report as valid\n      return true;\n    }\n  }\n}\n\ncustomElements.define(TextArea.is, TextArea);\n"],
  "mappings": "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",
  "names": ["host", "inputFieldShared"]
}
