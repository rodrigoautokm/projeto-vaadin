import {
  FlattenedNodesObserver
} from "./chunk-4V7CPLV2.js";
import {
  Debouncer
} from "./chunk-VUWTYCVF.js";
import {
  animationFrame
} from "./chunk-CQH3N2QY.js";

// node_modules/@vaadin/component-base/src/overflow-controller.js
var OverflowController = class {
  constructor(host, scrollTarget) {
    this.host = host;
    this.scrollTarget = scrollTarget || host;
    this.__boundOnScroll = this.__onScroll.bind(this);
  }
  hostConnected() {
    if (!this.initialized) {
      this.initialized = true;
      this.observe();
    }
  }
  observe() {
    this.__resizeObserver = new ResizeObserver(() => {
      this.__debounceOverflow = Debouncer.debounce(this.__debounceOverflow, animationFrame, () => {
        this.__updateOverflow();
      });
    });
    this.__resizeObserver.observe(this.host);
    this.__childObserver = new FlattenedNodesObserver(this.host, (info) => {
      info.addedNodes.forEach((node) => {
        if (node.nodeType === Node.ELEMENT_NODE) {
          this.__resizeObserver.observe(node);
        }
      });
      info.removedNodes.forEach((node) => {
        if (node.nodeType === Node.ELEMENT_NODE) {
          this.__resizeObserver.unobserve(node);
        }
      });
      this.__updateOverflow();
    });
    this.scrollTarget.addEventListener("scroll", this.__boundOnScroll);
    this.__updateOverflow();
  }
  __onScroll() {
    this.__updateOverflow();
  }
  __updateOverflow() {
    const target = this.scrollTarget;
    let overflow = "";
    if (target.scrollTop > 0) {
      overflow += " top";
    }
    if (target.scrollTop < target.scrollHeight - target.clientHeight) {
      overflow += " bottom";
    }
    const scrollLeft = Math.abs(target.scrollLeft);
    if (scrollLeft > 0) {
      overflow += " start";
    }
    if (scrollLeft < target.scrollWidth - target.clientWidth) {
      overflow += " end";
    }
    overflow = overflow.trim();
    if (overflow.length > 0 && this.host.getAttribute("overflow") !== overflow) {
      this.host.setAttribute("overflow", overflow);
    } else if (overflow.length === 0 && this.host.hasAttribute("overflow")) {
      this.host.removeAttribute("overflow");
    }
  }
};

export {
  OverflowController
};
/**
 * @license
 * Copyright (c) 2021 - 2022 Vaadin Ltd.
 * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
 */
//# sourceMappingURL=chunk-AWVJUOLE.js.map
