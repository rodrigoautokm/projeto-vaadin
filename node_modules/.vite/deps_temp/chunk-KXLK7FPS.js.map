{
  "version": 3,
  "sources": ["../../@vaadin/field-base/src/checked-mixin.js", "../../@vaadin/field-base/src/slot-target-controller.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { DisabledMixin } from '@vaadin/component-base/src/disabled-mixin.js';\nimport { isElementFocused } from '@vaadin/component-base/src/focus-utils.js';\nimport { DelegateStateMixin } from './delegate-state-mixin.js';\nimport { InputMixin } from './input-mixin.js';\n\n/**\n * A mixin to manage the checked state.\n *\n * @polymerMixin\n * @mixes DelegateStateMixin\n * @mixes DisabledMixin\n * @mixes InputMixin\n */\nexport const CheckedMixin = dedupingMixin(\n  (superclass) =>\n    class CheckedMixinClass extends DelegateStateMixin(DisabledMixin(InputMixin(superclass))) {\n      static get properties() {\n        return {\n          /**\n           * True if the element is checked.\n           * @type {boolean}\n           */\n          checked: {\n            type: Boolean,\n            value: false,\n            notify: true,\n            reflectToAttribute: true,\n          },\n        };\n      }\n\n      static get delegateProps() {\n        return [...super.delegateProps, 'checked'];\n      }\n\n      /**\n       * @param {Event} event\n       * @protected\n       * @override\n       */\n      _onChange(event) {\n        const input = event.target;\n\n        this._toggleChecked(input.checked);\n\n        // Clicking the checkbox or radio-button in Safari\n        // does not make it focused, so we do it manually.\n        if (!isElementFocused(input)) {\n          input.focus();\n        }\n      }\n\n      /** @protected */\n      _toggleChecked(checked) {\n        this.checked = checked;\n      }\n    },\n);\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A controller to copy the content from a source slot to a target element.\n */\nexport class SlotTargetController {\n  constructor(sourceSlot, targetFactory, callback) {\n    /**\n     * The source `<slot>` element to copy nodes from.\n     */\n    this.sourceSlot = sourceSlot;\n\n    /**\n     * Function used to get a reference to slot target.\n     */\n    this.targetFactory = targetFactory;\n\n    /**\n     * Function called after copying nodes to target.\n     */\n    this.copyCallback = callback;\n\n    if (sourceSlot) {\n      sourceSlot.addEventListener('slotchange', () => {\n        // Copy in progress, ignore this event.\n        if (this.__copying) {\n          this.__copying = false;\n        } else {\n          this.__checkAndCopyNodesToSlotTarget();\n        }\n      });\n    }\n  }\n\n  hostConnected() {\n    this.__sourceSlotObserver = new MutationObserver(() => this.__checkAndCopyNodesToSlotTarget());\n\n    // Ensure the content is up to date when host is connected\n    // to handle e.g. mutating text content while disconnected.\n    // Note, `hostConnected()` is called twice if the controller\n    // is initialized in `ready()` when using `ControllerMixin`.\n    if (!this.__copying) {\n      this.__checkAndCopyNodesToSlotTarget();\n    }\n  }\n\n  /**\n   * Copies every node from the source slot to the target element\n   * once the source slot' content is changed.\n   *\n   * @private\n   */\n  __checkAndCopyNodesToSlotTarget() {\n    this.__sourceSlotObserver.disconnect();\n\n    // Ensure slot target element is up to date.\n    const slotTarget = this.targetFactory();\n\n    if (!slotTarget) {\n      return;\n    }\n\n    // Remove any existing clones from the slot target\n    if (this.__slotTargetClones) {\n      this.__slotTargetClones.forEach((node) => {\n        if (node.parentElement === slotTarget) {\n          slotTarget.removeChild(node);\n        }\n      });\n      delete this.__slotTargetClones;\n    }\n\n    // Exclude whitespace text nodes\n    const nodes = this.sourceSlot\n      .assignedNodes({ flatten: true })\n      .filter((node) => !(node.nodeType === Node.TEXT_NODE && node.textContent.trim() === ''));\n\n    if (nodes.length > 0) {\n      slotTarget.innerHTML = '';\n\n      // Ignore next slotchange\n      this.__copying = true;\n\n      this.__copyNodesToSlotTarget(nodes, slotTarget);\n    }\n  }\n\n  /**\n   * Copies the nodes to the target element.\n   *\n   * @param {!Array<!Node>} nodes\n   * @param {HTMLElement} slotTarget\n   * @private\n   */\n  __copyNodesToSlotTarget(nodes, slotTarget) {\n    this.__slotTargetClones = this.__slotTargetClones || [];\n\n    nodes.forEach((node) => {\n      // Clone the nodes and append the clones to the target\n      const clone = node.cloneNode(true);\n      this.__slotTargetClones.push(clone);\n\n      slotTarget.appendChild(clone);\n\n      // Observe all changes to the source node to have the clones updated\n      this.__sourceSlotObserver.observe(node, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        characterData: true,\n      });\n    });\n\n    // Run callback e.g. to show a deprecation warning\n    if (typeof this.copyCallback === 'function') {\n      this.copyCallback(nodes);\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAmBO,IAAM,eAAe;AAAA,EAC1B,CAAC,eACC,MAAM,0BAA0B,mBAAmB,cAAc,WAAW,UAAU,CAAC,CAAC,EAAE;AAAA,IACxF,WAAW,aAAa;AACtB,aAAO;AAAA,QAKL,SAAS;AAAA,UACP,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,oBAAoB;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAAA,IAEA,WAAW,gBAAgB;AACzB,aAAO,CAAC,GAAG,MAAM,eAAe,SAAS;AAAA,IAC3C;AAAA,IAOA,UAAU,OAAO;AACf,YAAM,QAAQ,MAAM;AAEpB,WAAK,eAAe,MAAM,OAAO;AAIjC,UAAI,CAAC,iBAAiB,KAAK,GAAG;AAC5B,cAAM,MAAM;AAAA,MACd;AAAA,IACF;AAAA,IAGA,eAAe,SAAS;AACtB,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AACJ;;;ACtDO,IAAM,uBAAN,MAA2B;AAAA,EAChC,YAAY,YAAY,eAAe,UAAU;AAI/C,SAAK,aAAa;AAKlB,SAAK,gBAAgB;AAKrB,SAAK,eAAe;AAEpB,QAAI,YAAY;AACd,iBAAW,iBAAiB,cAAc,MAAM;AAE9C,YAAI,KAAK,WAAW;AAClB,eAAK,YAAY;AAAA,QACnB,OAAO;AACL,eAAK,gCAAgC;AAAA,QACvC;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAEA,gBAAgB;AACd,SAAK,uBAAuB,IAAI,iBAAiB,MAAM,KAAK,gCAAgC,CAAC;AAM7F,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,gCAAgC;AAAA,IACvC;AAAA,EACF;AAAA,EAQA,kCAAkC;AAChC,SAAK,qBAAqB,WAAW;AAGrC,UAAM,aAAa,KAAK,cAAc;AAEtC,QAAI,CAAC,YAAY;AACf;AAAA,IACF;AAGA,QAAI,KAAK,oBAAoB;AAC3B,WAAK,mBAAmB,QAAQ,CAAC,SAAS;AACxC,YAAI,KAAK,kBAAkB,YAAY;AACrC,qBAAW,YAAY,IAAI;AAAA,QAC7B;AAAA,MACF,CAAC;AACD,aAAO,KAAK;AAAA,IACd;AAGA,UAAM,QAAQ,KAAK,WAChB,cAAc,EAAE,SAAS,KAAK,CAAC,EAC/B,OAAO,CAAC,SAAS,EAAE,KAAK,aAAa,KAAK,aAAa,KAAK,YAAY,KAAK,MAAM,GAAG;AAEzF,QAAI,MAAM,SAAS,GAAG;AACpB,iBAAW,YAAY;AAGvB,WAAK,YAAY;AAEjB,WAAK,wBAAwB,OAAO,UAAU;AAAA,IAChD;AAAA,EACF;AAAA,EASA,wBAAwB,OAAO,YAAY;AACzC,SAAK,qBAAqB,KAAK,sBAAsB,CAAC;AAEtD,UAAM,QAAQ,CAAC,SAAS;AAEtB,YAAM,QAAQ,KAAK,UAAU,IAAI;AACjC,WAAK,mBAAmB,KAAK,KAAK;AAElC,iBAAW,YAAY,KAAK;AAG5B,WAAK,qBAAqB,QAAQ,MAAM;AAAA,QACtC,YAAY;AAAA,QACZ,WAAW;AAAA,QACX,SAAS;AAAA,QACT,eAAe;AAAA,MACjB,CAAC;AAAA,IACH,CAAC;AAGD,QAAI,OAAO,KAAK,iBAAiB,YAAY;AAC3C,WAAK,aAAa,KAAK;AAAA,IACzB;AAAA,EACF;AACF;",
  "names": []
}
