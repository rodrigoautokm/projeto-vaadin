{
  "version": 3,
  "sources": ["../../@vaadin/item/src/vaadin-item-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2017 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { ActiveMixin } from '@vaadin/component-base/src/active-mixin.js';\nimport { FocusMixin } from '@vaadin/component-base/src/focus-mixin.js';\n\n/**\n * A mixin providing `focused`, `focus-ring`, `active`, `disabled` and `selected`.\n *\n * `focused`, `active` and `focus-ring` are set as only as attributes.\n * @polymerMixin\n */\nexport const ItemMixin = (superClass) =>\n  class VaadinItemMixin extends ActiveMixin(FocusMixin(superClass)) {\n    static get properties() {\n      return {\n        /**\n         * Used for mixin detection because `instanceof` does not work with mixins.\n         * e.g. in VaadinListMixin it filters items by using the\n         * `element._hasVaadinItemMixin` condition.\n         * @type {boolean}\n         */\n        _hasVaadinItemMixin: {\n          value: true,\n        },\n\n        /**\n         * If true, the item is in selected state.\n         * @type {boolean}\n         */\n        selected: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n          observer: '_selectedChanged',\n        },\n\n        /** @private */\n        _value: String,\n      };\n    }\n\n    /**\n     * By default, `Space` is the only possible activation key for a focusable HTML element.\n     * Nonetheless, the item is an exception as it can be also activated by pressing `Enter`.\n     * See the \"Keyboard Support\" section in https://www.w3.org/TR/wai-aria-practices/examples/menubar/menubar-1/menubar-1.html.\n     *\n     * @protected\n     * @override\n     */\n    get _activeKeys() {\n      return ['Enter', ' '];\n    }\n\n    /**\n     * @return {string}\n     */\n    get value() {\n      return this._value !== undefined ? this._value : this.textContent.trim();\n    }\n\n    /**\n     * @param {string} value\n     */\n    set value(value) {\n      this._value = value;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      const attrValue = this.getAttribute('value');\n      if (attrValue !== null) {\n        this.value = attrValue;\n      }\n    }\n\n    /**\n     * Override native `focus` to set focused attribute\n     * when focusing the item programmatically.\n     * @protected\n     * @override\n     */\n    focus() {\n      if (this.disabled) {\n        return;\n      }\n\n      super.focus();\n      this._setFocused(true);\n    }\n\n    /**\n     * @param {KeyboardEvent | MouseEvent} _event\n     * @protected\n     * @override\n     */\n    _shouldSetActive(event) {\n      return !this.disabled && !(event.type === 'keydown' && event.defaultPrevented);\n    }\n\n    /** @private */\n    _selectedChanged(selected) {\n      this.setAttribute('aria-selected', selected);\n    }\n\n    /**\n     * Override an observer from `DisabledMixin`.\n     * @protected\n     * @override\n     */\n    _disabledChanged(disabled) {\n      super._disabledChanged(disabled);\n\n      if (disabled) {\n        this.selected = false;\n        this.blur();\n      }\n    }\n\n    /**\n     * In order to be fully accessible from the keyboard, the item should\n     * manually fire the `click` event once an activation key is pressed.\n     *\n     * According to the UI Events specifications,\n     * the `click` event should be fired exactly on `keydown`:\n     * https://www.w3.org/TR/uievents/#event-type-keydown\n     *\n     * @param {KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyDown(event) {\n      super._onKeyDown(event);\n\n      if (this._activeKeys.includes(event.key) && !event.defaultPrevented) {\n        event.preventDefault();\n\n        // `DisabledMixin` overrides the standard `click()` method\n        // so that it doesn't fire the `click` event when the element is disabled.\n        this.click();\n      }\n    }\n  };\n"],
  "mappings": ";;;;;;;;AAcO,IAAM,YAAY,CAAC,eACxB,MAAM,wBAAwB,YAAY,WAAW,UAAU,CAAC,EAAE;AAAA,EAChE,WAAW,aAAa;AACtB,WAAO;AAAA,MAOL,qBAAqB;AAAA,QACnB,OAAO;AAAA,MACT;AAAA,MAMA,UAAU;AAAA,QACR,MAAM;AAAA,QACN,OAAO;AAAA,QACP,oBAAoB;AAAA,QACpB,UAAU;AAAA,MACZ;AAAA,MAGA,QAAQ;AAAA,IACV;AAAA,EACF;AAAA,EAUA,IAAI,cAAc;AAChB,WAAO,CAAC,SAAS,GAAG;AAAA,EACtB;AAAA,EAKA,IAAI,QAAQ;AACV,WAAO,KAAK,WAAW,SAAY,KAAK,SAAS,KAAK,YAAY,KAAK;AAAA,EACzE;AAAA,EAKA,IAAI,MAAM,OAAO;AACf,SAAK,SAAS;AAAA,EAChB;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,UAAM,YAAY,KAAK,aAAa,OAAO;AAC3C,QAAI,cAAc,MAAM;AACtB,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAAA,EAQA,QAAQ;AACN,QAAI,KAAK,UAAU;AACjB;AAAA,IACF;AAEA,UAAM,MAAM;AACZ,SAAK,YAAY,IAAI;AAAA,EACvB;AAAA,EAOA,iBAAiB,OAAO;AACtB,WAAO,CAAC,KAAK,YAAY,EAAE,MAAM,SAAS,aAAa,MAAM;AAAA,EAC/D;AAAA,EAGA,iBAAiB,UAAU;AACzB,SAAK,aAAa,iBAAiB,QAAQ;AAAA,EAC7C;AAAA,EAOA,iBAAiB,UAAU;AACzB,UAAM,iBAAiB,QAAQ;AAE/B,QAAI,UAAU;AACZ,WAAK,WAAW;AAChB,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EAcA,WAAW,OAAO;AAChB,UAAM,WAAW,KAAK;AAEtB,QAAI,KAAK,YAAY,SAAS,MAAM,GAAG,KAAK,CAAC,MAAM,kBAAkB;AACnE,YAAM,eAAe;AAIrB,WAAK,MAAM;AAAA,IACb;AAAA,EACF;AACF;",
  "names": []
}
