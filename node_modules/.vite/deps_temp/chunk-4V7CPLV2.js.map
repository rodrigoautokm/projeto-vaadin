{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/array-splice.js", "../../@polymer/polymer/lib/utils/flattened-nodes-observer.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd,\n                            old, oldStart, oldEnd) {\n  // \"Deletion\" columns\n  let rowCount = oldEnd - oldStart + 1;\n  let columnCount = currentEnd - currentStart + 1;\n  let distances = new Array(rowCount);\n\n  // \"Addition\" rows. Initialize null column.\n  for (let i = 0; i < rowCount; i++) {\n    distances[i] = new Array(columnCount);\n    distances[i][0] = i;\n  }\n\n  // Initialize null row\n  for (let j = 0; j < columnCount; j++)\n    distances[0][j] = j;\n\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < columnCount; j++) {\n      if (equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n        distances[i][j] = distances[i - 1][j - 1];\n      else {\n        let north = distances[i - 1][j] + 1;\n        let west = distances[i][j - 1] + 1;\n        distances[i][j] = north < west ? north : west;\n      }\n    }\n  }\n\n  return distances;\n}\n\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n  let i = distances.length - 1;\n  let j = distances[0].length - 1;\n  let current = distances[i][j];\n  let edits = [];\n  while (i > 0 || j > 0) {\n    if (i == 0) {\n      edits.push(EDIT_ADD);\n      j--;\n      continue;\n    }\n    if (j == 0) {\n      edits.push(EDIT_DELETE);\n      i--;\n      continue;\n    }\n    let northWest = distances[i - 1][j - 1];\n    let west = distances[i - 1][j];\n    let north = distances[i][j - 1];\n\n    let min;\n    if (west < north)\n      min = west < northWest ? west : northWest;\n    else\n      min = north < northWest ? north : northWest;\n\n    if (min == northWest) {\n      if (northWest == current) {\n        edits.push(EDIT_LEAVE);\n      } else {\n        edits.push(EDIT_UPDATE);\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else if (min == west) {\n      edits.push(EDIT_DELETE);\n      i--;\n      current = west;\n    } else {\n      edits.push(EDIT_ADD);\n      j--;\n      current = north;\n    }\n  }\n\n  edits.reverse();\n  return edits;\n}\n\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n\n/**\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n *\n * @param {!Array} current The current \"changed\" array for which to\n * calculate splices.\n * @param {number} currentStart Starting index in the `current` array for\n * which splices are calculated.\n * @param {number} currentEnd Ending index in the `current` array for\n * which splices are calculated.\n * @param {!Array} old The original \"unchanged\" array to compare `current`\n * against to determine splices.\n * @param {number} oldStart Starting index in the `old` array for\n * which splices are calculated.\n * @param {number} oldEnd Ending index in the `old` array for\n * which splices are calculated.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nfunction calcSplices(current, currentStart, currentEnd,\n                      old, oldStart, oldEnd) {\n  let prefixCount = 0;\n  let suffixCount = 0;\n  let splice;\n\n  let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n  if (currentStart == 0 && oldStart == 0)\n    prefixCount = sharedPrefix(current, old, minLength);\n\n  if (currentEnd == current.length && oldEnd == old.length)\n    suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n  currentStart += prefixCount;\n  oldStart += prefixCount;\n  currentEnd -= suffixCount;\n  oldEnd -= suffixCount;\n\n  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n    return [];\n\n  if (currentStart == currentEnd) {\n    splice = newSplice(currentStart, [], 0);\n    while (oldStart < oldEnd)\n      splice.removed.push(old[oldStart++]);\n\n    return [ splice ];\n  } else if (oldStart == oldEnd)\n    return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n  let ops = spliceOperationsFromEditDistances(\n      calcEditDistances(current, currentStart, currentEnd,\n                             old, oldStart, oldEnd));\n\n  splice = undefined;\n  let splices = [];\n  let index = currentStart;\n  let oldIndex = oldStart;\n  for (let i = 0; i < ops.length; i++) {\n    switch(ops[i]) {\n      case EDIT_LEAVE:\n        if (splice) {\n          splices.push(splice);\n          splice = undefined;\n        }\n\n        index++;\n        oldIndex++;\n        break;\n      case EDIT_UPDATE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n      case EDIT_ADD:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n        break;\n      case EDIT_DELETE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n    }\n  }\n\n  if (splice) {\n    splices.push(splice);\n  }\n  return splices;\n}\n\nfunction sharedPrefix(current, old, searchLength) {\n  for (let i = 0; i < searchLength; i++)\n    if (!equals(current[i], old[i]))\n      return i;\n  return searchLength;\n}\n\nfunction sharedSuffix(current, old, searchLength) {\n  let index1 = current.length;\n  let index2 = old.length;\n  let count = 0;\n  while (count < searchLength && equals(current[--index1], old[--index2]))\n    count++;\n\n  return count;\n}\n\n/**\n * Returns an array of splice records indicating the minimum edits required\n * to transform the `previous` array into the `current` array.\n *\n * Splice records are ordered by index and contain the following fields:\n * - `index`: index where edit started\n * - `removed`: array of removed items from this index\n * - `addedCount`: number of items added at this index\n *\n * This function is based on the Levenshtein \"minimum edit distance\"\n * algorithm. Note that updates are treated as removal followed by addition.\n *\n * The worst-case time complexity of this algorithm is `O(l * p)`\n *   l: The length of the current array\n *   p: The length of the previous array\n *\n * However, the worst-case complexity is reduced by an `O(n)` optimization\n * to detect any shared prefix & suffix between the two arrays and only\n * perform the more expensive minimum edit distance calculation over the\n * non-shared portions of the arrays.\n *\n * @function\n * @param {!Array} current The \"changed\" array for which splices will be\n * calculated.\n * @param {!Array} previous The \"unchanged\" original array to compare\n * `current` against to determine the splices.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nexport function calculateSplices(current, previous) {\n  return calcSplices(current, 0, current.length, previous, 0,\n                          previous.length);\n}\n\nfunction equals(currentValue, previousValue) {\n  return currentValue === previousValue;\n}\n", "/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\nimport { wrap } from './wrap.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {!Node} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return (node.localName === 'slot');\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * An example:\n * ```js\n * class TestSelfObserve extends PolymerElement {\n *   static get is() { return 'test-self-observe';}\n *   connectedCallback() {\n *     super.connectedCallback();\n *     this._observer = new FlattenedNodesObserver(this, (info) => {\n *       this.info = info;\n *     });\n *   }\n *   disconnectedCallback() {\n *     super.disconnectedCallback();\n *     this._observer.disconnect();\n *   }\n * }\n * customElements.define(TestSelfObserve.is, TestSelfObserve);\n * ```\n *\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n * @implements {PolymerDomApi.ObserveHandle}\n */\nexport let FlattenedNodesObserver = class {\n\n  /**\n   * Returns the list of flattened nodes for the given `node`.\n   * This list consists of a node's children and, for any children\n   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to\n   *      return the list of flattened nodes.\n   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.\n   * @nocollapse See https://github.com/google/closure-compiler/issues/2763\n   */\n  // eslint-disable-next-line\n  static getFlattenedNodes(node) {\n    const wrapped = wrap(node);\n    if (isSlot(node)) {\n      node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n      return wrapped.assignedNodes({flatten: true});\n    } else {\n      return Array.from(wrapped.childNodes).map((node) => {\n        if (isSlot(node)) {\n          node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n          return wrap(node).assignedNodes({flatten: true});\n        } else {\n          return [node];\n        }\n      }).reduce((a, b) => a.concat(b), []);\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} target Node on which to listen for changes.\n   * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   */\n  // eslint-disable-next-line\n  constructor(target, callback) {\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._shadyChildrenObserver = null;\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    /**\n     * @type {!HTMLElement}\n     * @private\n     */\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /**\n     * @type {function()}\n     * @private\n     */\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   *\n   * @return {void}\n   */\n  connect() {\n    if (isSlot(this._target)) {\n      this._listenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._listenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM) {\n        this._shadyChildrenObserver =\n          window.ShadyDOM.observeChildren(this._target, (mutations) => {\n            this._processMutations(mutations);\n          });\n      } else {\n        this._nativeChildrenObserver =\n          new MutationObserver((mutations) => {\n            this._processMutations(mutations);\n          });\n        this._nativeChildrenObserver.observe(this._target, {childList: true});\n      }\n    }\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the flattened nodes observer. After calling this method\n   * the observer callback will not be called when changes to flattened nodes\n   * occur. The `connect` method may be subsequently called to reactivate\n   * the observer.\n   *\n   * @return {void}\n   * @override\n   */\n  disconnect() {\n    if (isSlot(this._target)) {\n      this._unlistenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._unlistenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM && this._shadyChildrenObserver) {\n        window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n        this._shadyChildrenObserver = null;\n      } else if (this._nativeChildrenObserver) {\n        this._nativeChildrenObserver.disconnect();\n        this._nativeChildrenObserver = null;\n      }\n    }\n    this._connected = false;\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      microTask.run(() => this.flush());\n    }\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processMutations(mutations) {\n    this._processSlotMutations(mutations);\n    this.flush();\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processSlotMutations(mutations) {\n    if (mutations) {\n      for (let i=0; i < mutations.length; i++) {\n        let mutation = mutations[i];\n        if (mutation.addedNodes) {\n          this._listenSlots(mutation.addedNodes);\n        }\n        if (mutation.removedNodes) {\n          this._unlistenSlots(mutation.removedNodes);\n        }\n      }\n    }\n  }\n\n  /**\n   * Flushes the observer causing any pending changes to be immediately\n   * delivered the observer callback. By default these changes are delivered\n   * asynchronously at the next microtask checkpoint.\n   *\n   * @return {boolean} Returns true if any pending changes caused the observer\n   * callback to run.\n   */\n  flush() {\n    if (!this._connected) {\n      return false;\n    }\n    if (window.ShadyDOM) {\n      ShadyDOM.flush();\n    }\n    if (this._nativeChildrenObserver) {\n      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n    } else if (this._shadyChildrenObserver) {\n      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n    }\n    this._scheduled = false;\n    let info = {\n      target: this._target,\n      addedNodes: [],\n      removedNodes: []\n    };\n    let newNodes = this.constructor.getFlattenedNodes(this._target);\n    let splices = calculateSplices(newNodes,\n      this._effectiveNodes);\n    // process removals\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        info.removedNodes.push(n);\n      }\n    }\n    // process adds\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=s.index; j < s.index + s.addedCount; j++) {\n        info.addedNodes.push(newNodes[j]);\n      }\n    }\n    // update cache\n    this._effectiveNodes = newNodes;\n    let didFlush = false;\n    if (info.addedNodes.length || info.removedNodes.length) {\n      didFlush = true;\n      this.callback.call(this._target, info);\n    }\n    return didFlush;\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _listenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.addEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _unlistenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.removeEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n};"],
  "mappings": "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",
  "names": ["node"]
}
