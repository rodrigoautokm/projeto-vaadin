{
  "version": 3,
  "sources": ["../../lit-html/src/directives/unsafe-html.ts", "../../lit-html/src/directives/unsafe-svg.ts", "../../@vaadin/icon/src/vaadin-icon-svg.js", "../../@vaadin/icon/src/vaadin-iconset.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {directive} from '../directive.js';\nimport {UnsafeHTMLDirective} from './unsafe-html.js';\n\nconst SVG_RESULT = 2;\n\nclass UnsafeSVGDirective extends UnsafeHTMLDirective {\n  static override directiveName = 'unsafeSVG';\n  static override resultType = SVG_RESULT;\n}\n\n/**\n * Renders the result as SVG, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeSVG = directive(UnsafeSVGDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {UnsafeSVGDirective};\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { nothing, render, svg } from 'lit';\nimport { isTemplateResult, TemplateResultType } from 'lit/directive-helpers.js';\nimport { unsafeSVG } from 'lit/directives/unsafe-svg.js';\n\n/**\n * Clone given node and return its content as SVG literal.\n *\n * @param {Element} source\n */\nexport function cloneSvgNode(source) {\n  let result = nothing;\n  if (source) {\n    const content = source.cloneNode(true);\n    content.removeAttribute('id');\n    result = svg`${unsafeSVG(content.outerHTML)}`;\n  }\n\n  return result;\n}\n\n/**\n * Test if the given argument is a valid SVG literal.\n *\n * @param {unknown} source\n */\nexport function isValidSvg(source) {\n  return isTemplateResult(source, TemplateResultType.SVG) || source === nothing;\n}\n\n/**\n * Create a valid SVG literal based on the argument.\n *\n * @param {unknown} svg\n */\nexport function ensureSvgLiteral(source) {\n  let result = source == null || source === '' ? nothing : source;\n\n  if (!isValidSvg(result)) {\n    console.error('[vaadin-icon] Invalid svg passed, please use Lit svg literal.');\n    result = nothing;\n  }\n\n  return result;\n}\n\n/**\n * Render a given SVG literal to the container.\n *\n * @param {unknown} source\n * @param {SVGElement} container\n */\nexport function renderSvg(source, container) {\n  const result = ensureSvgLiteral(source);\n  render(result, container);\n}\n\n/**\n * Create an SVG literal from source string.\n *\n * @param {string} source\n */\nexport function unsafeSvgLiteral(source) {\n  return svg`${unsafeSVG(source)}`;\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { cloneSvgNode } from './vaadin-icon-svg.js';\n\nconst iconRegistry = {};\n\n/**\n * `<vaadin-iconset>` is a Web Component for creating SVG icon collections.\n *\n * @extends HTMLElement\n * @mixes ElementMixin\n */\nclass Iconset extends ElementMixin(PolymerElement) {\n  static get template() {\n    return null;\n  }\n\n  static get is() {\n    return 'vaadin-iconset';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the iconset. Every iconset is required to have its own unique name.\n       * All the SVG icons in the iconset must have IDs conforming to its name.\n       *\n       * See also [`name`](#/elements/vaadin-icon#property-name) property of `vaadin-icon`.\n       */\n      name: {\n        type: String,\n        observer: '__nameChanged',\n      },\n\n      /**\n       * The size of an individual icon. Note that icons must be square.\n       *\n       * When using `vaadin-icon`, the size of the iconset will take precedence\n       * over the size defined by the user to ensure correct appearance.\n       */\n      size: {\n        type: Number,\n        value: 24,\n      },\n    };\n  }\n\n  /**\n   * Create an instance of the iconset.\n   *\n   * @param {string} name\n   */\n  static getIconset(name) {\n    let iconset = iconRegistry[name];\n    if (!iconset) {\n      iconset = document.createElement('vaadin-iconset');\n      iconset.name = name;\n      iconRegistry[name] = iconset;\n    }\n    return iconset;\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.style.display = 'none';\n  }\n\n  /**\n   * Produce SVGTemplateResult for the element matching `name` in this\n   * iconset, or `undefined` if there is no matching element.\n   *\n   * @param {string} name\n   */\n  applyIcon(name) {\n    // Create the icon map on-demand, since the iconset itself has no discrete\n    // signal to know when it's children are fully parsed\n    this._icons = this._icons || this.__createIconMap();\n    const icon = this._icons[this.__getIconId(name)];\n    return {\n      svg: cloneSvgNode(icon),\n      size: this.size,\n      viewBox: icon ? icon.getAttribute('viewBox') : null,\n    };\n  }\n\n  /**\n   * Create a map of child SVG elements by id.\n   */\n  __createIconMap() {\n    const icons = {};\n    this.querySelectorAll('[id]').forEach((icon) => {\n      icons[this.__getIconId(icon.id)] = icon;\n    });\n    return icons;\n  }\n\n  /** @private */\n  __getIconId(id) {\n    return (id || '').replace(`${this.name}:`, '');\n  }\n\n  /** @private */\n  __nameChanged(name, oldName) {\n    if (oldName) {\n      iconRegistry[name] = Iconset.getIconset(oldName);\n      delete iconRegistry[oldName];\n    }\n    if (name) {\n      iconRegistry[name] = this;\n      document.dispatchEvent(new CustomEvent('vaadin-iconset-registered', { detail: name }));\n    }\n  }\n}\n\ncustomElements.define(Iconset.is, Iconset);\n\nexport { Iconset };\n"],
  "mappings": "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",
  "names": []
}
