{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/active-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DisabledMixin } from './disabled-mixin.js';\nimport { addListener } from './gestures.js';\nimport { KeyboardMixin } from './keyboard-mixin.js';\n\n/**\n * A mixin to toggle the `active` attribute.\n *\n * The attribute is set whenever the user activates the element by a pointer\n * or presses an activation key on the element from the keyboard.\n *\n * The attribute is removed as soon as the element is deactivated\n * by the pointer or by releasing the activation key.\n *\n * @polymerMixin\n */\nexport const ActiveMixin = (superclass) =>\n  class ActiveMixinClass extends DisabledMixin(KeyboardMixin(superclass)) {\n    /**\n     * An array of activation keys.\n     *\n     * See possible values here:\n     * https://developer.mozilla.org/ru/docs/Web/API/KeyboardEvent/key/Key_Values\n     *\n     * @protected\n     * @return {!Array<!string>}\n     */\n    get _activeKeys() {\n      return [' '];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      addListener(this, 'down', (event) => {\n        if (this._shouldSetActive(event)) {\n          this._setActive(true);\n        }\n      });\n\n      addListener(this, 'up', () => {\n        this._setActive(false);\n      });\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // When the element is disconnecting from the DOM at the moment being active,\n      // the `active` attribute needs to be manually removed from the element.\n      // Otherwise, it will preserve on the element until the element is activated once again.\n      // The case reproduces for `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\n      this._setActive(false);\n    }\n\n    /**\n     * @param {KeyboardEvent | MouseEvent} _event\n     * @protected\n     */\n    _shouldSetActive(_event) {\n      return !this.disabled;\n    }\n\n    /**\n     * Sets the `active` attribute on the element if an activation key is pressed.\n     *\n     * @param {KeyboardEvent} event\n     * @protected\n     * @override\n     */\n    _onKeyDown(event) {\n      super._onKeyDown(event);\n\n      if (this._shouldSetActive(event) && this._activeKeys.includes(event.key)) {\n        this._setActive(true);\n\n        // Element can become hidden before the `keyup` event, e.g. on button click.\n        // Use document listener to ensure `active` attribute is removed correctly.\n        document.addEventListener(\n          'keyup',\n          (e) => {\n            if (this._activeKeys.includes(e.key)) {\n              this._setActive(false);\n            }\n          },\n          { once: true },\n        );\n      }\n    }\n\n    /**\n     * Toggles the `active` attribute on the element.\n     *\n     * @param {boolean} active\n     * @protected\n     */\n    _setActive(active) {\n      this.toggleAttribute('active', active);\n    }\n  };\n"],
  "mappings": ";;;;;;;;;;;AAoBO,IAAM,cAAc,CAAC,eAC1B,MAAM,yBAAyB,cAAc,cAAc,UAAU,CAAC,EAAE;AAAA,EAUtE,IAAI,cAAc;AAChB,WAAO,CAAC,GAAG;AAAA,EACb;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,gBAAY,MAAM,QAAQ,CAAC,UAAU;AACnC,UAAI,KAAK,iBAAiB,KAAK,GAAG;AAChC,aAAK,WAAW,IAAI;AAAA,MACtB;AAAA,IACF,CAAC;AAED,gBAAY,MAAM,MAAM,MAAM;AAC5B,WAAK,WAAW,KAAK;AAAA,IACvB,CAAC;AAAA,EACH;AAAA,EAGA,uBAAuB;AACrB,UAAM,qBAAqB;AAM3B,SAAK,WAAW,KAAK;AAAA,EACvB;AAAA,EAMA,iBAAiB,QAAQ;AACvB,WAAO,CAAC,KAAK;AAAA,EACf;AAAA,EASA,WAAW,OAAO;AAChB,UAAM,WAAW,KAAK;AAEtB,QAAI,KAAK,iBAAiB,KAAK,KAAK,KAAK,YAAY,SAAS,MAAM,GAAG,GAAG;AACxE,WAAK,WAAW,IAAI;AAIpB,eAAS;AAAA,QACP;AAAA,QACA,CAAC,MAAM;AACL,cAAI,KAAK,YAAY,SAAS,EAAE,GAAG,GAAG;AACpC,iBAAK,WAAW,KAAK;AAAA,UACvB;AAAA,QACF;AAAA,QACA,EAAE,MAAM,KAAK;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAAA,EAQA,WAAW,QAAQ;AACjB,SAAK,gBAAgB,UAAU,MAAM;AAAA,EACvC;AACF;",
  "names": []
}
