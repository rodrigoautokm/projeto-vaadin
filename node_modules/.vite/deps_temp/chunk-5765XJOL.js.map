{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/slot-controller.js", "../../@vaadin/field-base/src/label-controller.js", "../../@vaadin/field-base/src/label-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport { generateUniqueId } from './unique-id-utils.js';\n\n/**\n * A controller for providing content to slot element and observing changes.\n */\nexport class SlotController extends EventTarget {\n  /**\n   * Ensure that every instance has unique ID.\n   *\n   * @param {string} slotName\n   * @param {HTMLElement} host\n   * @return {string}\n   * @protected\n   */\n  static generateId(slotName, host) {\n    const prefix = slotName || 'default';\n    return `${prefix}-${host.localName}-${generateUniqueId()}`;\n  }\n\n  constructor(host, slotName, slotFactory, slotInitializer, useUniqueId) {\n    super();\n\n    this.host = host;\n    this.slotName = slotName;\n    this.slotFactory = slotFactory;\n    this.slotInitializer = slotInitializer;\n\n    // Only generate the default ID if requested by the controller.\n    if (useUniqueId) {\n      this.defaultId = SlotController.generateId(slotName, host);\n    }\n  }\n\n  hostConnected() {\n    if (!this.initialized) {\n      let node = this.getSlotChild();\n\n      if (!node) {\n        node = this.attachDefaultNode();\n      } else {\n        this.node = node;\n        this.initCustomNode(node);\n      }\n\n      this.initNode(node);\n\n      // TODO: Consider making this behavior opt-in to improve performance.\n      this.observe();\n\n      this.initialized = true;\n    }\n  }\n\n  /**\n   * Create and attach default node using the slot factory.\n   * @return {Node | undefined}\n   * @protected\n   */\n  attachDefaultNode() {\n    const { host, slotName, slotFactory } = this;\n\n    // Check if the node was created previously and if so, reuse it.\n    let node = this.defaultNode;\n\n    // Slot factory is optional, some slots don't have default content.\n    if (!node && slotFactory) {\n      node = slotFactory(host);\n      if (node instanceof Element) {\n        if (slotName !== '') {\n          node.setAttribute('slot', slotName);\n        }\n        this.node = node;\n        this.defaultNode = node;\n      }\n    }\n\n    if (node) {\n      host.appendChild(node);\n    }\n\n    return node;\n  }\n\n  /**\n   * Return a reference to the node managed by the controller.\n   * @return {Node}\n   */\n  getSlotChild() {\n    const { slotName } = this;\n    return Array.from(this.host.childNodes).find((node) => {\n      // Either an element (any slot) or a text node (only un-named slot).\n      return (\n        (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) ||\n        (node.nodeType === Node.TEXT_NODE && node.textContent.trim() && slotName === '')\n      );\n    });\n  }\n\n  /**\n   * @param {Node} node\n   * @protected\n   */\n  initNode(node) {\n    const { slotInitializer } = this;\n    // Don't try to bind `this` to initializer (normally it's arrow function).\n    // Instead, pass the host as a first argument to access component's state.\n    if (slotInitializer) {\n      slotInitializer(this.host, node);\n    }\n  }\n\n  /**\n   * Override to initialize the newly added custom node.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  initCustomNode(_node) {}\n\n  /**\n   * Override to teardown slotted node when it's removed.\n   *\n   * @param {Node} _node\n   * @protected\n   */\n  teardownNode(_node) {}\n\n  /**\n   * Setup the observer to manage slot content changes.\n   * @protected\n   */\n  observe() {\n    const { slotName } = this;\n    const selector = slotName === '' ? 'slot:not([name])' : `slot[name=${slotName}]`;\n    const slot = this.host.shadowRoot.querySelector(selector);\n\n    this.__slotObserver = new FlattenedNodesObserver(slot, (info) => {\n      // TODO: support default slot with multiple nodes (e.g. confirm-dialog)\n      const current = this.node;\n      const newNode = info.addedNodes.find((node) => node !== current);\n\n      if (info.removedNodes.length) {\n        info.removedNodes.forEach((node) => {\n          this.teardownNode(node);\n        });\n      }\n\n      if (newNode) {\n        // Custom node is added, remove the current one.\n        if (current && current.isConnected) {\n          this.host.removeChild(current);\n        }\n\n        this.node = newNode;\n\n        if (newNode !== this.defaultNode) {\n          this.initCustomNode(newNode);\n\n          this.initNode(newNode);\n        }\n      }\n    });\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\n\n/**\n * A controller to manage the label element.\n */\nexport class LabelController extends SlotController {\n  constructor(host) {\n    super(\n      host,\n      'label',\n      () => document.createElement('label'),\n      (_host, node) => {\n        // Set ID attribute or use the existing one.\n        this.__updateLabelId(node);\n\n        // Set text content for the default label.\n        this.__updateDefaultLabel(this.label);\n\n        this.__observeLabel(node);\n      },\n      true,\n    );\n  }\n\n  /**\n   * @return {string}\n   */\n  get labelId() {\n    return this.node.id;\n  }\n\n  /**\n   * Override to initialize the newly added custom label.\n   *\n   * @param {Node} labelNode\n   * @protected\n   * @override\n   */\n  initCustomNode(labelNode) {\n    this.__updateLabelId(labelNode);\n\n    const hasLabel = this.__hasLabel(labelNode);\n    this.__toggleHasLabel(hasLabel);\n  }\n\n  /**\n   * Override to cleanup label node when it's removed.\n   *\n   * @param {Node} node\n   * @protected\n   * @override\n   */\n  teardownNode(node) {\n    if (this.__labelObserver) {\n      this.__labelObserver.disconnect();\n    }\n\n    let labelNode = this.getSlotChild();\n\n    // If custom label was removed, restore the default one.\n    if (!labelNode && node !== this.defaultNode) {\n      labelNode = this.attachDefaultNode();\n\n      // Run initializer to update default label and ID.\n      this.initNode(labelNode);\n    }\n\n    const hasLabel = this.__hasLabel(labelNode);\n    this.__toggleHasLabel(hasLabel);\n  }\n\n  /**\n   * Set label based on corresponding host property.\n   *\n   * @param {string} label\n   */\n  setLabel(label) {\n    this.label = label;\n\n    this.__updateDefaultLabel(label);\n  }\n\n  /**\n   * @param {HTMLElement} labelNode\n   * @return {boolean}\n   * @private\n   */\n  __hasLabel(labelNode) {\n    if (!labelNode) {\n      return false;\n    }\n\n    return labelNode.children.length > 0 || this.__isNotEmpty(labelNode.textContent);\n  }\n\n  /**\n   * @param {string} label\n   * @private\n   */\n  __isNotEmpty(label) {\n    return Boolean(label && label.trim() !== '');\n  }\n\n  /**\n   * @param {HTMLElement} labelNode\n   * @private\n   */\n  __observeLabel(labelNode) {\n    this.__labelObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const target = mutation.target;\n\n        // Ensure the mutation target is the currently connected label\n        // to ignore async mutations dispatched for removed element.\n        const isLabelMutation = target === this.node;\n\n        if (mutation.type === 'attributes') {\n          // We use attributeFilter to only observe ID mutation,\n          // no need to check for attribute name separately.\n          if (isLabelMutation && target.id !== this.defaultId) {\n            this.__updateLabelId(target);\n          }\n        } else if (isLabelMutation || target.parentElement === this.node) {\n          // Update has-label when textContent changes\n          const hasLabel = this.__hasLabel(this.node);\n          this.__toggleHasLabel(hasLabel);\n        }\n      });\n    });\n\n    // Observe changes to label ID attribute, text content and children.\n    this.__labelObserver.observe(labelNode, {\n      attributes: true,\n      attributeFilter: ['id'],\n      childList: true,\n      subtree: true,\n      characterData: true,\n    });\n  }\n\n  /**\n   * @param {boolean} hasLabel\n   * @private\n   */\n  __toggleHasLabel(hasLabel) {\n    this.host.toggleAttribute('has-label', hasLabel);\n\n    // Make it possible for other mixins to observe change\n    this.dispatchEvent(\n      new CustomEvent('label-changed', {\n        detail: {\n          hasLabel,\n          node: this.node,\n        },\n      }),\n    );\n  }\n\n  /**\n   * @param {string} label\n   * @private\n   */\n  __updateDefaultLabel(label) {\n    if (this.defaultNode) {\n      this.defaultNode.textContent = label;\n\n      // Update has-label if default label is used\n      if (this.defaultNode === this.node) {\n        const hasLabel = this.__isNotEmpty(label);\n        this.__toggleHasLabel(hasLabel);\n      }\n    }\n  }\n\n  /**\n   * @param {HTMLElement} labelNode\n   * @private\n   */\n  __updateLabelId(labelNode) {\n    if (!labelNode.id) {\n      labelNode.id = this.defaultId;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2022 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { LabelController } from './label-controller.js';\n\n/**\n * A mixin to provide label via corresponding property or named slot.\n *\n * @polymerMixin\n * @mixes ControllerMixin\n */\nexport const LabelMixin = dedupingMixin(\n  (superclass) =>\n    class LabelMixinClass extends ControllerMixin(superclass) {\n      static get properties() {\n        return {\n          /**\n           * The label text for the input node.\n           * When no light dom defined via [slot=label], this value will be used.\n           */\n          label: {\n            type: String,\n            observer: '_labelChanged',\n          },\n        };\n      }\n\n      /** @protected */\n      get _labelId() {\n        return this._labelController.labelId;\n      }\n\n      /** @protected */\n      get _labelNode() {\n        return this._labelController.node;\n      }\n\n      constructor() {\n        super();\n\n        this._labelController = new LabelController(this);\n      }\n\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this.addController(this._labelController);\n      }\n\n      /** @protected */\n      _labelChanged(label) {\n        this._labelController.setLabel(label);\n      }\n    },\n);\n"],
  "mappings": "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",
  "names": []
}
